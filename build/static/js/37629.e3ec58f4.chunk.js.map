{"version":3,"file":"static/js/37629.e3ec58f4.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/wallets/in-app/core/constants/settings.ts","../node_modules/@passwordless-id/webauthn/dist/esm/utils.js","../node_modules/@passwordless-id/webauthn/dist/esm/client.js","../node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js","../node_modules/@passwordless-id/webauthn/dist/esm/authenticators.js","../node_modules/@passwordless-id/webauthn/dist/esm/parsers.js","../node_modules/@passwordless-id/webauthn/dist/esm/server.js","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/passkeys.ts","../node_modules/thirdweb/src/wallets/in-app/web/utils/Storage/LocalStorage.ts"],"sourcesContent":["/**\n * @internal\n */\nexport const IN_APP_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\n\n/**\n * @internal\n */\nexport const HEADLESS_GOOGLE_OAUTH_ROUTE =\n  \"/auth/headless-google-login-managed\";\n\n/**\n * @internal\n */\nexport const BASE_IN_APP_WALLET_URL = \"embedded-wallet.thirdweb.com\";\n\n// STORAGE\n\n/**\n * @internal\n */\nexport const WALLET_USER_DETAILS_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `thirdwebEwsWalletUserDetails-${clientId}`;\n\n/**\n * @internal\n */\nexport const WALLET_USER_ID_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `thirdwebEwsWalletUserId-${clientId}`;\n\n/**\n * @internal\n */\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\n\n/**\n * @internal\n */\nexport const AUTH_TOKEN_LOCAL_STORAGE_NAME = (clientId: string) => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\n\n/**\n * @internal\n */\nexport const PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME = (clientId: string) => {\n  return `passkey-credential-id-${clientId}`;\n};\n\n/**\n * @internal\n */\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\n\n/**\n * @internal\n */\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME = (\n  clientId: string,\n  userId: string,\n) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\n\n/**\n * @internal\n */\nexport const WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `walletConnectSessions-${clientId}`;\n\n/**\n * @internal\n */\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = (clientId: string) =>\n  `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n","/********************************\n     Encoding/Decoding Utils\n********************************/\nexport function randomChallenge() {\n    return crypto.randomUUID();\n}\nexport function toBuffer(txt) {\n    return Uint8Array.from(txt, c => c.charCodeAt(0)).buffer;\n}\nexport function parseBuffer(buffer) {\n    return String.fromCharCode(...new Uint8Array(buffer));\n}\nexport function isBase64url(txt) {\n    return txt.match(/^[a-zA-Z0-9\\-_]+=*$/) !== null;\n}\nexport function toBase64url(buffer) {\n    const txt = btoa(parseBuffer(buffer)); // base64\n    return txt.replaceAll('+', '-').replaceAll('/', '_');\n}\nexport function parseBase64url(txt) {\n    txt = txt.replaceAll('-', '+').replaceAll('_', '/'); // base64url -> base64\n    return toBuffer(atob(txt));\n}\nexport async function sha256(buffer) {\n    return await crypto.subtle.digest('SHA-256', buffer);\n}\nexport function bufferToHex(buffer) {\n    return [...new Uint8Array(buffer)]\n        .map(b => b.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n}\nexport function concatenateBuffers(buffer1, buffer2) {\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp;\n}\n;\n","import * as utils from './utils.js';\n/**\n * Returns whether passwordless authentication is available on this browser/platform or not.\n */\nexport function isAvailable() {\n    return !!window.PublicKeyCredential;\n}\n/**\n * Returns whether the device itself can be used as authenticator.\n */\nexport async function isLocalAuthenticator() {\n    return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\nasync function getAuthAttachment(authType) {\n    if (authType === \"local\")\n        return \"platform\";\n    if (authType === \"roaming\" || authType === \"extern\")\n        return \"cross-platform\";\n    if (authType === \"both\")\n        return undefined; // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\n    // the default case: \"auto\", depending on device capabilities\n    try {\n        if (await isLocalAuthenticator())\n            return \"platform\";\n        else\n            return \"cross-platform\";\n    }\n    catch (e) {\n        // might happen due to some security policies\n        // see https://w3c.github.io/webauthn/#sctn-isUserVerifyingPlatformAuthenticatorAvailable\n        return undefined; // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\n    }\n}\nfunction getAlgoName(num) {\n    switch (num) {\n        case -7: return \"ES256\";\n        // case -8 ignored to to its rarity\n        case -257: return \"RS256\";\n        default: throw new Error(`Unknown algorithm code: ${num}`);\n    }\n}\n/**\n * Creates a cryptographic key pair, in order to register the public key for later passwordless authentication.\n *\n * @param {string} username\n * @param {string} challenge A server-side randomly generated string.\n * @param {Object} [options] Optional parameters.\n * @param {number} [options.timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\n * @param {'required'|'preferred'|'discouraged'} [options.userVerification='required'] Whether to prompt for biometric/PIN check or not.\n * @param {'auto'|'local'|'roaming'|'both'}       [options.authenticatorType='auto'] Which device to use as authenticator.\n *          'auto': if the local device can be used as authenticator it will be preferred. Otherwise it will prompt for a roaming device.\n *          'local': use the local device (using TouchID, FaceID, Windows Hello or PIN)\n *          'roaming': use a roaming device (security key or connected phone)\n *          'both': prompt the user to choose between local or roaming device. The UI and user interaction in this case is platform specific.\n * @param {boolean} [options.attestation=false] If enabled, the device attestation and clientData will be provided as Base64url encoded binary data.\n *                                Note that this is not available on some platforms.\n * @param {'discouraged'|'preferred'|'required'} [options.discoverable] A \"discoverable\" credential can be selected using `authenticate(...)` without providing credential IDs.\n *              Instead, a native pop-up will appear for user selection.\n *              This may have an impact on the \"passkeys\" user experience and syncing behavior of the key.\n */\nexport async function register(username, challenge, options) {\n    options = options ?? {};\n    if (!utils.isBase64url(challenge))\n        throw new Error('Provided challenge is not properly encoded in Base64url');\n    const creationOptions = {\n        challenge: utils.parseBase64url(challenge),\n        rp: {\n            id: options.domain ?? window.location.hostname,\n            name: options.domain ?? window.location.hostname\n        },\n        user: {\n            id: options.userHandle ? utils.toBuffer(options.userHandle) : await utils.sha256(new TextEncoder().encode('passwordless.id-user:' + username)),\n            name: username,\n            displayName: username,\n        },\n        pubKeyCredParams: [\n            { alg: -7, type: \"public-key\" },\n            { alg: -257, type: \"public-key\" }, // RS256 (for Windows Hello and others)\n        ],\n        timeout: options.timeout ?? 60000,\n        authenticatorSelection: {\n            userVerification: options.userVerification ?? \"required\",\n            authenticatorAttachment: await getAuthAttachment(options.authenticatorType ?? \"auto\"),\n            residentKey: options.discoverable ?? 'preferred',\n            requireResidentKey: (options.discoverable === 'required') // mainly for backwards compatibility, see https://www.w3.org/TR/webauthn/#dictionary-authenticatorSelection\n        },\n        attestation: \"direct\"\n    };\n    if (options.debug)\n        console.debug(creationOptions);\n    const credential = await navigator.credentials.create({ publicKey: creationOptions }); //PublicKeyCredential\n    if (options.debug)\n        console.debug(credential);\n    const response = credential.response; // AuthenticatorAttestationResponse\n    let registration = {\n        username: username,\n        credential: {\n            id: credential.id,\n            publicKey: utils.toBase64url(response.getPublicKey()),\n            algorithm: getAlgoName(credential.response.getPublicKeyAlgorithm())\n        },\n        authenticatorData: utils.toBase64url(response.getAuthenticatorData()),\n        clientData: utils.toBase64url(response.clientDataJSON),\n    };\n    if (options.attestation) {\n        registration.attestationData = utils.toBase64url(response.attestationObject);\n    }\n    return registration;\n}\nasync function getTransports(authType) {\n    const local = ['internal'];\n    // 'hybrid' was added mid-2022 in the specs and currently not yet available in the official dom types\n    // @ts-ignore\n    const roaming = ['hybrid', 'usb', 'ble', 'nfc'];\n    if (authType === \"local\")\n        return local;\n    if (authType == \"roaming\" || authType === \"extern\")\n        return roaming;\n    if (authType === \"both\")\n        return [...local, ...roaming];\n    // the default case: \"auto\", depending on device capabilities\n    try {\n        if (await isLocalAuthenticator())\n            return local;\n        else\n            return roaming;\n    }\n    catch (e) {\n        return [...local, ...roaming];\n    }\n}\n/**\n * Signs a challenge using one of the provided credentials IDs in order to authenticate the user.\n *\n * @param {string[]} credentialIds The list of credential IDs that can be used for signing.\n * @param {string} challenge A server-side randomly generated string, the base64 encoded version will be signed.\n * @param {Object} [options] Optional parameters.\n * @param {number} [options.timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\n * @param {'required'|'preferred'|'discouraged'} [options.userVerification='required'] Whether to prompt for biometric/PIN check or not.\n * @param {'optional'|'conditional'|'required'|'silent'} [options.mediation='optional'] https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get#mediation\n */\nexport async function authenticate(credentialIds, challenge, options) {\n    options = options ?? {};\n    if (!utils.isBase64url(challenge))\n        throw new Error('Provided challenge is not properly encoded in Base64url');\n    const transports = await getTransports(options.authenticatorType ?? \"auto\");\n    let authOptions = {\n        challenge: utils.parseBase64url(challenge),\n        rpId: options.domain ?? window.location.hostname,\n        allowCredentials: credentialIds.map(id => {\n            return {\n                id: utils.parseBase64url(id),\n                type: 'public-key',\n                transports: transports,\n            };\n        }),\n        userVerification: options.userVerification ?? \"required\",\n        timeout: options.timeout ?? 60000,\n    };\n    if (options.debug)\n        console.debug(authOptions);\n    let auth = await navigator.credentials.get({ publicKey: authOptions, mediation: options.mediation });\n    if (options.debug)\n        console.debug(auth);\n    const response = auth.response;\n    const authentication = {\n        credentialId: auth.id,\n        authenticatorData: utils.toBase64url(response.authenticatorData),\n        clientData: utils.toBase64url(response.clientDataJSON),\n        signature: utils.toBase64url(response.signature),\n        userHandle: response.userHandle ? utils.toBase64url(response.userHandle) : undefined // may not be returned by every authenticator\n    };\n    return authentication;\n}\n","/**\n * The source comes from\n * \"official\" https://mds.fidoalliance.org/\n * and the\n * \"community-driven\" https://github.com/passkeydeveloper/passkey-authenticator-aaguids\n * combined together.\n */\nexport const authenticatorMetadata = {\n    \"00000000-0000-0000-0000-000000000000\": \"Unknown authenticator\",\n    \"0076631b-d4a0-427f-5773-0ec71c9e0279\": \"HYPR FIDO2 Authenticator\",\n    \"07a9f89c-6407-4594-9d56-621d5f1e358b\": \"NXP Semiconductros FIDO2 Conformance Testing CTAP2 Authenticator\",\n    \"08987058-cadc-4b81-b6e1-30de50dcbe96\": \"Windows Hello\",\n    \"09591fc6-9811-48f7-8f57-b9f23df6413f\": \"Pone Biometrics OFFPAD Authenticator\",\n    \"0acf3011-bc60-f375-fb53-6f05f43154e0\": \"Nymi FIDO2 Authenticator\",\n    \"0bb43545-fd2c-4185-87dd-feb0b2916ace\": \"Security Key NFC by Yubico - Enterprise Edition\",\n    \"0d9b2e56-566b-c393-2940-f821b7f15d6d\": \"Excelsecu eSecu FIDO2 Pro Security Key\",\n    \"0ea242b4-43c4-4a1b-8b17-dd6d0b6baec6\": \"Keeper\",\n    \"1105e4ed-af1d-02ff-ffff-ffffffffffff\": \"Egomet FIDO2 Authenticator for Android\",\n    \"12ded745-4bed-47d4-abaa-e713f51d6393\": \"Feitian AllinOne FIDO2 Authenticator\",\n    \"149a2021-8ef6-4133-96b8-81f8d5b7f1f5\": \"Security Key by Yubico with NFC\",\n    \"17290f1e-c212-34d0-1423-365d729f09d9\": \"Thales PIN iOS SDK\",\n    \"175cd298-83d2-4a26-b637-313c07a6434e\": \"Chunghwa Telecom FIDO2 Smart Card Authenticator\",\n    \"1c086528-58d5-f211-823c-356786e36140\": \"Atos CardOS FIDO2\",\n    \"20f0be98-9af9-986a-4b42-8eca4acb28e4\": \"Excelsecu eSecu FIDO2 Fingerprint Security Key\",\n    \"2194b428-9397-4046-8f39-007a1605a482\": \"IDPrime 931 Fido\",\n    \"23786452-f02d-4344-87ed-aaf703726881\": \"SafeNet eToken Fusion CC\",\n    \"2c0df832-92de-4be1-8412-88a8f074df4a\": \"Feitian FIDO Smart Card\",\n    \"2d3bec26-15ee-4f5d-88b2-53622490270b\": \"HID Crescendo Key V2\",\n    \"2fc0579f-8113-47ea-b116-bb5a8db9202a\": \"YubiKey 5 Series with NFC\",\n    \"2ffd6452-01da-471f-821b-ea4bf6c8676a\": \"IDPrime 941 Fido\",\n    \"30b5035e-d297-4fc1-b00b-addc96ba6a97\": \"OneSpan FIDO Touch\",\n    \"30b5035e-d297-4ff1-b00b-addc96ba6a98\": \"OneSpan DIGIPASS FX1 BIO\",\n    \"341e4da9-3c2e-8103-5a9f-aad887135200\": \"Ledger Nano S FIDO2 Authenticator\",\n    \"34f5766d-1536-4a24-9033-0e294e510fb0\": \"YubiKey 5 Series CTAP2.1 Preview Expired \",\n    \"361a3082-0278-4583-a16f-72a527f973e4\": \"eWBM eFA500 FIDO2 Authenticator\",\n    \"3789da91-f943-46bc-95c3-50ea2012f03a\": \"NEOWAVE Winkeo FIDO2\",\n    \"39a5647e-1853-446c-a1f6-a79bae9f5bc7\": \"IDmelon\",\n    \"3b1adb99-0dfe-46fd-90b8-7f7614a4de2a\": \"GoTrust Idem Key FIDO2 Authenticator\",\n    \"3e078ffd-4c54-4586-8baa-a77da113aec5\": \"Hideez Key 3 FIDO2\",\n    \"3e22415d-7fdf-4ea4-8a0c-dd60c4249b9d\": \"Feitian iePass FIDO Authenticator\",\n    \"3f59672f-20aa-4afe-b6f4-7e5e916b6d98\": \"Arculus FIDO 2.1 Key Card [P71]\",\n    \"42b4fb4a-2866-43b2-9bf7-6c6669c2e5d3\": \"Google Titan Security Key v2\",\n    \"454e5346-4944-4ffd-6c93-8e9267193e9a\": \"Ensurity ThinC\",\n    \"4b3f8944-d4f2-4d21-bb19-764a986ec160\": \"KeyXentic FIDO2 Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"4c0cf95d-2f40-43b5-ba42-4c83a11c04ba\": \"Feitian BioPass FIDO2 Pro Authenticator\",\n    \"4c50ff10-1057-4fc6-b8ed-43a529530c3c\": \"ImproveID Authenticator\",\n    \"4d41190c-7beb-4a84-8018-adf265a6352d\": \"Thales IDPrime FIDO Bio\",\n    \"4e768f2c-5fab-48b3-b300-220eb487752b\": \"Hideez Key 4 FIDO2 SDK\",\n    \"504d7149-4e4c-3841-4555-55445a677357\": \"WiSECURE AuthTron USB FIDO2 Authenticator\",\n    \"50a45b0c-80e7-f944-bf29-f552bfa2e048\": \"ACS FIDO Authenticator\",\n    \"516d3969-5a57-5651-5958-4e7a49434167\": \"SmartDisplayer BobeePass FIDO2 Authenticator\",\n    \"531126d6-e717-415c-9320-3d9aa6981239\": \"Dashlane\",\n    \"53414d53-554e-4700-0000-000000000000\": \"Samsung Pass\",\n    \"5343502d-5343-5343-6172-644649444f32\": \"ESS Smart Card Inc. Authenticator\",\n    \"54d9fee8-e621-4291-8b18-7157b99c5bec\": \"HID Crescendo Enabled\",\n    \"5626bed4-e756-430b-a7ff-ca78c8b12738\": \"VALMIDO PRO FIDO\",\n    \"58b44d0b-0a7c-f33a-fd48-f7153c871352\": \"Ledger Nano S Plus FIDO2 Authenticator\",\n    \"5ca1ab1e-1337-fa57-f1d0-a117e71ca702\": \"Allthenticator App: roaming BLE FIDO2 Allthenticator for Windows, Mac, Linux, and Allthenticate door readers\",\n    \"5d629218-d3a5-11ed-afa1-0242ac120002\": \"Swissbit iShield Key Pro\",\n    \"5fdb81b8-53f0-4967-a881-f5ec26fe4d18\": \"VinCSS FIDO2 Authenticator\",\n    \"6002f033-3c07-ce3e-d0f7-0ffe5ed42543\": \"Excelsecu eSecu FIDO2 Fingerprint Key\",\n    \"6028b017-b1d4-4c02-b4b3-afcdafc96bb2\": \"Windows Hello\",\n    \"61250591-b2bc-4456-b719-0b17be90bb30\": \"eWBM eFPA FIDO2 Authenticator\",\n    \"664d9f67-84a2-412a-9ff7-b4f7d8ee6d05\": \"OpenSK authenticator\",\n    \"66a0ccb3-bd6a-191f-ee06-e375c50b9846\": \"Thales Bio iOS SDK\",\n    \"692db549-7ae5-44d5-a1e5-dd20a493b723\": \"HID Crescendo Key\",\n    \"69700f79-d1fb-472e-bd9b-a3a3b9a9eda0\": \"Pone Biometrics OFFPAD Authenticator\",\n    \"6d44ba9b-f6ec-2e49-b930-0c8fe920cb73\": \"Security Key by Yubico with NFC\",\n    \"73402251-f2a8-4f03-873e-3cb6db604b03\": \"uTrust FIDO2 Security Key\",\n    \"73bb0cd4-e502-49b8-9c6f-b59445bf720b\": \"YubiKey 5 FIPS Series\",\n    \"74820b05-a6c9-40f9-8fb0-9f86aca93998\": \"SafeNet eToken Fusion\",\n    \"77010bd7-212a-4fc9-b236-d2ca5e9d4084\": \"Feitian BioPass FIDO2 Authenticator\",\n    \"771b48fd-d3d4-4f74-9232-fc157ab0507a\": \"Edge on Mac\",\n    \"7e3f3d30-3557-4442-bdae-139312178b39\": \"RSA DS100\",\n    \"820d89ed-d65a-409e-85cb-f73f0578f82a\": \"IDmelon iOS Authenticator\",\n    \"833b721a-ff5f-4d00-bb2e-bdda3ec01e29\": \"Feitian ePass FIDO2 Authenticator\",\n    \"83c47309-aabb-4108-8470-8be838b573cb\": \"YubiKey Bio Series (Enterprise Profile)\",\n    \"85203421-48f9-4355-9bc8-8a53846e5083\": \"YubiKey 5 FIPS Series with Lightning\",\n    \"87dbc5a1-4c94-4dc8-8a47-97d800fd1f3c\": \"eWBM eFA320 FIDO2 Authenticator\",\n    \"8836336a-f590-0921-301d-46427531eee6\": \"Thales Bio Android SDK\",\n    \"8876631b-d4a0-427f-5773-0ec71c9e0279\": \"Solo Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"88bbd2f0-342a-42e7-9729-dd158be5407a\": \"Precision InnaIT Key FIDO 2 Level 2 certified\",\n    \"8976631b-d4a0-427f-5773-0ec71c9e0279\": \"Solo Tap Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"89b19028-256b-4025-8872-255358d950e4\": \"Sentry Enterprises CTAP2 Authenticator\",\n    \"8c97a730-3f7b-41a6-87d6-1e9b62bda6f0\": \"FT-JCOS FIDO Fingerprint Card\",\n    \"8d1b1fcb-3c76-49a9-9129-5515b346aa02\": \"IDEMIA ID-ONE Card\",\n    \"91ad6b93-264b-4987-8737-3a690cad6917\": \"Token Ring FIDO2 Authenticator\",\n    \"931327dd-c89b-406c-a81e-ed7058ef36c6\": \"Swissbit iShield Key FIDO2\",\n    \"95442b2e-f15e-4def-b270-efb106facb4e\": \"eWBM eFA310 FIDO2 Authenticator\",\n    \"95e4d58c-056e-4a65-866d-f5a69659e880\": \"TruU Windows Authenticator\",\n    \"973446ca-e21c-9a9b-99f5-9b985a67af0f\": \"ACS FIDO Authenticator Card\",\n    \"9876631b-d4a0-427f-5773-0ec71c9e0279\": \"Somu Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"998f358b-2dd2-4cbe-a43a-e8107438dfb3\": \"OnlyKey Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"99bf4610-ec26-4252-b31f-7380ccd59db5\": \"ZTPass Card\",\n    \"9c835346-796b-4c27-8898-d6032f515cc5\": \"Cryptnox FIDO2\",\n    \"9d3df6ba-282f-11ed-a261-0242ac120002\": \"Arculus FIDO2/U2F Key Card\",\n    \"9ddd1817-af5a-4672-a2b9-3e3dd95000a9\": \"Windows Hello\",\n    \"9f0d8150-baa5-4c00-9299-ad62c8bb4e87\": \"GoTrust Idem Card FIDO2 Authenticator\",\n    \"9f77e279-a6e2-4d58-b700-31e5943c6a98\": \"Hyper FIDO Pro\",\n    \"a1f52be5-dfab-4364-b51c-2bd496b14a56\": \"OCTATCO EzFinger2 FIDO2 AUTHENTICATOR\",\n    \"a3975549-b191-fd67-b8fb-017e2917fdb3\": \"Excelsecu eSecu FIDO2 NFC Security Key\",\n    \"a4e9fc6d-4cbe-4758-b8ba-37598bb5bbaa\": \"Security Key NFC by Yubico\",\n    \"ab32f0c6-2239-afbb-c470-d2ef4e254db6\": \"TEST (DUMMY RECORD)\",\n    \"ab32f0c6-2239-afbb-c470-d2ef4e254db7\": \"TOKEN2 FIDO2 Security Key\",\n    \"adce0002-35bc-c60a-648b-0b25f1f05503\": \"Chrome on Mac\",\n    \"aeb6569c-f8fb-4950-ac60-24ca2bbe2e52\": \"HID Crescendo C2300\",\n    \"b267239b-954f-4041-a01b-ee4f33c145b6\": \"authenton1 - CTAP2.1\",\n    \"b50d5e0a-7f81-4959-9b12-f45407407503\": \"IDPrime 3940 FIDO\",\n    \"b5397666-4885-aa6b-cebf-e52262a439a2\": \"Chromium Browser\",\n    \"b6ede29c-3772-412c-8a78-539c1f4c62d2\": \"Feitian BioPass FIDO2 Plus Authenticator\",\n    \"b84e4048-15dc-4dd0-8640-f4f60813c8af\": \"NordPass\",\n    \"b92c3f9a-c014-4056-887f-140a2501163b\": \"Security Key by Yubico\",\n    \"b93fd961-f2e6-462f-b122-82002247de78\": \"Android Authenticator with SafetyNet Attestation\",\n    \"ba76a271-6eb6-4171-874d-b6428dbe3437\": \"ATKey.ProS\",\n    \"ba86dc56-635f-4141-aef6-00227b1b9af6\": \"TruU Windows Authenticator\",\n    \"bada5566-a7aa-401f-bd96-45619a55120d\": \"1Password\",\n    \"bbf4b6a7-679d-f6fc-c4f2-8ac0ddf9015a\": \"Excelsecu eSecu FIDO2 PRO Security Key\",\n    \"bc2fe499-0d8e-4ffe-96f3-94a82840cf8c\": \"OCTATCO EzQuant FIDO2 AUTHENTICATOR\",\n    \"be727034-574a-f799-5c76-0929e0430973\": \"Crayonic KeyVault K1 (USB-NFC-BLE FIDO2 Authenticator)\",\n    \"c1f9a0bc-1dd2-404a-b27f-8e29047a43fd\": \"YubiKey 5 FIPS Series with NFC\",\n    \"c5703116-972b-4851-a3e7-ae1259843399\": \"NEOWAVE Badgeo FIDO2\",\n    \"c5ef55ff-ad9a-4b9f-b580-adebafe026d0\": \"YubiKey 5 Series with Lightning\",\n    \"c80dbd9a-533f-4a17-b941-1a2f1c7cedff\": \"HID Crescendo C3000\",\n    \"ca4cff1b-5a81-4404-8194-59aabcf1660b\": \"IDPrime 3930 FIDO\",\n    \"ca87cb70-4c1b-4579-a8e8-4efdd7c007e0\": \"FIDO Alliance TruU Sample FIDO2 Authenticator\",\n    \"cb69481e-8ff7-4039-93ec-0a2729a154a8\": \"YubiKey 5 Series\",\n    \"cd69adb5-3c7a-deb9-3177-6800ea6cb72a\": \"Thales PIN Android SDK\",\n    \"cdbdaea2-c415-5073-50f7-c04e968640b6\": \"Excelsecu eSecu FIDO2 Security Key\",\n    \"cfcb13a2-244f-4b36-9077-82b79d6a7de7\": \"USB/NFC Passcode Authenticator\",\n    \"d384db22-4d50-ebde-2eac-5765cf1e2a44\": \"Excelsecu eSecu FIDO2 Fingerprint Security Key\",\n    \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\": \"ATKey.Card CTAP2.0\",\n    \"d548826e-79b4-db40-a3d8-11116f7e8349\": \"Bitwarden\",\n    \"d61d3b87-3e7c-4aea-9c50-441c371903ad\": \"KeyVault Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"d7a423ad-3e19-4492-9200-78137dccc136\": \"VivoKey Apex FIDO2\",\n    \"d821a7d4-e97c-4cb6-bd82-4237731fd4be\": \"Hyper FIDO Bio Security Key\",\n    \"d8522d9f-575b-4866-88a9-ba99fa02f35b\": \"YubiKey Bio Series\",\n    \"d91c5288-0ef0-49b7-b8ae-21ca0aa6b3f3\": \"KEY-ID FIDO2 Authenticator\",\n    \"d94a29d9-52dd-4247-9c2d-8b818b610389\": \"VeriMark Guard Fingerprint Key\",\n    \"da1fa263-8b25-42b6-a820-c0036f21ba7f\": \"ATKey.Card NFC\",\n    \"dd4ec289-e01d-41c9-bb89-70fa845d4bf2\": \"iCloud Keychain (Managed)\",\n    \"e1a96183-5016-4f24-b55b-e3ae23614cc6\": \"ATKey.Pro CTAP2.0\",\n    \"e416201b-afeb-41ca-a03d-2281c28322aa\": \"ATKey.Pro CTAP2.1\",\n    \"e86addcd-7711-47e5-b42a-c18257b0bf61\": \"IDCore 3121 Fido\",\n    \"ea9b8d66-4d01-1d21-3ce4-b6b48cb575d4\": \"Google Password Manager\",\n    \"eabb46cc-e241-80bf-ae9e-96fa6d2975cf\": \"TOKEN2 PIN Plus Security Key Series \",\n    \"eb3b131e-59dc-536a-d176-cb7306da10f5\": \"ellipticSecure MIRkey USB Authenticator\",\n    \"ec31b4cc-2acc-4b8e-9c01-bade00ccbe26\": \"KeyXentic FIDO2 Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"ee041bce-25e5-4cdb-8f86-897fd6418464\": \"Feitian ePass FIDO2-NFC Authenticator\",\n    \"ee882879-721c-4913-9775-3dfcce97072a\": \"YubiKey 5 Series\",\n    \"efb96b10-a9ee-4b6c-a4a9-d32125ccd4a4\": \"Safenet eToken FIDO\",\n    \"f3809540-7f14-49c1-a8b3-8f813b225541\": \"Enpass\",\n    \"f4c63eff-d26c-4248-801c-3736c7eaa93a\": \"FIDO KeyPass S3\",\n    \"f7c558a0-f465-11e8-b568-0800200c9a66\": \"KONAI Secp256R1 FIDO2 Conformance Testing CTAP2 Authenticator\",\n    \"f8a011f3-8c0a-4d15-8006-17111f9edc7d\": \"Security Key by Yubico\",\n    \"fa2b99dc-9e39-4257-8f92-4a30d23c4118\": \"YubiKey 5 Series with NFC\",\n    \"fbefdf68-fe86-0106-213e-4d5fa24cbe2e\": \"Excelsecu eSecu FIDO2 NFC Security Key\",\n    \"fbfc3007-154e-4ecc-8c0b-6e020557d7bd\": \"iCloud Keychain\",\n    \"fcb1bcb4-f370-078c-6993-bc24d0ae3fbe\": \"Ledger Nano X FIDO2 Authenticator\",\n    \"fec067a1-f1d0-4c5e-b4c0-cc3237475461\": \"KX701 SmartToken FIDO\",\n};\n","import { authenticatorMetadata } from './authenticatorMetadata.js';\nimport * as utils from './utils.js';\nexport function parseAuthBuffer(authData) {\n    //console.debug(authData)\n    let flags = new DataView(authData.slice(32, 33)).getUint8(0);\n    //console.debug(flags)\n    // https://w3c.github.io/webauthn/#sctn-authenticator-data\n    let parsed = {\n        rpIdHash: utils.toBase64url(authData.slice(0, 32)),\n        flags: {\n            userPresent: !!(flags & 1),\n            //reserved1: !!(flags & 2),\n            userVerified: !!(flags & 4),\n            backupEligibility: !!(flags & 8),\n            backupState: !!(flags & 16),\n            //reserved2: !!(flags & 32),\n            attestedData: !!(flags & 64),\n            extensionsIncluded: !!(flags & 128)\n        },\n        counter: new DataView(authData.slice(33, 37)).getUint32(0, false), // Big-Endian!\n    };\n    // this is more descriptive than \"backupState\"\n    parsed.synced = parsed.flags.backupState;\n    if (authData.byteLength > 37) {\n        // registration contains additional data\n        const aaguid = extractAaguid(authData); // bytes 37->53\n        // https://w3c.github.io/webauthn/#attested-credential-data\n        parsed = {\n            ...parsed,\n            aaguid,\n            name: authenticatorMetadata[aaguid] ?? 'Unknown',\n            icon_light: 'https://webauthn.passwordless.id/authenticators/' + aaguid + '-light.png',\n            icon_dark: 'https://webauthn.passwordless.id/authenticators/' + aaguid + '-dark.png',\n        };\n    }\n    return parsed;\n}\nexport function extractAaguid(authData) {\n    return formatAaguid(authData.slice(37, 53)); // 16 bytes\n}\nfunction formatAaguid(buffer) {\n    let aaguid = utils.bufferToHex(buffer);\n    aaguid = aaguid.substring(0, 8) + '-' + aaguid.substring(8, 12) + '-' + aaguid.substring(12, 16) + '-' + aaguid.substring(16, 20) + '-' + aaguid.substring(20, 32);\n    return aaguid; // example: \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\"\n}\n/**\n * Kept for compatibility purposes.\n * @deprecated\n */\nexport function resolveAuthenticatorName(aaguid) {\n    const aaguidMetadata = updatedAuthenticatorMetadata ?? authenticatorMetadata; //await getAaguidMetadata()\n    return aaguidMetadata[aaguid];\n}\nlet updatedAuthenticatorMetadata = null;\n/**\n * Updates the built-in metadata according to raw data available at https://mds.fidoalliance.org/\n * This service delivers a list of AAGUIDs encoded as a JWT.\n * Kept for compatibility purposes.\n * @deprecated\n */\nexport async function updateDevicesMetadata() {\n    // this function is rather resource intensive and time consuming\n    // therefore, the result is cached in local storage\n    const jwt = await (await fetch(\"https://mds.fidoalliance.org\")).text();\n    // the response is a JWT including all AAGUIDs and their metadata\n    console.debug(jwt);\n    // let us ignore the JWT verification, since this is solely for descriptive purposes, not signed data\n    const payload = jwt.split('.')[1].replaceAll('-', '+').replaceAll('_', '/');\n    const json = JSON.parse(atob(payload));\n    console.debug(json);\n    let aaguidMetadata = {};\n    for (const e of json.entries) {\n        if (!e.aaguid || !e.metadataStatement)\n            continue;\n        aaguidMetadata[e.aaguid] = e.metadataStatement.description;\n    }\n    console.debug(aaguidMetadata);\n    updatedAuthenticatorMetadata = aaguidMetadata;\n}\n","import * as authenticators from './authenticators.js';\nimport * as utils from './utils.js';\nconst utf8Decoder = new TextDecoder('utf-8');\nexport function parseClient(data) {\n    if (typeof data == 'string')\n        data = utils.parseBase64url(data);\n    return JSON.parse(utf8Decoder.decode(data));\n}\nexport function parseAuthenticator(data) {\n    if (typeof data == 'string')\n        data = utils.parseBase64url(data);\n    return authenticators.parseAuthBuffer(data);\n}\nexport function parseAttestation(data) {\n    //if(typeof data == 'string')\n    //    data = utils.parseBase64url(data)\n    // Useless comment, let's at least provide the raw value \n    // return \"The device attestation proves the authenticity of the device model / aaguid. It's not guaranteed to be included and really complex to parse / verify. Good luck with that one!\"\n    return data;\n}\nexport function parseRegistration(registration) {\n    return {\n        username: registration.username,\n        credential: registration.credential,\n        client: parseClient(registration.clientData),\n        authenticator: parseAuthenticator(registration.authenticatorData),\n        attestation: registration.attestationData ? parseAttestation(registration.attestationData) : null\n    };\n}\nexport function parseAuthentication(authentication) {\n    return {\n        credentialId: authentication.credentialId,\n        client: parseClient(authentication.clientData),\n        authenticator: parseAuthenticator(authentication.authenticatorData),\n        signature: authentication.signature\n    };\n}\n","import { parseAuthentication, parseRegistration } from \"./parsers.js\";\nimport * as utils from './utils.js';\nasync function isValid(validator, value) {\n    if (typeof validator === 'function') {\n        const res = validator(value);\n        if (res instanceof Promise)\n            return await res;\n        else\n            return res;\n    }\n    // the validator can be a single value too\n    return validator === value;\n}\nasync function isNotValid(validator, value) {\n    return !(await isValid(validator, value));\n}\nexport async function verifyRegistration(registrationRaw, expected) {\n    const registration = parseRegistration(registrationRaw);\n    if (registration.client.type !== \"webauthn.create\")\n        throw new Error(`Unexpected ClientData type: ${registration.client.type}`);\n    if (await isNotValid(expected.origin, registration.client.origin))\n        throw new Error(`Unexpected ClientData origin: ${registration.client.origin}`);\n    if (await isNotValid(expected.challenge, registration.client.challenge))\n        throw new Error(`Unexpected ClientData challenge: ${registration.client.challenge}`);\n    return registration;\n}\nexport async function verifyAuthentication(authenticationRaw, credential, expected) {\n    if (authenticationRaw.credentialId !== credential.id)\n        throw new Error(`Credential ID mismatch: ${authenticationRaw.credentialId} vs ${credential.id}`);\n    const isValidSignature = await verifySignature({\n        algorithm: credential.algorithm,\n        publicKey: credential.publicKey,\n        authenticatorData: authenticationRaw.authenticatorData,\n        clientData: authenticationRaw.clientData,\n        signature: authenticationRaw.signature,\n        verbose: expected.verbose\n    });\n    if (!isValidSignature)\n        throw new Error(`Invalid signature: ${authenticationRaw.signature}`);\n    const authentication = parseAuthentication(authenticationRaw);\n    if (expected.verbose)\n        console.debug(authentication);\n    if (authentication.client.type !== \"webauthn.get\")\n        throw new Error(`Unexpected clientData type: ${authentication.client.type}`);\n    if (await isNotValid(expected.origin, authentication.client.origin))\n        throw new Error(`Unexpected ClientData origin: ${authentication.client.origin}`);\n    if (await isNotValid(expected.challenge, authentication.client.challenge))\n        throw new Error(`Unexpected ClientData challenge: ${authentication.client.challenge}`);\n    // this only works because we consider `rp.origin` and `rp.id` to be the same during authentication/registration\n    const rpId = expected.domain ?? new URL(authentication.client.origin).hostname;\n    const expectedRpIdHash = utils.toBase64url(await utils.sha256(utils.toBuffer(rpId)));\n    if (authentication.authenticator.rpIdHash !== expectedRpIdHash)\n        throw new Error(`Unexpected RpIdHash: ${authentication.authenticator.rpIdHash} vs ${expectedRpIdHash}`);\n    if (!authentication.authenticator.flags.userPresent)\n        throw new Error(`Unexpected authenticator flags: missing userPresent`);\n    if (!authentication.authenticator.flags.userVerified && expected.userVerified)\n        throw new Error(`Unexpected authenticator flags: missing userVerified`);\n    if (expected.counter && authentication.authenticator.counter <= expected.counter)\n        throw new Error(`Unexpected authenticator counter: ${authentication.authenticator.counter} (should be > ${expected.counter})`);\n    return authentication;\n}\n// https://w3c.github.io/webauthn/#sctn-public-key-easy\n// https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n/*\nUser agents MUST be able to return a non-null value for getPublicKey() when the credential public key has a COSEAlgorithmIdentifier value of:\n\n-7 (ES256), where kty is 2 (with uncompressed points) and crv is 1 (P-256).\n\n-257 (RS256).\n\n-8 (EdDSA), where crv is 6 (Ed25519).\n*/\nfunction getAlgoParams(algorithm) {\n    switch (algorithm) {\n        case 'RS256':\n            return {\n                name: 'RSASSA-PKCS1-v1_5',\n                hash: 'SHA-256'\n            };\n        case 'ES256':\n            return {\n                name: 'ECDSA',\n                namedCurve: 'P-256',\n                hash: 'SHA-256',\n            };\n        // case 'EdDSA': Not supported by browsers\n        default:\n            throw new Error(`Unknown or unsupported crypto algorithm: ${algorithm}. Only 'RS256' and 'ES256' are supported.`);\n    }\n}\nasync function parseCryptoKey(algoParams, publicKey) {\n    const buffer = utils.parseBase64url(publicKey);\n    return crypto.subtle.importKey('spki', buffer, algoParams, false, ['verify']);\n}\n// https://w3c.github.io/webauthn/#sctn-verifying-assertion\n// https://w3c.github.io/webauthn/#sctn-signature-attestation-types\n/* Emphasis mine:\n\n6.5.6. Signature Formats for Packed Attestation, FIDO U2F Attestation, and **Assertion Signatures**\n\n[...] For COSEAlgorithmIdentifier -7 (ES256) [...] the sig value MUST be encoded as an ASN.1 [...]\n[...] For COSEAlgorithmIdentifier -257 (RS256) [...] The signature is not ASN.1 wrapped.\n[...] For COSEAlgorithmIdentifier -37 (PS256) [...] The signature is not ASN.1 wrapped.\n*/\n// see also https://gist.github.com/philholden/50120652bfe0498958fd5926694ba354\nexport async function verifySignature({ algorithm, publicKey, authenticatorData, clientData, signature, verbose }) {\n    const algoParams = getAlgoParams(algorithm);\n    let cryptoKey = await parseCryptoKey(algoParams, publicKey);\n    if (verbose) {\n        console.debug(cryptoKey);\n    }\n    let clientHash = await utils.sha256(utils.parseBase64url(clientData));\n    // during \"login\", the authenticatorData is exactly 37 bytes\n    let comboBuffer = utils.concatenateBuffers(utils.parseBase64url(authenticatorData), clientHash);\n    if (verbose) {\n        console.debug('Crypto Algo: ' + JSON.stringify(algoParams));\n        console.debug('Public key: ' + publicKey);\n        console.debug('Data: ' + utils.toBase64url(comboBuffer));\n        console.debug('Signature: ' + signature);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify\n    let signatureBuffer = utils.parseBase64url(signature);\n    if (algorithm == 'ES256')\n        signatureBuffer = convertASN1toRaw(signatureBuffer);\n    const isValid = await crypto.subtle.verify(algoParams, cryptoKey, signatureBuffer, comboBuffer);\n    return isValid;\n}\nfunction convertASN1toRaw(signatureBuffer) {\n    // Convert signature from ASN.1 sequence to \"raw\" format\n    const usignature = new Uint8Array(signatureBuffer);\n    const rStart = usignature[4] === 0 ? 5 : 4;\n    const rEnd = rStart + 32;\n    const sStart = usignature[rEnd + 2] === 0 ? rEnd + 3 : rEnd + 2;\n    const r = usignature.slice(rStart, rEnd);\n    const s = usignature.slice(sStart);\n    return new Uint8Array([...r, ...s]);\n}\n","import { client } from \"@passwordless-id/webauthn\";\nimport type { AuthType } from \"@passwordless-id/webauthn/dist/esm/types.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../../utils/fetch.js\";\nimport type { AuthStoredTokenWithCookieReturnType } from \"../../../core/authentication/type.js\";\nimport { LocalStorage } from \"../../utils/Storage/LocalStorage.js\";\n\nfunction getVerificationPath() {\n  return `${getThirdwebBaseUrl(\n    \"inAppWallet\",\n  )}/api/2024-05-05/login/passkey/callback`;\n}\nfunction getChallengePath(type: \"sign-in\" | \"sign-up\", username?: string) {\n  return `${getThirdwebBaseUrl(\n    \"inAppWallet\",\n  )}/api/2024-05-05/login/passkey?type=${type}${\n    username ? `&username=${username}` : \"\"\n  }`;\n}\n\nexport async function registerPasskey(options: {\n  client: ThirdwebClient;\n  authenticatorType?: AuthType;\n  username?: string;\n}): Promise<AuthStoredTokenWithCookieReturnType> {\n  if (!client.isAvailable()) {\n    throw new Error(\"Passkeys are not available on this device\");\n  }\n  // TODO inject this\n  const storage = new LocalStorage({ clientId: options.client.clientId });\n  const fetchWithId = getClientFetch(options.client);\n  const generatedName = options.username ?? generateUsername();\n  // 1. request challenge from  server\n  const res = await fetchWithId(getChallengePath(\"sign-up\", generatedName));\n  const challengeData = await res.json();\n  if (!challengeData.challenge) {\n    throw new Error(\"No challenge received\");\n  }\n  const challenge = challengeData.challenge;\n  // 2. initiate registration\n  const registration = await client.register(generatedName, challenge, {\n    authenticatorType: options.authenticatorType ?? \"auto\",\n    userVerification: \"required\",\n    attestation: true,\n    debug: false,\n  });\n  // 3. store the credentialId in local storage\n  await storage.savePasskeyCredentialId(registration.credential.id);\n\n  // 4. send the registration object to the server\n  const verifRes = await fetchWithId(getVerificationPath(), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      type: \"sign-up\",\n      authenticatorData: registration.authenticatorData,\n      credentialId: registration.credential.id,\n      serverVerificationId: challengeData.serverVerificationId,\n      clientData: registration.clientData,\n      username: generatedName,\n      credential: {\n        publicKey: registration.credential.publicKey,\n        algorithm: registration.credential.algorithm,\n      },\n    }),\n  });\n  const verifData = await verifRes.json();\n\n  if (!verifData) {\n    throw new Error(\"No token received\");\n  }\n  // 5. returns back the IAW authentication token\n  return verifData;\n}\n\nexport async function loginWithPasskey(options: {\n  client: ThirdwebClient;\n  authenticatorType?: AuthType;\n}): Promise<AuthStoredTokenWithCookieReturnType> {\n  if (!client.isAvailable()) {\n    throw new Error(\"Passkeys are not available on this device\");\n  }\n  // TODO inject this\n  const storage = new LocalStorage({ clientId: options.client.clientId });\n  const fetchWithId = getClientFetch(options.client);\n  // 1. request challenge from  server/iframe\n  const res = await fetchWithId(getChallengePath(\"sign-in\"));\n  const challengeData = await res.json();\n  if (!challengeData.challenge) {\n    throw new Error(\"No challenge received\");\n  }\n  const challenge = challengeData.challenge;\n  // 1.2. find the user's credentialId in local storage\n  const credentialId = await storage.getPasskeyCredentialId();\n  const credentials = credentialId ? [credentialId] : [];\n  // 2. initiate login\n  const authentication = await client.authenticate(credentials, challenge, {\n    authenticatorType: options.authenticatorType ?? \"auto\",\n    userVerification: \"required\",\n  });\n  // 3. send the authentication object to the server/iframe\n  const verifRes = await fetchWithId(getVerificationPath(), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      type: \"sign-in\",\n      authenticatorData: authentication.authenticatorData,\n      credentialId: authentication.credentialId,\n      serverVerificationId: challengeData.serverVerificationId,\n      clientData: authentication.clientData,\n      signature: authentication.signature,\n    }),\n  });\n  // 5. store the credentialId in local storage\n  await storage.savePasskeyCredentialId(authentication.credentialId);\n\n  const verifData = await verifRes.json();\n\n  if (!verifData) {\n    throw new Error(\"No token received\");\n  }\n  // 6. return the auth'd user type\n  return verifData;\n}\n\n/**\n * Returns whether this device has a stored passkey ready to be used for sign-in\n * @param client - the thirdweb client\n * @returns whether the device has a stored passkey\n * @wallet\n */\nexport async function hasStoredPasskey(client: ThirdwebClient) {\n  const storage = new LocalStorage({ clientId: client.clientId });\n  const credId = await storage.getPasskeyCredentialId();\n  return !!credId;\n}\n\nfunction generateUsername() {\n  return `wallet-${new Date().toISOString()}`;\n}\n","import {\n  AUTH_TOKEN_LOCAL_STORAGE_NAME,\n  DEVICE_SHARE_LOCAL_STORAGE_NAME,\n  PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME,\n  WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME,\n  WALLET_USER_ID_LOCAL_STORAGE_NAME,\n} from \"../../../core/constants/settings.js\";\n\nconst data = new Map<string, string>();\n\n/**\n * @internal\n */\nexport class LocalStorage {\n  protected isSupported: boolean;\n  protected clientId: string;\n  /**\n   * @internal\n   */\n  constructor({ clientId }: { clientId: string }) {\n    this.isSupported = typeof window !== \"undefined\" && !!window.localStorage;\n    this.clientId = clientId;\n  }\n\n  protected async getItem(key: string): Promise<string | null> {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    }\n    return data.get(key) ?? null;\n  }\n\n  protected async setItem(key: string, value: string): Promise<void> {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    }\n    data.set(key, value);\n  }\n\n  protected async removeItem(key: string): Promise<boolean> {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  async getWalletConnectSessions(): Promise<string | null> {\n    return this.getItem(\n      WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME(this.clientId),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  async saveWalletConnectSessions(stringifiedSessions: string): Promise<void> {\n    await this.setItem(\n      WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME(this.clientId),\n      stringifiedSessions,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  async savePasskeyCredentialId(id: string): Promise<void> {\n    await this.setItem(\n      PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME(this.clientId),\n      id,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  async getPasskeyCredentialId(): Promise<string | null> {\n    return this.getItem(\n      PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME(this.clientId),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  async saveAuthCookie(cookie: string): Promise<void> {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  /**\n   * @internal\n   */\n  async getAuthCookie(): Promise<string | null> {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  /**\n   * @internal\n   */\n  async removeAuthCookie(): Promise<boolean> {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n\n  /**\n   * @internal\n   */\n  async saveDeviceShare(share: string, userId: string): Promise<void> {\n    await this.saveWalletUserId(userId);\n    await this.setItem(\n      DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      share,\n    );\n  }\n  /**\n   * @internal\n   */\n  async getDeviceShare(): Promise<string | null> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return null;\n  }\n  /**\n   * @internal\n   */\n  async removeDeviceShare(): Promise<boolean> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  async getWalletUserId(): Promise<string | null> {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  /**\n   * @internal\n   */\n  async saveWalletUserId(userId: string): Promise<void> {\n    await this.setItem(\n      WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId),\n      userId,\n    );\n  }\n  /**\n   * @internal\n   */\n  async removeWalletUserId(): Promise<boolean> {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n"],"names":["IN_APP_WALLET_PATH","WALLET_USER_ID_LOCAL_STORAGE_NAME","clientId","concat","AUTH_TOKEN_LOCAL_STORAGE_NAME","PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME","DEVICE_SHARE_LOCAL_STORAGE_NAME","userId","WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME","randomChallenge","crypto","randomUUID","toBuffer","txt","Uint8Array","from","c","charCodeAt","buffer","parseBuffer","String","fromCharCode","isBase64url","match","toBase64url","btoa","replaceAll","parseBase64url","atob","async","sha256","subtle","digest","bufferToHex","map","b","toString","padStart","join","concatenateBuffers","buffer1","buffer2","tmp","byteLength","set","isAvailable","window","PublicKeyCredential","isLocalAuthenticator","isUserVerifyingPlatformAuthenticatorAvailable","getAuthAttachment","authType","e","getAlgoName","num","Error","register","username","challenge","options","_options","_options$domain","_options$domain2","_options$timeout","_options$userVerifica","_options$authenticato","_options$discoverable","utils","creationOptions","rp","id","domain","location","hostname","name","user","userHandle","TextEncoder","encode","displayName","pubKeyCredParams","alg","type","timeout","authenticatorSelection","userVerification","authenticatorAttachment","authenticatorType","residentKey","discoverable","requireResidentKey","attestation","debug","console","credential","navigator","credentials","create","publicKey","response","registration","getPublicKey","algorithm","getPublicKeyAlgorithm","authenticatorData","getAuthenticatorData","clientData","clientDataJSON","attestationData","attestationObject","authenticate","credentialIds","_options2","_options$authenticato2","_options$domain3","_options$userVerifica2","_options$timeout2","transports","local","roaming","getTransports","authOptions","rpId","allowCredentials","auth","get","mediation","credentialId","signature","undefined","authenticatorMetadata","parseAuthBuffer","authData","flags","DataView","slice","getUint8","parsed","rpIdHash","userPresent","userVerified","backupEligibility","backupState","attestedData","extensionsIncluded","counter","getUint32","synced","_authenticatorMetadat","aaguid","substring","formatAaguid","extractAaguid","icon_light","icon_dark","utf8Decoder","TextDecoder","parseClient","data","JSON","parse","decode","parseAuthenticator","authenticators","parseAttestation","parseRegistration","client","authenticator","parseAuthentication","authentication","isNotValid","validator","value","res","Promise","isValid","verifyRegistration","registrationRaw","expected","origin","verifyAuthentication","authenticationRaw","_expected$domain","verifySignature","verbose","URL","expectedRpIdHash","_ref","algoParams","hash","namedCurve","getAlgoParams","cryptoKey","importKey","parseCryptoKey","clientHash","comboBuffer","stringify","signatureBuffer","usignature","rStart","rEnd","sStart","r","s","convertASN1toRaw","verify","getVerificationPath","getThirdwebBaseUrl","getChallengePath","registerPasskey","_options$username","storage","LocalStorage","fetchWithId","getClientFetch","generatedName","Date","toISOString","challengeData","json","savePasskeyCredentialId","verifRes","method","headers","body","serverVerificationId","verifData","loginWithPasskey","getPasskeyCredentialId","hasStoredPasskey","Map","constructor","Object","defineProperty","this","isSupported","localStorage","getItem","key","_data$get","setItem","removeItem","item","getWalletConnectSessions","saveWalletConnectSessions","stringifiedSessions","saveAuthCookie","cookie","getAuthCookie","removeAuthCookie","saveDeviceShare","share","saveWalletUserId","getDeviceShare","getWalletUserId","removeDeviceShare","removeWalletUserId"],"sourceRoot":""}