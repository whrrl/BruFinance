{"version":3,"file":"static/js/40663.8c7e01bb.chunk.js","mappings":"0LAqEA,QAxDA,SAAoCA,GAQlC,MAAM,OAAEC,EAAM,KAAEC,EAAI,OAAEC,EAAM,WAAEC,EAAU,aAAEC,EAAY,OAAEC,GAAWN,GAC5DO,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,IACjD,OAAEC,EAAM,MAAEC,IAAUC,EAAAA,EAAAA,KAEpBC,GAAUC,EAAAA,EAAAA,cAAY,KAC1BN,GAAmB,GACnBL,EACGU,QAAQ,CACPH,SACAC,UAEDI,MAAK,KACJb,GAAM,IAEPc,OAAOC,IACNC,QAAQC,MAAMF,GACdT,GAAmB,EAAK,GACxB,GACH,CAACE,EAAQP,EAAQQ,EAAOT,IAErBkB,GAAcC,EAAAA,EAAAA,SAAO,GAS3B,OARAC,EAAAA,EAAAA,YAAU,KACJF,EAAYG,UAGhBH,EAAYG,SAAU,EACtBV,IAAS,GACR,CAACA,KAGFW,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CACfnB,OAAQ,CACNoB,eAAgBpB,EAAOoB,eACvBC,YAAarB,EAAOsB,iBAAiBD,YACrCE,SAAUvB,EAAOsB,iBAAiBE,MAClCC,WAAYzB,EAAOsB,iBAAiBG,WACpCC,OAAQ1B,EAAOsB,iBAAiBI,QAElC/B,OAAQA,EACRgC,WAAY7B,EAAW8B,KACvBC,SAAUhC,EAAOiC,GACjB7B,gBAAiBA,EACjB8B,QAASxB,EACTR,aAAcA,GAGpB,C","sources":["../node_modules/thirdweb/src/react/web/wallets/shared/CoinbaseSDKConnection.tsx"],"sourcesContent":["import type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { WalletInfo } from \"../../../../wallets/wallet-info.js\";\nimport { useConnectUI } from \"../../../core/hooks/others/useWalletConnectionCtx.js\";\n\nimport type { InjectedWalletLocale } from \"../injected/locale/types.js\";\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport type { COINBASE } from \"../../../../wallets/constants.js\";\nimport { ConnectingScreen } from \"./ConnectingScreen.js\";\n\n/**\n * @internal\n */\nfunction CoinbaseSDKWalletConnectUI(props: {\n  onBack?: () => void;\n  onGetStarted: () => void;\n  done: () => void;\n  locale: InjectedWalletLocale;\n  wallet: Wallet<typeof COINBASE>;\n  walletInfo: WalletInfo;\n}) {\n  const { onBack, done, wallet, walletInfo, onGetStarted, locale } = props;\n  const [errorConnecting, setErrorConnecting] = useState(false);\n  const { client, chain } = useConnectUI();\n\n  const connect = useCallback(() => {\n    setErrorConnecting(false);\n    wallet\n      .connect({\n        client,\n        chain,\n      })\n      .then(() => {\n        done();\n      })\n      .catch((e) => {\n        console.error(e);\n        setErrorConnecting(true);\n      });\n  }, [client, wallet, chain, done]);\n\n  const scanStarted = useRef(false);\n  useEffect(() => {\n    if (scanStarted.current) {\n      return;\n    }\n    scanStarted.current = true;\n    connect();\n  }, [connect]);\n\n  return (\n    <ConnectingScreen\n      locale={{\n        getStartedLink: locale.getStartedLink,\n        instruction: locale.connectionScreen.instruction,\n        tryAgain: locale.connectionScreen.retry,\n        inProgress: locale.connectionScreen.inProgress,\n        failed: locale.connectionScreen.failed,\n      }}\n      onBack={onBack}\n      walletName={walletInfo.name}\n      walletId={wallet.id}\n      errorConnecting={errorConnecting}\n      onRetry={connect}\n      onGetStarted={onGetStarted}\n    />\n  );\n}\n\nexport default CoinbaseSDKWalletConnectUI;\n"],"names":["props","onBack","done","wallet","walletInfo","onGetStarted","locale","errorConnecting","setErrorConnecting","useState","client","chain","useConnectUI","connect","useCallback","then","catch","e","console","error","scanStarted","useRef","useEffect","current","_jsx","ConnectingScreen","getStartedLink","instruction","connectionScreen","tryAgain","retry","inProgress","failed","walletName","name","walletId","id","onRetry"],"sourceRoot":""}