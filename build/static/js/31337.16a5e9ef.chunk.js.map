{"version":3,"file":"static/js/31337.16a5e9ef.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/pay/buyWithFiat/isSwapRequiredPostOnramp.ts","../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithFiatQuote.ts","../node_modules/thirdweb/src/pay/buyWithFiat/getQuote.ts","../node_modules/thirdweb/src/react/web/ui/components/Drawer.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/EstimatedTimeAndFees.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/PayWIthCreditCard.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/PaymentSelection.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/openOnRamppopup.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/FiatStatusScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/FiatFlow.tsx","../node_modules/thirdweb/src/chains/chain-definitions/polygon.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/BuyTokenInput.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/PayWithCrypto.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/BuyScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useUISelectionStates.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useBuyTxStates.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useEnabledPaymentMethods.ts","../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithCryptoQuote.ts"],"sourcesContent":["import { getAddress } from \"../../utils/address.js\";\nimport type { BuyWithFiatQuote } from \"./getQuote.js\";\n\n/**\n * Check if a Swap is required after on-ramp when buying a token with fiat currency.\n *\n * If `quote.toToken` and `quote.onRampToken` are the same (same token and chain),\n * it means on-ramp provider can directly send the desired token to the user's wallet and no swap is required.\n *\n * If `quote.toToken` and `quote.onRampToken` are different (different token or chain), A swap is required to swap the on-ramp token to the desired token.\n *\n * @param buyWithFiatQuote - The quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) returned\n * by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * @buyCrypto\n */\nexport function isSwapRequiredPostOnramp(\n  buyWithFiatQuote: Pick<BuyWithFiatQuote, \"toToken\" | \"onRampToken\">,\n) {\n  const sameChain =\n    buyWithFiatQuote.toToken.chainId ===\n    buyWithFiatQuote.onRampToken.token.chainId;\n\n  const sameToken =\n    getAddress(buyWithFiatQuote.toToken.tokenAddress) ===\n    getAddress(buyWithFiatQuote.onRampToken.token.tokenAddress);\n\n  return !(sameChain && sameToken);\n}\n","import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithFiatQuote,\n  type GetBuyWithFiatQuoteParams,\n  getBuyWithFiatQuote,\n} from \"../../../../pay/buyWithFiat/getQuote.js\";\n\n/**\n * @internal\n */\nexport type BuyWithFiatQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithFiatQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get a price quote for performing a \"Buy with Fiat\" transaction that allows users to buy a token with fiat currency.\n *\n * The price quote is an object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * You can also use that function directly\n *\n * Once you have the `quote`, you can open a new window with `quote.onRampLink` to allow the user to buy the token with fiat currency.\n * and [`useBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithFiatStatus) function to start polling for the status of this transaction.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote)\n * @example\n * ```ts\n * import { NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n * import { base } from \"thirdweb/chains\";\n * import { useBuyWithFiatQuote } from \"thirdweb/react\";\n *\n * // get a quote for buying 0.01 base native token with USD fiat currency\n * function Example() {\n *   const quote = useBuyWithFiatQuote({\n *     client: client, // thirdweb client\n *     fromCurrencySymbol: \"USD\", // fiat currency symbol\n *     toChainId: base.id, // base chain id\n *     toAmount: \"0.01\", // amount of token to buy\n *     toTokenAddress: NATIVE_TOKEN_ADDRESS, // native token\n *     toAddress: \"0x...\", // user's wallet address\n *   });\n *\n *   return (\n *     <div>\n *       {quote.data && (\n *         <a href={quote.data.onRampLink} target=\"_blank\">\n *           open onramp provider\n *         </a>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithFiatQuote(\n  params?: GetBuyWithFiatQuoteParams,\n  queryOptions?: BuyWithFiatQuoteQueryOptions,\n): UseQueryResult<BuyWithFiatQuote> {\n  return useQuery({\n    ...queryOptions,\n    queryKey: [\"useBuyWithFiatQuote\", params],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getBuyWithFiatQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n      try {\n        // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n        if ((error as any).error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n          return false;\n        }\n      } catch {\n        return true;\n      }\n\n      return true;\n    },\n  });\n}\n","import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatQuoteEndpoint } from \"../utils/definitions.js\";\n\n/**\n * Parameters for [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function\n */\nexport type GetBuyWithFiatQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n\n  /**\n   * The address of the wallet to which the tokens will be sent.\n   */\n  toAddress: string;\n\n  /**\n   * Chain id of the token to buy.\n   */\n  toChainId: number;\n\n  /**\n   * Token address of the token to buy.\n   */\n  toTokenAddress: string;\n\n  /**\n   * Symbol of the fiat currency to buy the token with.\n   *\n   * Currently, only `USD` is supported.\n   */\n  fromCurrencySymbol: \"USD\";\n\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   * For example, if you want to allow a maximum slippage of 0.5%, you should specify `50` bps.\n   */\n  maxSlippageBPS?: number;\n\n  /**\n   * The amount of fiat currency to spend to buy the token.\n   * This is useful if you want to buy whatever amount of token you can get for a certain amount of fiat currency.\n   *\n   * If you want a certain amount of token, you can provide `toAmount` instead of `fromAmount`.\n   */\n  fromAmount?: string;\n\n  /**\n   * The amount of token to buy\n   * This is useful if you want to get a certain amount of token.\n   *\n   * If you want to buy however much token you can get for a certain amount of fiat currency, you can provide `fromAmount` instead of `toAmount`.\n   */\n  toAmount?: string;\n\n  /**\n   * Whether to use on-ramp provider in test mode for testing purpose or not.\n   *\n   * Defaults to `false`\n   */\n  isTestMode?: boolean;\n};\n\n/**\n * The response object returned by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n *\n * This includes various information for buying a token using a fiat currency:\n * - on-ramp provider UI link\n * - The estimated time for the transaction to complete.\n * - The on-ramp and destination token information.\n * - Processing fees\n */\nexport type BuyWithFiatQuote = {\n  /**\n   * Estimated time for the transaction to complete in seconds.\n   */\n  estimatedDurationSeconds: number;\n  /**\n   * Minimum amount of token that is expected to be received in units.\n   */\n  estimatedToAmountMin: string;\n  /**\n   * Minimum amount of token that is expected to be received in wei.\n   */\n  estimatedToAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in units.\n   *\n   * (estimatedToAmountMinWei - maxSlippageWei)\n   */\n  toAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in wei.\n   *\n   * (estimatedToAmountMin - maxSlippageWei)\n   */\n  toAmountMin: string;\n  /**\n   * fiat currency used to buy the token - excluding the fees.\n   */\n  fromCurrency: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Fiat currency used to buy the token - including the fees.\n   */\n  fromCurrencyWithFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Token information for the desired token. (token the user wants to buy)\n   */\n  toToken: {\n    symbol?: string | undefined;\n    priceUSDCents?: number | undefined;\n    name?: string | undefined;\n    chainId: number;\n    tokenAddress: string;\n    decimals: number;\n  };\n  /**\n   * Address of the wallet to which the tokens will be sent.\n   */\n  toAddress: string;\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   */\n  maxSlippageBPS: number;\n  /**\n   * Id of transaction\n   */\n  intentId: string;\n  /**\n   * Array of processing fees for the transaction.\n   *\n   * This includes the processing fees for on-ramp and swap (if required).\n   */\n  processingFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n    feeType: \"ON_RAMP\" | \"NETWORK\";\n  }[];\n  /**\n   * Token that will be sent to the user's wallet address by the on-ramp provider.\n   *\n   * If the token is same as `toToken` - the user can directly buy the token from the on-ramp provider.\n   * If not, the user will receive this token and a swap is required to convert it `toToken`.\n   */\n  onRampToken: {\n    amount: string;\n    amountWei: string;\n    amountUSDCents: number;\n    token: {\n      chainId: number;\n      decimals: number;\n      name: string;\n      priceUSDCents: number;\n      symbol: string;\n      tokenAddress: string;\n    };\n  };\n\n  /**\n   * Link to the on-ramp provider UI that will prompt the user to buy the token with fiat currency.\n   *\n   * This link should be opened in a new tab.\n   * @example\n   * ```ts\n   * window.open(quote.onRampLink, \"_blank\");\n   * ```\n   *\n   */\n  onRampLink: string;\n};\n\n/**\n * Get a quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) to buy given token with fiat currency.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * ### Rendering the On-Ramp provider UI\n * Once you have the `quote`, you can open the `quote.onRampLink` in a new tab - This will prompt the user to buy the token with fiat currency\n *\n * ### Determining the steps required\n * If `quote.onRampToken.token` is same as `quote.toToken` ( same chain + same token address ) - This means that the token can be directly bought from the on-ramp provider.\n * But if they are different, On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to swap it to the desired token onchain.\n *\n * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.\n *\n * ### Polling for the status\n * Once you open the `quote.onRampLink` in a new tab, you can start polling for the status using [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) to get the status of the transaction.\n *\n * `getBuyWithFiatStatus` returns a status object of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatStatus).\n *\n * - If no swap is required - the status will become `\"ON_RAMP_TRANSFER_COMPLETED\"` once the on-ramp provider has sent the desired token to the user's wallet address. Once you receive this status, the process is complete.\n * - If a swap is required - the status will become `\"CRYPTO_SWAP_REQUIRED\"` once the on-ramp provider has sent the tokens to the user's wallet address. Once you receive this status, you need to start the swap process.\n *\n * ### Swap Process\n * On receiving the `\"CRYPTO_SWAP_REQUIRED\"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n *\n * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @returns Object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * Get a quote for buying 10 USDC on polygon chain (chainId: 137) with USD fiat currency:\n *\n * ```ts\n * import { getBuyWithFiatQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithFiatQuote({\n *  client: client, // thirdweb client\n *  fromCurrencySymbol: \"USD\", // fiat currency symbol\n *  toChainId: 137, // polygon chain id\n *  toAmount: \"10\", // amount of USDC to buy\n *  toTokenAddress: \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\" // USDC token address in polygon chain\n *  toAddress: \"0x...\", // user's wallet address\n *  isTestMode: false, // whether to use onramp in test mode for testing purpose (defaults to false)\n * });\n *\n * window.open(quote.onRampLink, \"_blank\");\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithFiatQuote(\n  params: GetBuyWithFiatQuoteParams,\n): Promise<BuyWithFiatQuote> {\n  try {\n    const queryParams = new URLSearchParams({\n      toAddress: params.toAddress,\n      fromCurrencySymbol: params.fromCurrencySymbol,\n      toChainId: params.toChainId.toString(),\n      toTokenAddress: params.toTokenAddress.toLowerCase(),\n    });\n\n    if (params.fromAmount) {\n      queryParams.append(\"fromAmount\", params.fromAmount);\n    }\n\n    if (params.toAmount) {\n      queryParams.append(\"toAmount\", params.toAmount);\n    }\n\n    if (params.maxSlippageBPS) {\n      queryParams.append(\"maxSlippageBPS\", params.maxSlippageBPS.toString());\n    }\n\n    if (params.isTestMode) {\n      queryParams.append(\"isTestMode\", params.isTestMode.toString());\n    }\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatQuoteEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return (await response.json()).result;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n}\n","\"use client\";\nimport { keyframes } from \"@emotion/react\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport { forwardRef, useRef } from \"react\";\nimport { useCustomTheme } from \"../design-system/CustomThemeProvider.js\";\nimport { fadeInAnimation } from \"../design-system/animations.js\";\nimport { StyledDiv } from \"../design-system/elements.js\";\nimport { iconSize, radius, spacing } from \"../design-system/index.js\";\nimport { CrossContainer } from \"./Modal.js\";\nimport { IconButton } from \"./buttons.js\";\n\ntype DrawerProps = {\n  children: React.ReactNode;\n  close: () => void;\n};\n/**\n *\n * @internal\n */\nexport const Drawer = /* @__PURE__ */ forwardRef<HTMLDivElement, DrawerProps>(\n  function Drawer_(props, ref) {\n    return (\n      <>\n        <DrawerContainer ref={ref}>\n          <CrossContainer>\n            <IconButton type=\"button\" aria-label=\"Close\" onClick={props.close}>\n              <Cross2Icon\n                width={iconSize.md}\n                height={iconSize.md}\n                style={{\n                  color: \"inherit\",\n                }}\n              />\n            </IconButton>\n          </CrossContainer>\n\n          {props.children}\n        </DrawerContainer>\n      </>\n    );\n  },\n);\n\nexport const DrawerContainer = /* @__PURE__ */ StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    zIndex: 10000,\n    padding: spacing.lg,\n    borderTopLeftRadius: radius.xl,\n    borderTopRightRadius: radius.xl,\n    background: theme.colors.modalBg,\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    animation: `${drawerOpenAnimation} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.1)`,\n    borderTop: `1px solid ${theme.colors.borderColor}`,\n  };\n});\n\nexport const drawerOpenAnimation = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nexport const DrawerOverlay = /* @__PURE__ */ StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    backgroundColor: theme.colors.modalOverlayBg,\n    zIndex: 9999,\n    position: \"absolute\",\n    inset: 0,\n    animation: `${fadeInAnimation} 400ms cubic-bezier(0.16, 1, 0.3, 1)`,\n  };\n});\n\n/**\n *\n * @internal\n */\nexport function useDrawer() {\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const drawerOverlayRef = useRef<HTMLDivElement>(null);\n\n  const onClose = (closeDrawer: () => void) => {\n    if (drawerRef.current) {\n      const animOptions = {\n        easing: \"cubic-bezier(0.175, 0.885, 0.32, 1.1)\",\n        fill: \"forwards\",\n        duration: 300,\n      } as const;\n\n      const closeAnimation = drawerRef.current.animate(\n        [{ transform: \"translateY(100%)\", opacity: 0 }],\n        animOptions,\n      );\n\n      drawerOverlayRef.current?.animate([{ opacity: 0 }], animOptions);\n      closeAnimation.onfinish = closeDrawer;\n    } else {\n      closeDrawer();\n    }\n  };\n\n  return {\n    drawerRef,\n    drawerOverlayRef,\n    onClose,\n  };\n}\n","import { ClockIcon } from \"@radix-ui/react-icons\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { fontSize, iconSize, radius } from \"../../../design-system/index.js\";\nimport type { IconFC } from \"../../icons/types.js\";\nimport { formatSeconds } from \"./swap/formatSeconds.js\";\n\nexport function EstimatedTimeAndFees(props: {\n  estimatedSeconds?: number | undefined;\n  quoteIsLoading: boolean;\n  onViewFees: () => void;\n}) {\n  const { estimatedSeconds, quoteIsLoading } = props;\n\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      flex=\"row\"\n      borderColor=\"borderColor\"\n      style={{\n        borderRadius: radius.md,\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n      }}\n    >\n      <Container flex=\"row\" center=\"y\" gap=\"xxs\" color=\"accentText\" p=\"sm\">\n        <ClockIcon width={iconSize.sm} height={iconSize.sm} />\n        {quoteIsLoading ? (\n          <Skeleton height={fontSize.xs} width=\"50px\" color=\"borderColor\" />\n        ) : (\n          <Text size=\"xs\" color=\"secondaryText\">\n            {estimatedSeconds !== undefined\n              ? `~${formatSeconds(estimatedSeconds)}`\n              : \"--\"}\n          </Text>\n        )}\n      </Container>\n\n      <Button variant=\"ghost\" onClick={props.onViewFees} gap=\"xs\">\n        <Container color=\"accentText\" flex=\"row\" center=\"both\">\n          <ViewFeeIcon size={iconSize.sm} />\n        </Container>\n        <Text size=\"xs\" color=\"secondaryText\">\n          View Fees\n        </Text>\n      </Button>\n    </Container>\n  );\n}\n\nconst ViewFeeIcon: IconFC = (props) => {\n  return (\n    <svg\n      width={props.size}\n      height={props.size}\n      viewBox=\"0 0 12 12\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      aria-hidden=\"true\"\n    >\n      <path\n        d=\"M9.5 1.5H2.5C1.94772 1.5 1.5 1.94772 1.5 2.5V9.5C1.5 10.0523 1.94772 10.5 2.5 10.5H9.5C10.0523 10.5 10.5 10.0523 10.5 9.5V2.5C10.5 1.94772 10.0523 1.5 9.5 1.5Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M4.5 7.5L7.5 4.5\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../design-system/index.js\";\nimport type { CurrencyMeta } from \"./fiat/currencies.js\";\n\n/**\n * Shows an amount \"value\" and renders the selected token and chain\n * It also renders the buttons to select the token and chain\n * It also renders the balance of active wallet for the selected token in selected chain\n * @internal\n */\nexport function PayWithCreditCard(props: {\n  value?: string;\n  isLoading: boolean;\n  client: ThirdwebClient;\n  currency: CurrencyMeta;\n  onSelectCurrency: () => void;\n  disableCurrencySelection?: boolean;\n}) {\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      borderColor=\"borderColor\"\n      flex=\"row\"\n      style={{\n        borderRadius: radius.md,\n        borderBottomRightRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderBottom: \"none\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* Left */}\n      <CurrencyButton\n        disabled={props.disableCurrencySelection}\n        variant=\"ghost\"\n        onClick={props.onSelectCurrency}\n        style={{\n          minHeight: \"64px\",\n          justifyContent: \"flex-start\",\n          minWidth: \"50%\",\n        }}\n        gap=\"sm\"\n      >\n        <props.currency.icon size={iconSize.md} />\n        <Container flex=\"row\" center=\"y\" gap=\"xxs\">\n          <Text color=\"primaryText\">{props.currency.shorthand}</Text>\n          {!props.disableCurrencySelection && (\n            <ChevronDownIcon width={iconSize.sm} height={iconSize.sm} />\n          )}\n        </Container>\n      </CurrencyButton>\n\n      {/* Right */}\n      <div\n        style={{\n          flexGrow: 1,\n          flexShrink: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n          gap: spacing.xxs,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          justifyContent: \"center\",\n          paddingRight: spacing.sm,\n        }}\n      >\n        {props.isLoading ? (\n          <Skeleton width=\"100px\" height={fontSize.lg} />\n        ) : (\n          <Text size=\"lg\" color={props.value ? \"primaryText\" : \"secondaryText\"}>\n            {props.value ? `${formatNumber(Number(props.value), 4)}` : \"--\"}\n          </Text>\n        )}\n      </div>\n    </Container>\n  );\n}\n\nconst CurrencyButton = /* @__PURE__ */ styled(Button)(() => {\n  return {\n    \"&[disabled]:hover\": {\n      borderColor: \"transparent\",\n    },\n  };\n});\n","import styled from \"@emotion/styled\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { useCustomTheme } from \"../../../design-system/CustomThemeProvider.js\";\nimport { fontSize, spacing } from \"../../../design-system/index.js\";\n\n/**\n * @internal\n */\nexport function PaymentSelection(props: {\n  selected: \"crypto\" | \"creditCard\";\n  onSelect: (method: \"crypto\" | \"creditCard\") => void;\n}) {\n  return (\n    <div>\n      <Text size=\"sm\">Pay with </Text>\n      <Spacer y=\"xs\" />\n      <Container\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"1fr 1fr\",\n          gridGap: spacing.sm,\n        }}\n      >\n        <CheckButton\n          isChecked={props.selected === \"creditCard\"}\n          variant=\"outline\"\n          onClick={() => {\n            props.onSelect(\"creditCard\");\n          }}\n        >\n          Credit Card\n        </CheckButton>\n\n        <CheckButton\n          isChecked={props.selected === \"crypto\"}\n          variant=\"outline\"\n          onClick={() => {\n            props.onSelect(\"crypto\");\n          }}\n        >\n          Crypto\n        </CheckButton>\n      </Container>\n    </div>\n  );\n}\n\nconst CheckButton = /* @__PURE__ */ styled(Button)(\n  (props: {\n    isChecked: boolean;\n  }) => {\n    const theme = useCustomTheme();\n    return {\n      fontSize: fontSize.sm,\n      borderColor: props.isChecked\n        ? theme.colors.accentText\n        : theme.colors.borderColor,\n      \"&:hover\": {\n        borderColor: props.isChecked\n          ? theme.colors.accentText\n          : theme.colors.secondaryText,\n      },\n      gap: spacing.xs,\n      paddingInline: spacing.xxs,\n      paddingBlock: spacing.sm,\n      width: \"100%\",\n    };\n  },\n);\n","export function openOnrampPopup(link: string, theme: string) {\n  const height = 750;\n  const width = 500;\n  const top = (window.innerHeight - height) / 2;\n  const left = (window.innerWidth - width) / 2;\n\n  return window.open(\n    `${link}&theme=${theme}`,\n    \"thirdweb Pay\",\n    `width=${width}, height=${height}, top=${top}, left=${left}`,\n  );\n}\n","import { CheckCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useRef } from \"react\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport type {\n  BuyWithFiatStatus,\n  ValidBuyWithFiatStatus,\n} from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isMobile } from \"../../../../../../../utils/web/isMobile.js\";\nimport { useBuyWithFiatStatus } from \"../../../../../../core/hooks/pay/useBuyWithFiatStatus.js\";\nimport { invalidateWalletBalance } from \"../../../../../../core/providers/invalidateWalletBalance.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { Container, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { iconSize } from \"../../../../design-system/index.js\";\nimport { AccentFailIcon } from \"../../../icons/AccentFailIcon.js\";\nimport { getBuyWithFiatStatusMeta } from \"../tx-history/statusMeta.js\";\nimport { OnRampTxDetailsTable } from \"./FiatTxDetailsTable.js\";\n\ntype UIStatus = \"loading\" | \"failed\" | \"completed\" | \"partialSuccess\";\n\n/**\n * Poll for \"Buy with Fiat\" status - when the on-ramp is in progress\n * - Show success screen if swap is not required and on-ramp is completed\n * - Show Failed screen if on-ramp failed\n * - call `onShowSwapFlow` if on-ramp is completed and swap is required\n */\nexport function OnrampStatusScreen(props: {\n  client: ThirdwebClient;\n  onBack: () => void;\n  intentId: string;\n  onViewPendingTx: () => void;\n  hasTwoSteps: boolean;\n  openedWindow: Window | null;\n  quote: BuyWithFiatQuote;\n  onDone: () => void;\n  onShowSwapFlow: (status: BuyWithFiatStatus) => void;\n  isBuyForTx: boolean;\n  isEmbed: boolean;\n}) {\n  const queryClient = useQueryClient();\n  const { openedWindow } = props;\n  const statusQuery = useBuyWithFiatStatus({\n    intentId: props.intentId,\n    client: props.client,\n  });\n\n  // determine UI status\n  let uiStatus: UIStatus = \"loading\";\n  if (\n    statusQuery.data?.status === \"ON_RAMP_TRANSFER_FAILED\" ||\n    statusQuery.data?.status === \"PAYMENT_FAILED\"\n  ) {\n    uiStatus = \"failed\";\n  } else if (statusQuery.data?.status === \"CRYPTO_SWAP_FALLBACK\") {\n    uiStatus = \"partialSuccess\";\n  } else if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n    uiStatus = \"completed\";\n  }\n\n  // close the onramp popup if onramp is completed\n  useEffect(() => {\n    if (!openedWindow || !statusQuery.data) {\n      return;\n    }\n\n    if (\n      statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\" ||\n      statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\"\n    ) {\n      openedWindow.close();\n    }\n  }, [statusQuery.data, openedWindow]);\n\n  // invalidate wallet balance when onramp is completed\n  const invalidatedBalance = useRef(false);\n  useEffect(() => {\n    if (\n      !invalidatedBalance.current &&\n      statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\"\n    ) {\n      invalidatedBalance.current = true;\n      invalidateWalletBalance(queryClient);\n    }\n  }, [statusQuery.data, queryClient]);\n\n  // show swap flow\n  useEffect(() => {\n    if (statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\") {\n      props.onShowSwapFlow(statusQuery.data);\n    }\n  }, [statusQuery.data, props.onShowSwapFlow]);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title=\"Buy\" onBack={props.onBack} />\n\n      {props.hasTwoSteps && (\n        <>\n          <Spacer y=\"lg\" />\n          <StepBar steps={2} currentStep={1} />\n          <Spacer y=\"sm\" />\n          <Text size=\"xs\">\n            Step 1 of 2 - Buying {props.quote.onRampToken.token.symbol} with{\" \"}\n            {props.quote.fromCurrencyWithFees.currencySymbol}\n          </Text>\n        </>\n      )}\n\n      <OnrampStatusScreenUI\n        uiStatus={uiStatus}\n        onDone={props.onDone}\n        fiatStatus={statusQuery.data}\n        client={props.client}\n        isBuyForTx={props.isBuyForTx}\n        quote={props.quote}\n        isEmbed={props.isEmbed}\n      />\n    </Container>\n  );\n}\n\nfunction OnrampStatusScreenUI(props: {\n  uiStatus: UIStatus;\n  fiatStatus?: BuyWithFiatStatus;\n  onDone: () => void;\n  client: ThirdwebClient;\n  isBuyForTx: boolean;\n  isEmbed: boolean;\n  quote: BuyWithFiatQuote;\n}) {\n  const { uiStatus } = props;\n\n  const statusMeta = props.fiatStatus\n    ? getBuyWithFiatStatusMeta(props.fiatStatus)\n    : undefined;\n\n  const fiatStatus: ValidBuyWithFiatStatus | undefined =\n    props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\"\n      ? props.fiatStatus\n      : undefined;\n\n  const onRampTokenQuote = props.quote.onRampToken;\n\n  const txDetails = (\n    <OnRampTxDetailsTable\n      client={props.client}\n      token={\n        fiatStatus?.source // source tx is onRamp token\n          ? {\n              chainId: fiatStatus.source.token.chainId,\n              address: fiatStatus.source.token.tokenAddress,\n              symbol: fiatStatus.source.token.symbol || \"\",\n              amount: fiatStatus.source.amount,\n            }\n          : {\n              chainId: onRampTokenQuote.token.chainId,\n              address: onRampTokenQuote.token.tokenAddress,\n              symbol: onRampTokenQuote.token.symbol,\n              amount: onRampTokenQuote.amount,\n            }\n      }\n      fiat={{\n        amount: props.quote.fromCurrencyWithFees.amount,\n        currencySymbol: props.quote.fromCurrencyWithFees.currencySymbol,\n      }}\n      statusMeta={\n        fiatStatus?.source && statusMeta\n          ? {\n              color: statusMeta?.color,\n              text: statusMeta?.status,\n              txHash: fiatStatus.source.transactionHash,\n            }\n          : undefined\n      }\n    />\n  );\n\n  return (\n    <Container>\n      <Spacer y=\"xl\" />\n\n      {uiStatus === \"loading\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\">\n            <Spinner size=\"3xl\" color=\"accentText\" />\n          </Container>\n          <Spacer y=\"md\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Buy Pending\n          </Text>\n          <Spacer y=\"sm\" />\n          {!isMobile() && <Text center>Complete the purchase in popup</Text>}\n          <Spacer y=\"xxl\" />\n          {txDetails}\n        </>\n      )}\n\n      {uiStatus === \"failed\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\">\n            <AccentFailIcon size={iconSize[\"3xl\"]} />\n          </Container>\n          <Spacer y=\"lg\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Transaction Failed\n          </Text>\n          <Spacer y=\"xxl\" />\n          {txDetails}\n        </>\n      )}\n\n      {uiStatus === \"completed\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\" color=\"success\">\n            <CheckCircledIcon\n              width={iconSize[\"3xl\"]}\n              height={iconSize[\"3xl\"]}\n            />\n          </Container>\n          <Spacer y=\"md\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Buy Complete\n          </Text>\n          {props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\" && (\n            <>\n              <Spacer y=\"xxl\" />\n              {txDetails}\n              <Spacer y=\"sm\" />\n            </>\n          )}\n\n          {!props.isEmbed && (\n            <Button variant=\"accent\" fullWidth onClick={props.onDone}>\n              {props.isBuyForTx ? \"Continue Transaction\" : \"Done\"}\n            </Button>\n          )}\n        </>\n      )}\n    </Container>\n  );\n}\n","import { useState } from \"react\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport type { BuyWithFiatStatus } from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isSwapRequiredPostOnramp } from \"../../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\nimport { openOnrampPopup } from \"../openOnRamppopup.js\";\nimport { addPendingTx } from \"../swap/pendingSwapTx.js\";\nimport { OnrampStatusScreen } from \"./FiatStatusScreen.js\";\nimport { FiatSteps, fiatQuoteToPartialQuote } from \"./FiatSteps.js\";\nimport { PostOnRampSwapFlow } from \"./PostOnRampSwapFlow.js\";\n\n// 2 possible flows\n\n// If a Swap is required after doing onramp\n// 1. show the 2 steps ui with step 1 highlighted, on continue button click:\n// 2. open provider window, show onramp status screen, on onramp success:\n// 3. show the 2 steps ui with step 2 highlighted, on continue button click:\n// 4. show swap flow\n\n//  If a Swap is not required after doing onramp\n//  - window will already be opened before this component is mounted and `openedWindow` prop will be set, show onramp status screen\n\ntype Screen =\n  | {\n      id: \"step-1\";\n    }\n  | {\n      id: \"onramp-status\";\n    }\n  | {\n      id: \"postonramp-swap\";\n      data: BuyWithFiatStatus;\n    }\n  | {\n      id: \"step-2\";\n    };\n\nexport function FiatFlow(props: {\n  quote: BuyWithFiatQuote;\n  onBack: () => void;\n  client: ThirdwebClient;\n  testMode: boolean;\n  theme: \"light\" | \"dark\";\n  onViewPendingTx: () => void;\n  openedWindow: Window | null;\n  onDone: () => void;\n  isBuyForTx: boolean;\n  isEmbed: boolean;\n}) {\n  const hasTwoSteps = isSwapRequiredPostOnramp(props.quote);\n  const [screen, setScreen] = useState<Screen>(\n    hasTwoSteps\n      ? {\n          id: \"step-1\",\n        }\n      : {\n          id: \"onramp-status\",\n        },\n  );\n\n  const [popupWindow, setPopupWindow] = useState<Window | null>(\n    props.openedWindow,\n  );\n\n  if (screen.id === \"step-1\") {\n    return (\n      <FiatSteps\n        client={props.client}\n        onBack={props.onBack}\n        partialQuote={fiatQuoteToPartialQuote(props.quote)}\n        step={1}\n        onContinue={() => {\n          const popup = openOnrampPopup(props.quote.onRampLink, props.theme);\n          addPendingTx({\n            type: \"fiat\",\n            intentId: props.quote.intentId,\n          });\n          setPopupWindow(popup);\n          setScreen({ id: \"onramp-status\" });\n        }}\n      />\n    );\n  }\n\n  if (screen.id === \"onramp-status\") {\n    return (\n      <OnrampStatusScreen\n        client={props.client}\n        intentId={props.quote.intentId}\n        onBack={props.onBack}\n        onViewPendingTx={props.onViewPendingTx}\n        hasTwoSteps={hasTwoSteps}\n        openedWindow={popupWindow}\n        quote={props.quote}\n        onDone={props.onDone}\n        onShowSwapFlow={(_status) => {\n          setScreen({ id: \"postonramp-swap\", data: _status });\n        }}\n        isBuyForTx={props.isBuyForTx}\n        isEmbed={props.isEmbed}\n      />\n    );\n  }\n\n  if (screen.id === \"postonramp-swap\") {\n    return (\n      <PostOnRampSwapFlow\n        status={screen.data}\n        quote={fiatQuoteToPartialQuote(props.quote)}\n        client={props.client}\n        onBack={props.onBack}\n        onViewPendingTx={props.onViewPendingTx}\n        onDone={props.onDone}\n        onSwapFlowStarted={() => {\n          // no op\n        }}\n        isBuyForTx={props.isBuyForTx}\n        isEmbed={props.isEmbed}\n      />\n    );\n  }\n\n  // never\n  return null;\n}\n","import { defineChain } from \"../utils.js\";\n\nexport const polygon = /*@__PURE__*/ defineChain({\n  id: 137,\n  name: \"Polygon\",\n  nativeCurrency: { name: \"MATIC\", symbol: \"MATIC\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"PolygonScan\",\n      url: \"https://polygonscan.com\",\n      apiUrl: \"https://api.polygonscan.com/api\",\n    },\n  ],\n});\n","import styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { useChainQuery } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../../components/TokenIcon.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Input } from \"../../../../components/formElements.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport { useCustomTheme } from \"../../../../design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  iconSize,\n  spacing,\n} from \"../../../../design-system/index.js\";\nimport type { ERC20OrNativeToken } from \"../../nativeToken.js\";\n\n/**\n * @internal\n */\nexport function BuyTokenInput(props: {\n  token: ERC20OrNativeToken;\n  chain: Chain;\n  value: string;\n  onChange: (value: string) => void;\n  onSelectToken: () => void;\n  client: ThirdwebClient;\n  hideTokenSelector?: boolean;\n  freezeAmount?: boolean;\n  freezeChainAndToken?: boolean;\n}) {\n  const chainQuery = useChainQuery(props.chain);\n\n  const getWidth = () => {\n    let chars = props.value.replace(\".\", \"\").length;\n    const hasDot = props.value.includes(\".\");\n    if (hasDot) {\n      chars += 0.3;\n    }\n    return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;\n  };\n\n  return (\n    <Container>\n      {/* Input */}\n\n      {/* biome-ignore lint/a11y/useKeyWithClickEvents: <explanation> */}\n      <div\n        onClick={(e) => {\n          e.currentTarget.querySelector(\"input\")?.focus();\n        }}\n      >\n        <Container\n          flex=\"row\"\n          center=\"both\"\n          gap=\"xs\"\n          style={{\n            flexWrap: \"nowrap\",\n          }}\n        >\n          <Input\n            variant=\"outline\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            placeholder=\"0\"\n            type=\"text\"\n            data-placeholder={props.value === \"\"}\n            value={props.value || \"0\"}\n            disabled={props.freezeAmount}\n            onClick={(e) => {\n              // put cursor at the end of the input\n              if (props.value === \"\") {\n                e.currentTarget.setSelectionRange(\n                  e.currentTarget.value.length,\n                  e.currentTarget.value.length,\n                );\n              }\n            }}\n            onChange={(e) => {\n              let value = e.target.value;\n\n              if (value.startsWith(\".\")) {\n                value = `0${value}`;\n              }\n\n              const numValue = Number(value);\n              if (Number.isNaN(numValue)) {\n                return;\n              }\n\n              if (value.startsWith(\"0\") && !value.startsWith(\"0.\")) {\n                props.onChange(value.slice(1));\n              } else {\n                props.onChange(value);\n              }\n            }}\n            style={{\n              border: \"none\",\n              fontSize:\n                props.value.length > 10\n                  ? \"26px\"\n                  : props.value.length > 6\n                    ? \"34px\"\n                    : \"50px\",\n              boxShadow: \"none\",\n              padding: \"0\",\n              paddingBlock: \"2px\",\n              fontWeight: 600,\n              textAlign: \"right\",\n              width: getWidth(),\n              maxWidth: \"calc(100% - 100px)\",\n            }}\n          />\n          <TokenSymbol\n            token={props.token}\n            chain={props.chain}\n            size=\"lg\"\n            color=\"secondaryText\"\n          />\n        </Container>\n      </div>\n\n      {!props.hideTokenSelector && (\n        <>\n          <Spacer y=\"sm\" />\n\n          {/* Token / Chain selector */}\n          <Container flex=\"row\" center=\"x\">\n            <TokenButton\n              variant=\"secondary\"\n              fullWidth\n              style={{\n                fontSize: fontSize.sm,\n              }}\n              gap=\"xxs\"\n              onClick={props.onSelectToken}\n              disabled={props.freezeChainAndToken}\n            >\n              <Container flex=\"row\" center=\"y\" gap=\"sm\">\n                <TokenIcon\n                  token={props.token}\n                  chain={props.chain}\n                  size=\"md\"\n                  client={props.client}\n                />\n\n                <Container\n                  flex=\"column\"\n                  style={{\n                    gap: \"4px\",\n                  }}\n                >\n                  {/* Token Symbol */}\n                  <TokenSymbol\n                    token={props.token}\n                    chain={props.chain}\n                    size=\"sm\"\n                  />\n\n                  {/* Network Name */}\n                  {chainQuery.data?.name ? (\n                    <Text size=\"xs\" color=\"secondaryText\">\n                      {chainQuery.data.name}\n                    </Text>\n                  ) : (\n                    <Skeleton width=\"90px\" height={fontSize.xs} />\n                  )}\n                </Container>\n              </Container>\n\n              <ChevronDownIcon\n                width={iconSize.sm}\n                height={iconSize.sm}\n                style={{\n                  marginLeft: \"auto\",\n                }}\n              />\n            </TokenButton>\n          </Container>\n        </>\n      )}\n    </Container>\n  );\n}\n\nconst TokenButton = /* @__PURE__ */ styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    border: `1px solid ${theme.colors.borderColor}`,\n    justifyContent: \"flex-start\",\n    transition: \"background 0.3s\",\n    padding: spacing.sm,\n  };\n});\n","import { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport { useChainQuery } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { useWalletBalance } from \"../../../../../../core/hooks/others/useWalletBalance.js\";\nimport { useActiveAccount } from \"../../../../../../core/hooks/wallets/wallet-hooks.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { TokenIcon } from \"../../../../components/TokenIcon.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../design-system/index.js\";\nimport type { TokenInfo } from \"../../../defaultTokens.js\";\nimport { WalletIcon } from \"../../../icons/WalletIcon.js\";\nimport { formatTokenBalance } from \"../../formatTokenBalance.js\";\nimport { type NativeToken, isNativeToken } from \"../../nativeToken.js\";\n\n/**\n * Shows an amount \"value\" and renders the selected token and chain\n * It also renders the buttons to select the token and chain\n * It also renders the balance of active wallet for the selected token in selected chain\n * @internal\n */\nexport function PayWithCrypto(props: {\n  value: string;\n  onSelectToken: () => void;\n  chain: Chain;\n  token: TokenInfo | NativeToken;\n  isLoading: boolean;\n  client: ThirdwebClient;\n  freezeChainAndTokenSelection?: boolean;\n}) {\n  const chainQuery = useChainQuery(props.chain);\n  const activeAccount = useActiveAccount();\n\n  const balanceQuery = useWalletBalance({\n    address: activeAccount?.address,\n    chain: props.chain,\n    tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,\n    client: props.client,\n  });\n\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      borderColor=\"borderColor\"\n      flex=\"row\"\n      style={{\n        borderRadius: radius.md,\n        borderBottomRightRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderBottom: \"none\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        minHeight: \"64px\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* Left */}\n      <Button\n        variant=\"ghost\"\n        onClick={props.onSelectToken}\n        gap=\"sm\"\n        style={{\n          paddingInline: spacing.sm,\n          paddingBlock: spacing.sm,\n          minWidth: \"50%\",\n          justifyContent: \"flex-start\",\n        }}\n        disabled={props.freezeChainAndTokenSelection}\n      >\n        <TokenIcon\n          token={props.token}\n          chain={props.chain}\n          size=\"md\"\n          client={props.client}\n        />\n        <Container flex=\"column\" gap=\"xxs\">\n          <Container flex=\"row\" gap=\"xs\" center=\"y\" color=\"primaryText\">\n            <TokenSymbol token={props.token} chain={props.chain} size=\"sm\" />\n            <ChevronDownIcon width={iconSize.sm} height={iconSize.sm} />\n          </Container>\n          {chainQuery.data?.name ? (\n            <Text size=\"xs\"> {chainQuery.data.name}</Text>\n          ) : (\n            <Skeleton width=\"90px\" height={fontSize.xs} />\n          )}\n        </Container>\n      </Button>\n\n      {/* Right */}\n      <div\n        style={{\n          flexGrow: 1,\n          flexShrink: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n          gap: spacing.xxs,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          justifyContent: \"center\",\n          paddingRight: spacing.sm,\n        }}\n      >\n        {props.isLoading ? (\n          <Skeleton width=\"120px\" height={fontSize.md} color=\"borderColor\" />\n        ) : (\n          <Text\n            size=\"md\"\n            color={props.value ? \"primaryText\" : \"secondaryText\"}\n            style={{}}\n          >\n            {formatNumber(Number(props.value), 4) || \"--\"}\n          </Text>\n        )}\n\n        <Container flex=\"row\" gap=\"xxs\" center=\"y\" color=\"secondaryText\">\n          <WalletIcon size={fontSize.xs} />\n          {balanceQuery.data ? (\n            <Text size=\"xs\" color=\"secondaryText\" weight={500}>\n              {formatTokenBalance(balanceQuery.data, true)}\n            </Text>\n          ) : (\n            <Skeleton width=\"70px\" height={fontSize.xs} />\n          )}\n        </Container>\n      </div>\n    </Container>\n  );\n}\n","import { useMemo, useState } from \"react\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport type { GetBuyWithCryptoQuoteParams } from \"../../../../../../pay/buyWithCrypto/getQuote.js\";\nimport { isSwapRequiredPostOnramp } from \"../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toEther } from \"../../../../../../utils/units.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport {\n  useChainQuery,\n  useChainsQuery,\n} from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useWalletBalance } from \"../../../../../core/hooks/others/useWalletBalance.js\";\nimport { useBuyWithCryptoQuote } from \"../../../../../core/hooks/pay/useBuyWithCryptoQuote.js\";\nimport { useBuyWithFiatQuote } from \"../../../../../core/hooks/pay/useBuyWithFiatQuote.js\";\nimport {\n  useActiveAccount,\n  useActiveWalletChain,\n} from \"../../../../../core/hooks/wallets/wallet-hooks.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  useDrawer,\n} from \"../../../components/Drawer.js\";\nimport { DynamicHeight } from \"../../../components/DynamicHeight.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { Spinner } from \"../../../components/Spinner.js\";\nimport { SwitchNetworkButton } from \"../../../components/SwitchNetwork.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { type Theme, fontSize, spacing } from \"../../../design-system/index.js\";\nimport type { PayUIOptions } from \"../../ConnectButtonProps.js\";\nimport { ChainButton, NetworkSelectorContent } from \"../../NetworkSelector.js\";\nimport type { SupportedTokens } from \"../../defaultTokens.js\";\nimport type { ConnectLocale } from \"../../locale/types.js\";\nimport { TokenSelector } from \"../TokenSelector.js\";\nimport {\n  type ERC20OrNativeToken,\n  NATIVE_TOKEN,\n  isNativeToken,\n} from \"../nativeToken.js\";\nimport { EstimatedTimeAndFees } from \"./EstimatedTimeAndFees.js\";\nimport { PayWithCreditCard } from \"./PayWIthCreditCard.js\";\nimport { PaymentSelection } from \"./PaymentSelection.js\";\nimport { FiatFlow } from \"./fiat/FiatFlow.js\";\nimport type { CurrencyMeta } from \"./fiat/currencies.js\";\nimport type { BuyForTx, SelectedScreen } from \"./main/types.js\";\nimport { useBuyTxStates } from \"./main/useBuyTxStates.js\";\nimport { useEnabledPaymentMethods } from \"./main/useEnabledPaymentMethods.js\";\nimport { useUISelectionStates } from \"./main/useUISelectionStates.js\";\nimport { openOnrampPopup } from \"./openOnRamppopup.js\";\nimport { BuyTokenInput } from \"./swap/BuyTokenInput.js\";\nimport { FiatFees, SwapFees } from \"./swap/Fees.js\";\nimport { PayWithCrypto } from \"./swap/PayWithCrypto.js\";\nimport { SwapFlow } from \"./swap/SwapFlow.js\";\nimport { addPendingTx } from \"./swap/pendingSwapTx.js\";\nimport {\n  type SupportedChainAndTokens,\n  useBuySupportedDestinations,\n  useBuySupportedSources,\n} from \"./swap/useSwapSupportedChains.js\";\n\n// NOTE: Must not use useConnectUI here because this UI can be used outside connect ui\n\nexport type BuyScreenProps = {\n  onBack?: () => void;\n  supportedTokens?: SupportedTokens;\n  onViewPendingTx: () => void;\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  buyForTx?: BuyForTx;\n  payOptions: PayUIOptions;\n  theme: \"light\" | \"dark\" | Theme;\n  onDone: () => void;\n  connectButton?: React.ReactNode;\n  isEmbed: boolean;\n};\n\n/**\n * @internal\n */\nexport default function BuyScreen(props: BuyScreenProps) {\n  const supportedDestinationsQuery = useBuySupportedDestinations(props.client);\n\n  if (!supportedDestinationsQuery.data) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <BuyScreenContent\n      {...props}\n      onViewPendingTx={props.onViewPendingTx}\n      supportedDestinations={supportedDestinationsQuery.data}\n      buyForTx={props.buyForTx}\n    />\n  );\n}\n\ntype BuyScreenContentProps = {\n  client: ThirdwebClient;\n  onBack?: () => void;\n  supportedTokens?: SupportedTokens;\n  onViewPendingTx: () => void;\n  supportedDestinations: SupportedChainAndTokens;\n  connectLocale: ConnectLocale;\n  buyForTx?: BuyForTx;\n  theme: \"light\" | \"dark\" | Theme;\n  payOptions: PayUIOptions;\n  onDone: () => void;\n  connectButton?: React.ReactNode;\n  isEmbed: boolean;\n};\n\nfunction useBuyScreenStates(options: {\n  payOptions: PayUIOptions;\n}) {\n  const { payOptions } = options;\n\n  const [method, setMethod] = useState<\"crypto\" | \"creditCard\">(\n    payOptions.buyWithCrypto === false\n      ? \"creditCard\"\n      : payOptions.buyWithFiat === false\n        ? \"crypto\"\n        : \"creditCard\",\n  );\n\n  const [screen, setScreen] = useState<SelectedScreen>({\n    type: \"main\",\n  });\n\n  const [drawerScreen, setDrawerScreen] = useState<React.ReactNode>();\n  const { drawerRef, drawerOverlayRef, onClose } = useDrawer();\n\n  function closeDrawer() {\n    onClose(() => {\n      setDrawerScreen(undefined);\n    });\n  }\n\n  function showMainScreen() {\n    setScreen({\n      type: \"main\",\n    });\n  }\n\n  return {\n    method,\n    setMethod,\n    screen,\n    setScreen,\n    drawerScreen,\n    setDrawerScreen,\n    drawerRef,\n    drawerOverlayRef,\n    closeDrawer,\n    showMainScreen,\n  };\n}\n\n/**\n * @internal\n */\nfunction BuyScreenContent(props: BuyScreenContentProps) {\n  const { client, supportedDestinations, connectLocale, payOptions, buyForTx } =\n    props;\n\n  const account = useActiveAccount();\n  const activeChain = useActiveWalletChain();\n\n  // prefetch chains metadata for destination chains\n  useChainsQuery(supportedDestinations.map((x) => x.chain) || [], 50);\n\n  // screen\n  const {\n    method,\n    setMethod,\n    screen,\n    setScreen,\n    drawerScreen,\n    setDrawerScreen,\n    drawerRef,\n    drawerOverlayRef,\n    closeDrawer,\n    showMainScreen,\n  } = useBuyScreenStates({ payOptions });\n\n  // UI selection\n  const {\n    tokenAmount,\n    setTokenAmount,\n    setHasEditedAmount,\n    hasEditedAmount,\n    toChain,\n    setToChain,\n    deferredTokenAmount,\n    fromChain,\n    setFromChain,\n    toToken,\n    setToToken,\n    fromToken,\n    setFromToken,\n    selectedCurrency,\n  } = useUISelectionStates({\n    payOptions,\n    buyForTx,\n    supportedDestinations,\n  });\n\n  // Buy Transaction flow states\n  const { amountNeeded } = useBuyTxStates({\n    setTokenAmount,\n    buyForTx,\n    hasEditedAmount,\n    isMainScreen: screen.type === \"main\",\n    account,\n  });\n\n  // check if the screen is expanded or not\n  const isExpanded = activeChain && tokenAmount;\n\n  // update supportedSources whenever toToken or toChain is updated\n  const supportedSourcesQuery = useBuySupportedSources({\n    client: props.client,\n    destinationChainId: toChain.id,\n    destinationTokenAddress: isNativeToken(toToken)\n      ? NATIVE_TOKEN_ADDRESS\n      : toToken.address,\n  });\n\n  const destinationSupportedTokens: SupportedTokens = useMemo(() => {\n    return createSupportedTokens(\n      supportedDestinations,\n      payOptions,\n      props.supportedTokens,\n    );\n  }, [props.supportedTokens, supportedDestinations, payOptions]);\n\n  const sourceSupportedTokens: SupportedTokens | undefined = useMemo(() => {\n    if (!supportedSourcesQuery.data) {\n      return undefined;\n    }\n\n    return createSupportedTokens(\n      supportedSourcesQuery.data,\n      payOptions,\n      props.supportedTokens,\n    );\n  }, [props.supportedTokens, supportedSourcesQuery.data, payOptions]);\n\n  const { showPaymentSelection } = useEnabledPaymentMethods({\n    payOptions,\n    supportedDestinations,\n    toChain,\n    toToken,\n    method,\n    setMethod,\n  });\n\n  // screens ----------------------------\n\n  if (screen.type === \"node\") {\n    return screen.node;\n  }\n\n  if (screen.type === \"screen-id\" && screen.name === \"select-to-token\") {\n    const chains = supportedDestinations.map((x) => x.chain);\n    // if token selection is disabled - only show network selector screen\n    if (payOptions.prefillBuy?.allowEdits?.token === false) {\n      return (\n        <ChainSelectionScreen\n          chains={chains}\n          client={props.client}\n          connectLocale={props.connectLocale}\n          setChain={setToChain}\n          showMainScreen={showMainScreen}\n        />\n      );\n    }\n\n    return (\n      <TokenSelector\n        onBack={showMainScreen}\n        tokenList={(\n          (toChain?.id ? destinationSupportedTokens[toChain.id] : undefined) ||\n          []\n        ).filter((x) => x.address !== NATIVE_TOKEN_ADDRESS)}\n        onTokenSelect={(tokenInfo) => {\n          setToToken(tokenInfo);\n          showMainScreen();\n        }}\n        chain={toChain}\n        chainSelection={\n          // hide chain selection if it's disabled\n          payOptions.prefillBuy?.allowEdits?.chain !== false\n            ? {\n                chains: chains,\n                select: (c) => {\n                  setToChain(c);\n                },\n              }\n            : undefined\n        }\n        connectLocale={connectLocale}\n        client={client}\n      />\n    );\n  }\n\n  if (\n    screen.type === \"screen-id\" &&\n    screen.name === \"select-from-token\" &&\n    supportedSourcesQuery.data &&\n    sourceSupportedTokens\n  ) {\n    const chains = supportedSourcesQuery.data.map((x) => x.chain);\n    // if token selection is disabled - only show network selector screen\n    if (\n      payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.allowEdits?.token === false\n    ) {\n      return (\n        <ChainSelectionScreen\n          chains={chains}\n          client={props.client}\n          connectLocale={props.connectLocale}\n          setChain={setFromChain}\n          showMainScreen={showMainScreen}\n        />\n      );\n    }\n\n    return (\n      <TokenSelector\n        onBack={showMainScreen}\n        tokenList={(\n          (fromChain?.id ? sourceSupportedTokens[fromChain.id] : undefined) ||\n          []\n        ).filter((x) => x.address !== NATIVE_TOKEN_ADDRESS)}\n        onTokenSelect={(tokenInfo) => {\n          setFromToken(tokenInfo);\n          setScreen({\n            type: \"main\",\n          });\n        }}\n        chain={fromChain}\n        chainSelection={\n          // hide chain selection if it's disabled\n          payOptions.buyWithCrypto !== false &&\n          payOptions.buyWithCrypto?.prefillSource?.allowEdits?.chain !== false\n            ? {\n                chains: supportedSourcesQuery.data.map((x) => x.chain),\n                select: (c) => setFromChain(c),\n              }\n            : undefined\n        }\n        connectLocale={connectLocale}\n        client={client}\n      />\n    );\n  }\n\n  return (\n    <Container animate=\"fadein\">\n      {/* biome-ignore lint/a11y/useKeyWithClickEvents: <explanation> */}\n      <div\n        onClick={(e) => {\n          if (\n            drawerScreen &&\n            drawerRef.current &&\n            !drawerRef.current.contains(e.target as Node)\n          ) {\n            e.preventDefault();\n            e.stopPropagation();\n            closeDrawer();\n          }\n        }}\n      >\n        {/* Drawer */}\n        {drawerScreen && (\n          <>\n            <DrawerOverlay ref={drawerOverlayRef} />\n            <Drawer ref={drawerRef} close={closeDrawer}>\n              <DynamicHeight>{drawerScreen}</DynamicHeight>\n            </Drawer>\n          </>\n        )}\n\n        <Container\n          p=\"lg\"\n          style={{\n            paddingBottom: 0,\n          }}\n        >\n          <ModalHeader\n            title={\n              props.buyForTx\n                ? `Not enough ${props.buyForTx.tokenSymbol}`\n                : \"Buy\"\n            }\n            onBack={props.onBack}\n          />\n\n          <Spacer y=\"lg\" />\n          {!isExpanded && <Spacer y=\"xl\" />}\n\n          {/* Amount needed for Send Tx */}\n          {amountNeeded && props.buyForTx ? (\n            <BuyForTxUI\n              amountNeeded={String(\n                formatNumber(Number(toEther(amountNeeded)), 4),\n              )}\n              buyForTx={props.buyForTx}\n              client={client}\n            />\n          ) : null}\n\n          {/* To */}\n          <BuyTokenInput\n            value={tokenAmount}\n            onChange={async (value) => {\n              setHasEditedAmount(true);\n              setTokenAmount(value);\n            }}\n            freezeAmount={payOptions.prefillBuy?.allowEdits?.amount === false}\n            freezeChainAndToken={\n              payOptions.prefillBuy?.allowEdits?.chain === false &&\n              payOptions.prefillBuy?.allowEdits?.token === false\n            }\n            token={toToken}\n            chain={toChain}\n            onSelectToken={() => {\n              setScreen({\n                type: \"screen-id\",\n                name: \"select-to-token\",\n              });\n            }}\n            client={props.client}\n            hideTokenSelector={!!props.buyForTx}\n          />\n        </Container>\n\n        {showPaymentSelection ? <Spacer y=\"lg\" /> : <Spacer y=\"md\" />}\n\n        {isExpanded && (\n          <>\n            {showPaymentSelection && (\n              <Container px=\"lg\">\n                <PaymentSelection selected={method} onSelect={setMethod} />\n                <Spacer y=\"md\" />\n              </Container>\n            )}\n\n            {method === \"crypto\" && account && activeChain && (\n              <SwapScreenContent\n                {...props}\n                setScreen={setScreen}\n                setDrawerScreen={setDrawerScreen}\n                tokenAmount={deferredTokenAmount}\n                toChain={toChain}\n                toToken={toToken}\n                fromChain={fromChain}\n                fromToken={fromToken}\n                showFromTokenSelector={() => {\n                  setScreen({\n                    type: \"screen-id\",\n                    name: \"select-from-token\",\n                  });\n                }}\n                account={account}\n                activeChain={activeChain}\n              />\n            )}\n\n            {method === \"creditCard\" && account && (\n              <FiatScreenContent\n                {...props}\n                setScreen={setScreen}\n                setDrawerScreen={setDrawerScreen}\n                tokenAmount={deferredTokenAmount}\n                toChain={toChain}\n                toToken={toToken}\n                closeDrawer={closeDrawer}\n                selectedCurrency={selectedCurrency}\n                showCurrencySelector={() => {\n                  // currently disabled because we are only using Stripe\n                }}\n                account={account}\n              />\n            )}\n\n            <Spacer y=\"sm\" />\n          </>\n        )}\n\n        <Container px=\"lg\" flex=\"column\" gap=\"sm\">\n          {!isExpanded && (\n            <>\n              {!account && props.connectButton ? (\n                <div>{props.connectButton}</div>\n              ) : (\n                <Button\n                  variant=\"accent\"\n                  fullWidth\n                  disabled={true}\n                  data-disable={true}\n                >\n                  Continue\n                </Button>\n              )}\n            </>\n          )}\n\n          {account && (\n            <Button\n              variant=\"outline\"\n              fullWidth\n              style={{\n                padding: spacing.xs,\n                fontSize: fontSize.sm,\n              }}\n              onClick={props.onViewPendingTx}\n            >\n              View all transactions\n            </Button>\n          )}\n        </Container>\n\n        <Spacer y=\"lg\" />\n      </div>\n    </Container>\n  );\n}\n\nfunction SwapScreenContent(\n  props: BuyScreenContentProps & {\n    setDrawerScreen: (screen: React.ReactNode) => void;\n    setScreen: (screen: SelectedScreen) => void;\n    tokenAmount: string;\n    toToken: ERC20OrNativeToken;\n    toChain: Chain;\n    fromChain: Chain;\n    fromToken: ERC20OrNativeToken;\n    showFromTokenSelector: () => void;\n    account: Account;\n    activeChain: Chain;\n  },\n) {\n  const {\n    setDrawerScreen,\n    setScreen,\n    account,\n    client,\n    toChain,\n    tokenAmount,\n    toToken,\n    fromChain,\n    fromToken,\n    showFromTokenSelector,\n    payOptions,\n  } = props;\n\n  const fromTokenBalanceQuery = useWalletBalance({\n    address: account.address,\n    chain: fromChain,\n    tokenAddress: isNativeToken(fromToken) ? undefined : fromToken.address,\n    client,\n  });\n\n  const quoteParams: GetBuyWithCryptoQuoteParams | undefined =\n    tokenAmount && !(fromChain.id === toChain.id && fromToken === toToken)\n      ? {\n          // wallet\n          fromAddress: account.address,\n          // from\n          fromChainId: fromChain.id,\n          fromTokenAddress: isNativeToken(fromToken)\n            ? NATIVE_TOKEN_ADDRESS\n            : fromToken.address,\n          // to\n          toChainId: toChain.id,\n          toTokenAddress: isNativeToken(toToken)\n            ? NATIVE_TOKEN_ADDRESS\n            : toToken.address,\n          toAmount: tokenAmount,\n          client,\n        }\n      : undefined;\n\n  const quoteQuery = useBuyWithCryptoQuote(quoteParams, {\n    // refetch every 30 seconds\n    staleTime: 30 * 1000,\n    refetchInterval: 30 * 1000,\n    gcTime: 30 * 1000,\n  });\n\n  const sourceTokenAmount = quoteQuery.data?.swapDetails.fromAmount;\n\n  const isNotEnoughBalance =\n    !!sourceTokenAmount &&\n    !!fromTokenBalanceQuery.data &&\n    Number(fromTokenBalanceQuery.data.displayValue) < Number(sourceTokenAmount);\n\n  const disableContinue = !quoteQuery.data || isNotEnoughBalance;\n  const switchChainRequired = props.activeChain.id !== fromChain.id;\n\n  function getErrorMessage(err: Error) {\n    const defaultMessage = \"Unable to get price quote\";\n    try {\n      if (err instanceof Error) {\n        if (err.message.includes(\"Minimum\")) {\n          const msg = err.message;\n          return msg.replace(\"Fetch failed: Error: \", \"\");\n        }\n      }\n      return defaultMessage;\n    } catch {\n      return defaultMessage;\n    }\n  }\n\n  function showSwapFlow() {\n    if (!quoteQuery.data) {\n      return;\n    }\n\n    setScreen({\n      type: \"node\",\n      node: (\n        <SwapFlow\n          isBuyForTx={!!props.buyForTx}\n          isEmbed={props.isEmbed}\n          client={client}\n          onBack={() => {\n            setScreen({\n              type: \"main\",\n            });\n          }}\n          buyWithCryptoQuote={quoteQuery.data}\n          account={account}\n          onViewPendingTx={props.onViewPendingTx}\n          isFiatFlow={false}\n          onDone={props.onDone}\n          onTryAgain={() => {\n            setScreen({\n              type: \"main\",\n            });\n            quoteQuery.refetch();\n          }}\n        />\n      ),\n    });\n  }\n\n  function showFees() {\n    if (!quoteQuery.data) {\n      return;\n    }\n\n    setDrawerScreen(\n      <div>\n        <Text size=\"lg\" color=\"primaryText\">\n          Fees\n        </Text>\n        <Spacer y=\"lg\" />\n        <SwapFees quote={quoteQuery.data} align=\"left\" />\n      </div>,\n    );\n  }\n\n  const prefillSource =\n    payOptions.buyWithCrypto !== false\n      ? payOptions.buyWithCrypto?.prefillSource\n      : undefined;\n\n  return (\n    <Container px=\"lg\" flex=\"column\" gap=\"md\">\n      {/* Quote info */}\n      <div>\n        <PayWithCrypto\n          value={sourceTokenAmount || \"\"}\n          onSelectToken={showFromTokenSelector}\n          chain={fromChain}\n          token={fromToken}\n          isLoading={quoteQuery.isLoading && !sourceTokenAmount}\n          client={client}\n          freezeChainAndTokenSelection={\n            prefillSource?.allowEdits?.chain === false &&\n            prefillSource?.allowEdits?.token === false\n          }\n        />\n        <EstimatedTimeAndFees\n          quoteIsLoading={quoteQuery.isLoading}\n          estimatedSeconds={\n            quoteQuery.data?.swapDetails.estimated.durationSeconds\n          }\n          onViewFees={showFees}\n        />\n      </div>\n\n      {/* Error */}\n      {quoteQuery.error && (\n        <Text color=\"danger\" size=\"sm\" center>\n          {getErrorMessage(quoteQuery.error)}\n        </Text>\n      )}\n\n      {/* Button */}\n      {switchChainRequired &&\n      !quoteQuery.isLoading &&\n      !isNotEnoughBalance &&\n      !quoteQuery.error ? (\n        <SwitchNetworkButton variant=\"accent\" fullWidth chain={fromChain} />\n      ) : (\n        <Button\n          variant={disableContinue ? \"outline\" : \"accent\"}\n          fullWidth\n          data-disabled={disableContinue}\n          disabled={disableContinue}\n          onClick={async () => {\n            if (!disableContinue) {\n              showSwapFlow();\n            }\n          }}\n          gap=\"xs\"\n        >\n          {isNotEnoughBalance ? (\n            <Text color=\"danger\">Not Enough Funds</Text>\n          ) : quoteQuery.isLoading ? (\n            <>\n              <Spinner size=\"sm\" color=\"accentText\" />\n              Getting price quote\n            </>\n          ) : (\n            \"Continue\"\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n\nfunction FiatScreenContent(\n  props: BuyScreenContentProps & {\n    setDrawerScreen: (screen: React.ReactNode) => void;\n    setScreen: (screen: SelectedScreen) => void;\n    tokenAmount: string;\n    toToken: ERC20OrNativeToken;\n    toChain: Chain;\n    closeDrawer: () => void;\n    selectedCurrency: CurrencyMeta;\n    showCurrencySelector: () => void;\n    account: Account;\n  },\n) {\n  const {\n    toToken,\n    tokenAmount,\n    account,\n    client,\n    setScreen,\n    setDrawerScreen,\n    toChain,\n    showCurrencySelector,\n    selectedCurrency,\n  } = props;\n\n  const buyWithFiatOptions = props.payOptions.buyWithFiat;\n\n  const fiatQuoteQuery = useBuyWithFiatQuote(\n    buyWithFiatOptions !== false && tokenAmount\n      ? {\n          fromCurrencySymbol: \"USD\", // STRIPE only supports USD\n          toChainId: toChain.id,\n          toAddress: account.address,\n          toTokenAddress: isNativeToken(toToken)\n            ? NATIVE_TOKEN_ADDRESS\n            : toToken.address,\n          toAmount: tokenAmount,\n          client,\n          isTestMode: buyWithFiatOptions?.testMode,\n        }\n      : undefined,\n  );\n\n  function handleSubmit() {\n    if (!fiatQuoteQuery.data) {\n      return;\n    }\n\n    const hasTwoSteps = isSwapRequiredPostOnramp(fiatQuoteQuery.data);\n    let openedWindow: Window | null = null;\n\n    if (!hasTwoSteps) {\n      openedWindow = openOnrampPopup(\n        fiatQuoteQuery.data.onRampLink,\n        typeof props.theme === \"string\" ? props.theme : props.theme.type,\n      );\n\n      addPendingTx({\n        type: \"fiat\",\n        intentId: fiatQuoteQuery.data.intentId,\n      });\n    }\n\n    setScreen({\n      type: \"node\",\n      node: (\n        <FiatFlow\n          isBuyForTx={!!props.buyForTx}\n          quote={fiatQuoteQuery.data}\n          onBack={() => {\n            setScreen({\n              type: \"main\",\n            });\n          }}\n          client={client}\n          testMode={\n            buyWithFiatOptions !== false\n              ? buyWithFiatOptions?.testMode || false\n              : false\n          }\n          theme={\n            typeof props.theme === \"string\" ? props.theme : props.theme.type\n          }\n          onViewPendingTx={props.onViewPendingTx}\n          openedWindow={openedWindow}\n          onDone={props.onDone}\n          isEmbed={props.isEmbed}\n        />\n      ),\n    });\n  }\n\n  function showFees() {\n    if (!fiatQuoteQuery.data) {\n      return;\n    }\n\n    setDrawerScreen(\n      <div>\n        <Text size=\"lg\" color=\"primaryText\">\n          Fees\n        </Text>\n\n        <Spacer y=\"lg\" />\n        <FiatFees quote={fiatQuoteQuery.data} />\n      </div>,\n    );\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  function getErrorMessage(err: any): string[] {\n    type AmountTooLowError = {\n      code: \"MINIMUM_PURCHASE_AMOUNT\";\n      data: {\n        minimumAmountUSDCents: number;\n        requestedAmountUSDCents: number;\n      };\n    };\n\n    const defaultMessage = \"Unable to get price quote\";\n    try {\n      if (err.error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n        const obj = err.error as AmountTooLowError;\n        return [\n          `Minimum purchase amount is $${obj.data.minimumAmountUSDCents / 100}`,\n          `Requested amount is $${obj.data.requestedAmountUSDCents / 100}`,\n        ];\n      }\n    } catch {}\n\n    return [defaultMessage];\n  }\n\n  const disableSubmit = !fiatQuoteQuery.data;\n\n  return (\n    <Container px=\"lg\" flex=\"column\" gap=\"md\">\n      {/* Show Calculated Fiat Amount */}\n      <div>\n        <PayWithCreditCard\n          isLoading={fiatQuoteQuery.isLoading}\n          value={fiatQuoteQuery.data?.fromCurrencyWithFees.amount}\n          client={client}\n          currency={selectedCurrency}\n          onSelectCurrency={showCurrencySelector}\n          disableCurrencySelection={true}\n        />\n        {/* Estimated time + View fees button */}\n        <EstimatedTimeAndFees\n          quoteIsLoading={fiatQuoteQuery.isLoading}\n          estimatedSeconds={fiatQuoteQuery.data?.estimatedDurationSeconds}\n          onViewFees={showFees}\n        />\n      </div>\n\n      {/* Error message */}\n      {fiatQuoteQuery.error && (\n        <div>\n          {getErrorMessage(fiatQuoteQuery.error).map((msg) => (\n            <Text color=\"danger\" size=\"sm\" center multiline key={msg}>\n              {msg}\n            </Text>\n          ))}\n        </div>\n      )}\n\n      {/* Continue */}\n      <Button\n        variant={disableSubmit ? \"outline\" : \"accent\"}\n        data-disabled={disableSubmit}\n        disabled={disableSubmit}\n        fullWidth\n        onClick={handleSubmit}\n        gap=\"xs\"\n      >\n        {fiatQuoteQuery.isLoading ? (\n          <>\n            <Spinner size=\"sm\" color=\"accentText\" />\n            Getting price quote\n          </>\n        ) : (\n          \"Continue\"\n        )}\n      </Button>\n    </Container>\n  );\n}\n\nfunction BuyForTxUI(props: {\n  amountNeeded: string;\n  buyForTx: BuyForTx;\n  client: ThirdwebClient;\n}) {\n  const chainQuery = useChainQuery(props.buyForTx.tx.chain);\n\n  return (\n    <Container>\n      <Spacer y=\"xs\" />\n      <Container\n        flex=\"row\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text size=\"sm\">Amount Needed</Text>\n        <Container\n          flex=\"column\"\n          style={{\n            alignItems: \"flex-end\",\n          }}\n        >\n          <Container flex=\"row\" gap=\"xs\" center=\"y\">\n            <Text color=\"primaryText\" size=\"sm\">\n              {props.amountNeeded} {props.buyForTx.tokenSymbol}\n            </Text>\n            <TokenIcon\n              chain={props.buyForTx.tx.chain}\n              client={props.client}\n              size=\"sm\"\n              token={NATIVE_TOKEN}\n            />\n          </Container>\n          <Spacer y=\"xxs\" />\n          {chainQuery.data ? (\n            <Text size=\"sm\"> {chainQuery.data.name}</Text>\n          ) : (\n            <Skeleton height={fontSize.sm} width=\"50px\" />\n          )}\n        </Container>\n      </Container>\n\n      <Spacer y=\"md\" />\n      <Line />\n      <Spacer y=\"md\" />\n\n      <Container\n        flex=\"row\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text size=\"sm\">Your Balance</Text>\n        <Container flex=\"row\" gap=\"xs\">\n          <Text color=\"primaryText\" size=\"sm\">\n            {formatNumber(Number(toEther(props.buyForTx.balance)), 4)}{\" \"}\n            {props.buyForTx.tokenSymbol}\n          </Text>\n          <TokenIcon\n            chain={props.buyForTx.tx.chain}\n            client={props.client}\n            size=\"sm\"\n            token={NATIVE_TOKEN}\n          />\n        </Container>\n      </Container>\n\n      <Spacer y=\"md\" />\n      <Line />\n      <Spacer y=\"lg\" />\n\n      <Text center size=\"sm\">\n        Purchase\n      </Text>\n      <Spacer y=\"xxs\" />\n    </Container>\n  );\n}\n\nfunction createSupportedTokens(\n  data: SupportedChainAndTokens,\n  payOptions: PayUIOptions,\n  supportedTokensOverrides?: SupportedTokens,\n): SupportedTokens {\n  const tokens: SupportedTokens = {};\n\n  const isBuyWithFiatDisabled = payOptions.buyWithFiat === false;\n  const isBuyWithCryptoDisabled = payOptions.buyWithCrypto === false;\n\n  for (const x of data) {\n    tokens[x.chain.id] = x.tokens.filter((t) => {\n      // it token supports both - include it\n      if (t.buyWithCryptoEnabled && t.buyWithFiatEnabled) {\n        return true;\n      }\n\n      // if buyWithFiat is disabled, and buyWithCrypto is not supported by token - exclude the token\n      if (!t.buyWithCryptoEnabled && isBuyWithFiatDisabled) {\n        return false;\n      }\n\n      // if buyWithCrypto is disabled, and buyWithFiat is not supported by token - exclude the token\n      if (!t.buyWithFiatEnabled && isBuyWithCryptoDisabled) {\n        return false;\n      }\n\n      return true; // include the token\n    });\n  }\n\n  // override with props.supportedTokens\n  if (supportedTokensOverrides) {\n    for (const k in supportedTokensOverrides) {\n      const key = Number(k);\n      const tokenList = supportedTokensOverrides[key];\n\n      if (tokenList) {\n        tokens[key] = tokenList;\n      }\n    }\n  }\n\n  return tokens;\n}\n\nfunction ChainSelectionScreen(props: {\n  showMainScreen: () => void;\n  chains: Chain[];\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  setChain: (chain: Chain) => void;\n}) {\n  return (\n    <NetworkSelectorContent\n      client={props.client}\n      connectLocale={props.connectLocale}\n      showTabs={false}\n      onBack={props.showMainScreen}\n      chains={props.chains}\n      closeModal={props.showMainScreen}\n      networkSelector={{\n        renderChain(renderChainProps) {\n          return (\n            <ChainButton\n              chain={renderChainProps.chain}\n              confirming={false}\n              switchingFailed={false}\n              onClick={() => {\n                props.setChain(renderChainProps.chain);\n                props.showMainScreen();\n              }}\n              client={props.client}\n              connectLocale={props.connectLocale}\n            />\n          );\n        },\n      }}\n    />\n  );\n}\n","import { useState } from \"react\";\nimport { polygon } from \"../../../../../../../chains/chain-definitions/polygon.js\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport { toEther } from \"../../../../../../../utils/units.js\";\nimport { useActiveWalletChain } from \"../../../../../../core/hooks/wallets/wallet-hooks.js\";\nimport { useDebouncedValue } from \"../../../../hooks/useDebouncedValue.js\";\nimport type { PayUIOptions } from \"../../../ConnectButtonProps.js\";\nimport { type ERC20OrNativeToken, NATIVE_TOKEN } from \"../../nativeToken.js\";\nimport { defaultSelectedCurrency } from \"../fiat/currencies.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\nimport type { BuyForTx } from \"./types.js\";\n\n// handle states for token and chain selection\n\nexport function useUISelectionStates(options: {\n  payOptions: PayUIOptions;\n  buyForTx?: BuyForTx;\n  supportedDestinations: SupportedChainAndTokens;\n}) {\n  const activeChain = useActiveWalletChain();\n  const { payOptions, buyForTx, supportedDestinations } = options;\n\n  // buy token amount ---------------------------------------------------------\n  const initialTokenAmount =\n    payOptions.prefillBuy?.amount ||\n    (buyForTx\n      ? String(\n          formatNumber(Number(toEther(buyForTx.cost - buyForTx.balance)), 4),\n        )\n      : \"\");\n\n  const [hasEditedAmount, setHasEditedAmount] = useState(false);\n  const [tokenAmount, setTokenAmount] = useState<string>(initialTokenAmount);\n  const deferredTokenAmount = useDebouncedValue(tokenAmount, 300);\n\n  // --------------------------------------------------------------------------\n\n  // Destination chain and token selection -----------------------------------\n  const [toChain, setToChain] = useState<Chain>(\n    // use prefill chain if available\n    payOptions.prefillBuy?.chain ||\n      // use buyForTx chain if available\n      buyForTx?.tx.chain ||\n      // use active chain if its supported as destination\n      supportedDestinations.find((x) => x.chain.id === activeChain?.id)\n        ?.chain ||\n      // default to polygon\n      polygon,\n  );\n\n  const [toToken, setToToken] = useState<ERC20OrNativeToken>(\n    payOptions.prefillBuy?.token || NATIVE_TOKEN,\n  );\n  // --------------------------------------------------------------------------\n\n  // Source token and chain selection ---------------------------------------------------\n  const [fromChain, setFromChain] = useState<Chain>(\n    // use prefill chain if available\n    (payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.chain) ||\n      // default to polygon\n      polygon,\n  );\n\n  const [fromToken, setFromToken] = useState<ERC20OrNativeToken>(\n    // use prefill token if available\n    (payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.token) ||\n      // default to native token\n      NATIVE_TOKEN,\n  );\n\n  // --------------------------------------------------------------------------\n\n  // stripe only supports USD, so not using a state right now\n  const selectedCurrency = defaultSelectedCurrency;\n\n  return {\n    tokenAmount,\n    setTokenAmount,\n    hasEditedAmount,\n    toChain,\n    setToChain,\n    deferredTokenAmount,\n    fromChain,\n    setFromChain,\n    toToken,\n    setToToken,\n    fromToken,\n    setFromToken,\n    selectedCurrency,\n    setHasEditedAmount,\n  };\n}\n","import { useEffect, useState } from \"react\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport { toEther } from \"../../../../../../../utils/units.js\";\nimport type { Account } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport { getTotalTxCostForBuy } from \"../../../../../../core/hooks/contract/useSendTransaction.js\";\nimport { wait } from \"../../../../../../core/utils/wait.js\";\nimport type { BuyForTx } from \"./types.js\";\n\nexport function useBuyTxStates(options: {\n  setTokenAmount: (value: string) => void;\n  buyForTx?: BuyForTx;\n  hasEditedAmount: boolean;\n  isMainScreen: boolean;\n  account?: Account;\n}) {\n  const { buyForTx, hasEditedAmount, isMainScreen, setTokenAmount, account } =\n    options;\n  const shouldRefreshTokenAmount = !hasEditedAmount && isMainScreen;\n  const stopUpdatingAll = !isMainScreen;\n\n  const [amountNeeded, setAmountNeeded] = useState<bigint | undefined>(\n    buyForTx?.cost,\n  );\n\n  // update amount needed every 30 seconds\n  // also update the token amount if allowed\n  // ( Can't use useQuery because tx can't be added to queryKey )\n  useEffect(() => {\n    if (!buyForTx || stopUpdatingAll) {\n      return;\n    }\n\n    let mounted = true;\n\n    async function pollTxCost() {\n      if (!buyForTx || !mounted) {\n        return;\n      }\n\n      try {\n        const totalCost = await getTotalTxCostForBuy(\n          buyForTx.tx,\n          account?.address,\n        );\n\n        if (!mounted) {\n          return;\n        }\n\n        setAmountNeeded(totalCost);\n\n        if (shouldRefreshTokenAmount) {\n          if (totalCost > buyForTx.balance) {\n            const _tokenAmount = String(\n              formatNumber(Number(toEther(totalCost - buyForTx.balance)), 4),\n            );\n            setTokenAmount(_tokenAmount);\n          }\n        }\n      } catch {\n        // no op\n      }\n\n      await wait(30000);\n      pollTxCost();\n    }\n\n    pollTxCost();\n\n    return () => {\n      mounted = false;\n    };\n  }, [\n    buyForTx,\n    shouldRefreshTokenAmount,\n    setTokenAmount,\n    stopUpdatingAll,\n    account,\n  ]);\n\n  return {\n    amountNeeded,\n  };\n}\n","import { useEffect } from \"react\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport type { PayUIOptions } from \"../../../ConnectButtonProps.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\n\n// Based on what toToken, toChain, and supportedDestinations are, determine which payment methods should be enabled\n// change the current method if it should be disabled\n// return whether the payment selection should be shown or not ( if only one payment method is enabled, don't show the selection )\n\nexport function useEnabledPaymentMethods(options: {\n  payOptions: PayUIOptions;\n  supportedDestinations: SupportedChainAndTokens;\n  toChain: Chain;\n  toToken: ERC20OrNativeToken;\n  method: \"crypto\" | \"creditCard\";\n  setMethod: (method: \"crypto\" | \"creditCard\") => void;\n}) {\n  const {\n    payOptions,\n    supportedDestinations,\n    toChain,\n    toToken,\n    method,\n    setMethod,\n  } = options;\n\n  function getEnabledPayMethodsForSelectedToken(): {\n    fiat: boolean;\n    swap: boolean;\n  } {\n    const chain = supportedDestinations.find((c) => c.chain.id === toChain.id);\n    if (!chain) {\n      return {\n        fiat: true,\n        swap: true,\n      };\n    }\n\n    const toTokenAddress = isNativeToken(toToken)\n      ? NATIVE_TOKEN_ADDRESS\n      : toToken.address;\n\n    const tokenInfo = chain.tokens.find(\n      (t) => t.address.toLowerCase() === toTokenAddress.toLowerCase(),\n    );\n\n    if (!tokenInfo) {\n      return {\n        fiat: true,\n        swap: true,\n      };\n    }\n\n    return {\n      fiat: tokenInfo.buyWithFiatEnabled,\n      swap: tokenInfo.buyWithCryptoEnabled,\n    };\n  }\n\n  const { fiat, swap } = getEnabledPayMethodsForSelectedToken();\n\n  const buyWithFiatEnabled = payOptions.buyWithFiat !== false && fiat;\n  const buyWithCryptoEnabled = payOptions.buyWithCrypto !== false && swap;\n\n  useEffect(() => {\n    // both payment methods are disabled - do nothing\n    if (!buyWithFiatEnabled && !buyWithCryptoEnabled) {\n      return;\n    }\n\n    // if credit card tab is enabled but should be disabled, switch to crypto\n    if (method === \"creditCard\" && !buyWithFiatEnabled) {\n      setMethod(\"crypto\");\n    }\n\n    // if crypto tab is enabled but should be disabled, switch to credit card\n    if (method === \"crypto\" && !buyWithCryptoEnabled) {\n      setMethod(\"creditCard\");\n    }\n  }, [buyWithFiatEnabled, buyWithCryptoEnabled, method, setMethod]);\n\n  const showPaymentSelection = buyWithFiatEnabled && buyWithCryptoEnabled;\n\n  return {\n    showPaymentSelection,\n  };\n}\n","import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithCryptoQuote,\n  type GetBuyWithCryptoQuoteParams,\n  getBuyWithCryptoQuote,\n} from \"../../../../pay/buyWithCrypto/getQuote.js\";\n\n/**\n * @internal\n */\nexport type BuyWithCryptoQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get a price quote for performing a \"Buy with crypto\" transaction that allows users to buy a token with another token - aka a swap.\n *\n * The price quote is an object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) function.\n * You can also use that function directly\n *\n * Once you have the quote, you can use the [`useSendTransaction`](https://portal.thirdweb.com/references/typescript/v5/useSendTransaction) function to send the purchase\n * and [`useBuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithCryptoStatus) function to get the status of the swap transaction.\n * @param params - object of type [`BuyWithCryptoQuoteQueryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuoteQueryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote)\n * @example\n * ```tsx\n * import { useBuyWithCryptoQuote, useBuyWithCryptoStatus, type BuyWithCryptoStatusQueryParams, useActiveAccount } from \"thirdweb/react\";\n * import { sendTransaction } from 'thirdweb';\n *\n * function Component() {\n *  const buyWithCryptoQuoteQuery = useBuyWithCryptoQuote(swapParams);\n *  const [buyTxHash, setBuyTxHash] = useState<BuyWithCryptoStatusQueryParams | undefined>();\n *  const buyWithCryptoStatusQuery = useBuyWithCryptoStatus(buyTxHash ? {\n *    client,\n *    transactionHash: buyTxHash,\n *  }: undefined);\n *\n *  async function handleBuyWithCrypto() {\n *    const account = useActiveAccount();\n *\n *    // if approval is required\n *    if (buyWithCryptoQuoteQuery.data.approval) {\n *      const approveTx = await sendTransaction({\n *        transaction: swapQuote.data.approval,\n *        account: account,\n *      });\n *      await waitForApproval(approveTx);\n *    }\n *\n *    // send the transaction to buy crypto\n *    // this promise is resolved when user confirms the transaction in the wallet and the transaction is sent to the blockchain\n *    const buyTx = await sendTransaction({\n *      transaction: swapQuote.data.transactionRequest,\n *      account: account,\n *    });\n *    await waitForApproval(buyTx);\n *\n *    // set buyTx.transactionHash to poll the status of the swap transaction\n *    setBuyWithCryptoTx(buyTx.transactionHash);\n *  }\n *\n *  return <button onClick={handleBuyWithCrypto}>Swap</button>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithCryptoQuote(\n  params?: GetBuyWithCryptoQuoteParams,\n  queryParams?: BuyWithCryptoQuoteQueryOptions,\n): UseQueryResult<BuyWithCryptoQuote> {\n  return useQuery({\n    ...queryParams,\n    queryKey: [\"buyWithCryptoQuote\", params],\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"Swap params are required\");\n      }\n\n      return getBuyWithCryptoQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n\n      if (error.message.includes(\"Minimum purchase\")) {\n        return false;\n      }\n\n      return true;\n    },\n  });\n}\n"],"names":["isSwapRequiredPostOnramp","buyWithFiatQuote","sameChain","toToken","chainId","onRampToken","token","sameToken","getAddress","tokenAddress","useBuyWithFiatQuote","params","queryOptions","useQuery","queryKey","queryFn","async","Error","queryParams","URLSearchParams","toAddress","fromCurrencySymbol","toChainId","toString","toTokenAddress","toLowerCase","fromAmount","append","toAmount","maxSlippageBPS","isTestMode","queryString","url","concat","getPayBuyWithFiatQuoteEndpoint","response","getClientFetch","client","ok","errorObj","json","status","result","error","console","getBuyWithFiatQuote","enabled","retry","failureCount","code","_templateObject","Drawer","forwardRef","props","ref","_jsx","_Fragment","children","_jsxs","DrawerContainer","CrossContainer","IconButton","type","onClick","close","Cross2Icon","width","iconSize","md","height","style","color","StyledDiv","theme","useCustomTheme","zIndex","padding","spacing","lg","borderTopLeftRadius","radius","xl","borderTopRightRadius","background","colors","modalBg","position","bottom","left","right","animation","drawerOpenAnimation","borderTop","borderColor","keyframes","_taggedTemplateLiteral","DrawerOverlay","backgroundColor","modalOverlayBg","inset","fadeInAnimation","EstimatedTimeAndFees","estimatedSeconds","quoteIsLoading","Container","bg","flex","borderRadius","justifyContent","alignItems","borderWidth","borderStyle","center","gap","p","ClockIcon","sm","Skeleton","fontSize","xs","Text","size","undefined","formatSeconds","Button","variant","onViewFees","ViewFeeIcon","viewBox","fill","xmlns","d","stroke","strokeLinecap","strokeLinejoin","PayWithCreditCard","borderBottomRightRadius","borderBottomLeftRadius","borderBottom","flexWrap","CurrencyButton","disabled","disableCurrencySelection","onSelectCurrency","minHeight","minWidth","currency","icon","shorthand","ChevronDownIcon","flexGrow","flexShrink","display","flexDirection","xxs","overflow","textOverflow","whiteSpace","paddingRight","isLoading","value","formatNumber","Number","styled","PaymentSelection","Spacer","y","gridTemplateColumns","gridGap","CheckButton","isChecked","selected","onSelect","accentText","secondaryText","paddingInline","paddingBlock","openOnrampPopup","link","top","window","innerHeight","innerWidth","open","OnrampStatusScreen","_statusQuery$data","_statusQuery$data2","_statusQuery$data3","_statusQuery$data4","queryClient","useQueryClient","openedWindow","statusQuery","useBuyWithFiatStatus","intentId","uiStatus","data","useEffect","_statusQuery$data5","_statusQuery$data6","invalidatedBalance","useRef","_statusQuery$data7","current","invalidateWalletBalance","_statusQuery$data8","onShowSwapFlow","ModalHeader","title","onBack","hasTwoSteps","StepBar","steps","currentStep","quote","symbol","fromCurrencyWithFees","currencySymbol","OnrampStatusScreenUI","onDone","fiatStatus","isBuyForTx","isEmbed","statusMeta","getBuyWithFiatStatusMeta","onRampTokenQuote","txDetails","OnRampTxDetailsTable","source","address","amount","fiat","text","txHash","transactionHash","Spinner","isMobile","AccentFailIcon","CheckCircledIcon","fullWidth","FiatFlow","screen","setScreen","useState","id","popupWindow","setPopupWindow","FiatSteps","partialQuote","fiatQuoteToPartialQuote","step","onContinue","popup","onRampLink","addPendingTx","onViewPendingTx","_status","PostOnRampSwapFlow","onSwapFlowStarted","polygon","defineChain","name","nativeCurrency","decimals","blockExplorers","apiUrl","BuyTokenInput","_chainQuery$data","chainQuery","useChainQuery","chain","e","_e$currentTarget$quer","currentTarget","querySelector","focus","Input","pattern","inputMode","placeholder","freezeAmount","setSelectionRange","length","onChange","target","startsWith","numValue","isNaN","slice","border","boxShadow","fontWeight","textAlign","getWidth","chars","replace","includes","Math","max","maxWidth","TokenSymbol","hideTokenSelector","TokenButton","onSelectToken","freezeChainAndToken","TokenIcon","marginLeft","tertiaryBg","transition","PayWithCrypto","activeAccount","useActiveAccount","balanceQuery","useWalletBalance","isNativeToken","freezeChainAndTokenSelection","WalletIcon","weight","formatTokenBalance","BuyScreen","supportedDestinationsQuery","useBuySupportedDestinations","BuyScreenContent","supportedDestinations","buyForTx","LoadingScreen","useBuyScreenStates","options","payOptions","method","setMethod","buyWithCrypto","buyWithFiat","drawerScreen","setDrawerScreen","drawerRef","drawerOverlayRef","onClose","closeDrawer","_drawerOverlayRef$cur","animOptions","easing","duration","closeAnimation","animate","transform","opacity","onfinish","useDrawer","showMainScreen","_payOptions$prefillBu3","_payOptions$prefillBu4","_payOptions$prefillBu5","connectLocale","account","activeChain","useActiveWalletChain","useChainsQuery","map","x","tokenAmount","setTokenAmount","setHasEditedAmount","hasEditedAmount","toChain","setToChain","deferredTokenAmount","fromChain","setFromChain","setToToken","fromToken","setFromToken","selectedCurrency","_payOptions$prefillBu","_payOptions$prefillBu2","_supportedDestination","_payOptions$buyWithCr","_payOptions$buyWithCr2","initialTokenAmount","prefillBuy","String","toEther","cost","balance","useDebouncedValue","tx","find","NATIVE_TOKEN","prefillSource","defaultSelectedCurrency","useUISelectionStates","amountNeeded","isMainScreen","shouldRefreshTokenAmount","stopUpdatingAll","setAmountNeeded","mounted","pollTxCost","totalCost","getTotalTxCostForBuy","_tokenAmount","wait","useBuyTxStates","isExpanded","supportedSourcesQuery","useBuySupportedSources","destinationChainId","destinationTokenAddress","NATIVE_TOKEN_ADDRESS","destinationSupportedTokens","useMemo","createSupportedTokens","supportedTokens","sourceSupportedTokens","showPaymentSelection","swap","c","tokenInfo","tokens","t","buyWithFiatEnabled","buyWithCryptoEnabled","getEnabledPayMethodsForSelectedToken","useEnabledPaymentMethods","node","chains","allowEdits","ChainSelectionScreen","setChain","TokenSelector","tokenList","filter","onTokenSelect","chainSelection","select","contains","preventDefault","stopPropagation","DynamicHeight","paddingBottom","tokenSymbol","BuyForTxUI","px","SwapScreenContent","showFromTokenSelector","FiatScreenContent","showCurrencySelector","connectButton","_quoteQuery$data","_payOptions$buyWithCr3","_prefillSource$allowE","_prefillSource$allowE2","_quoteQuery$data2","fromTokenBalanceQuery","quoteParams","fromAddress","fromChainId","fromTokenAddress","quoteQuery","staleTime","refetchInterval","gcTime","getBuyWithCryptoQuote","message","sourceTokenAmount","swapDetails","isNotEnoughBalance","displayValue","disableContinue","switchChainRequired","estimated","durationSeconds","SwapFees","align","err","defaultMessage","getErrorMessage","SwapFlow","buyWithCryptoQuote","isFiatFlow","onTryAgain","refetch","SwitchNetworkButton","_fiatQuoteQuery$data","_fiatQuoteQuery$data2","buyWithFiatOptions","fiatQuoteQuery","testMode","disableSubmit","estimatedDurationSeconds","FiatFees","obj","minimumAmountUSDCents","requestedAmountUSDCents","msg","multiline","Line","supportedTokensOverrides","isBuyWithFiatDisabled","isBuyWithCryptoDisabled","k","key","NetworkSelectorContent","showTabs","closeModal","networkSelector","renderChain","renderChainProps","ChainButton","confirming","switchingFailed"],"sourceRoot":""}