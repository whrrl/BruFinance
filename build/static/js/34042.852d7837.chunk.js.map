{"version":3,"file":"static/js/34042.852d7837.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],"sourcesContent":["import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { utils, BigNumber, providers, Signer, ethers, Contract, constants } from 'ethers';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-3465d6bf.browser.esm.js';\nimport { M as MANAGED_ACCOUNT_GAS_BUFFER, c as checkContractWalletSignature, A as ACCOUNT_CORE_ABI, E as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-892c8b76.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { signTypedDataInternal, getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { chainIdToThirdwebRpc } from '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nasync function hexlifyUserOp(op) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n    this.approving = false;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    if (!this.approving) {\n      this.approving = true;\n      const tx = await this.smartAccountAPI.createApproveTx();\n      if (tx) {\n        await (await this.sendTransaction(tx)).wait();\n      }\n      this.approving = false;\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n\n  /**\n   * Sign a message and return the signature\n   */\n  async signMessage(message) {\n    // Deploy smart wallet if needed\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    const [chainId, address] = await Promise.all([this.getChainId(), this.getAddress()]);\n    const originalMsgHash = utils.hashMessage(message);\n    let factorySupports712;\n    let signature;\n    const rpcUrl = chainIdToThirdwebRpc(chainId, this.config.clientId);\n    const headers = {};\n    if (isTwUrl(rpcUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (this.config.secretKey) {\n        headers[\"x-secret-key\"] = this.config.secretKey;\n      } else if (this.config.clientId) {\n        headers[\"x-client-id\"] = this.config.clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    try {\n      const provider = new providers.StaticJsonRpcProvider({\n        url: rpcUrl,\n        headers\n      }, chainId);\n      const walletContract = new Contract(address, [\"function getMessageHash(bytes32 _hash) public view returns (bytes32)\"], provider);\n      // if this fails it's a pre 712 factory\n      await walletContract.getMessageHash(originalMsgHash);\n      factorySupports712 = true;\n    } catch {\n      factorySupports712 = false;\n    }\n    if (factorySupports712) {\n      const result = await signTypedDataInternal(this, {\n        name: \"Account\",\n        version: \"1\",\n        chainId,\n        verifyingContract: address\n      }, {\n        AccountMessage: [{\n          name: \"message\",\n          type: \"bytes\"\n        }]\n      }, {\n        message: utils.defaultAbiCoder.encode([\"bytes32\"], [originalMsgHash])\n      });\n      signature = result.signature;\n    } else {\n      signature = await this.originalSigner.signMessage(message);\n    }\n    const isValid = await checkContractWalletSignature(message, signature, address, chainId, this.config.clientId, this.config.secretKey);\n    if (isValid) {\n      return signature;\n    } else {\n      throw new Error(\"Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.\");\n    }\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient, userOpHash);\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n    this.erc20PaymasterAddress = params.erc20PaymasterAddress;\n    this.erc20TokenAddress = params.erc20TokenAddress;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    // get fees from bundler if available\n    if (isTwUrl(httpRpcClient.bundlerUrl)) {\n      const bundlerFeeData = await httpRpcClient.getUserOperationGasPrice();\n      maxFeePerGas = BigNumber.from(bundlerFeeData.maxFeePerGas);\n      maxPriorityFeePerGas = BigNumber.from(bundlerFeeData.maxPriorityFeePerGas);\n    } else {\n      // if bundler is not available, try to get fees from the network if not passed explicitly\n      if (!maxFeePerGas || !maxPriorityFeePerGas) {\n        const feeData = await getDynamicFeeData(this.provider);\n        if (!maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        }\n        if (!maxFeePerGas) {\n          maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n          const network = await this.provider.getNetwork();\n          const chainId = network.chainId;\n          if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n            maxPriorityFeePerGas = maxFeePerGas;\n          }\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(async tx => {\n      if (!info.gasLimit) {\n        // estimate gas on the inner transactions to simulate\n        // bundler would not revert otherwise\n        await this.provider.estimateGas({\n          from: sender,\n          to: info.target,\n          data: info.data,\n          value: value\n        });\n      }\n      return tx.encode();\n    });\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    const useErc20Paymaster = this.erc20PaymasterAddress && this.erc20TokenAddress && (await this.isAccountApproved());\n    if (useErc20Paymaster) {\n      partialOp.paymasterAndData = this.erc20PaymasterAddress;\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    } else if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = estimates.callGasLimit;\n        partialOp.verificationGasLimit = estimates.verificationGasLimit;\n        partialOp.preVerificationGas = estimates.preVerificationGas;\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or throws if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transaction receipt, or an error if timed out.\n   */\n  async getUserOpReceipt(httpRpcClient, userOpHash) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 120000;\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const userOpReceipt = await httpRpcClient.getUserOperationReceipt(userOpHash);\n      if (userOpReceipt) {\n        // avoid desync with current provider state\n        return await this.provider.waitForTransaction(userOpReceipt.receipt.transactionHash);\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(\"Timeout waiting for userOp to be mined\");\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n  async isAccountApproved() {\n    if (!this.params.erc20PaymasterAddress || !this.params.erc20TokenAddress) {\n      return true;\n    }\n    const swAddress = await this.getCounterFactualAddress();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20Token = await this.sdk.getContract(this.params.erc20TokenAddress, ERC20Abi);\n    const allowance = await erc20Token.call(\"allowance\", [swAddress, this.params.erc20PaymasterAddress]);\n    return allowance.gte(BigNumber.from(2).pow(96).sub(1));\n  }\n  async createApproveTx() {\n    if (await this.isAccountApproved()) {\n      return undefined;\n    }\n    const amountToApprove = BigNumber.from(2).pow(96).sub(1);\n    const ethersSigner = new ethers.Wallet(LOCAL_NODE_PKEY, this.provider);\n    const erc20Contract = new Contract(this.params.erc20TokenAddress, [\"function approve(address spender, uint256 amount) public returns (bool)\"], ethersSigner);\n    const tx = {\n      to: this.params.erc20TokenAddress,\n      from: await this.getAccountAddress(),\n      value: 0,\n      data: erc20Contract.interface.encodeFunctionData(\"approve\", [this.params.erc20PaymasterAddress, amountToApprove])\n    };\n    return tx;\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: {\n        createAccount: config.factoryInfo?.createAccount || this.defaultFactoryInfo().createAccount,\n        getAccountAddress: config.factoryInfo?.getAccountAddress || this.defaultFactoryInfo().getAccountAddress,\n        abi: config.factoryInfo?.abi\n      },\n      accountInfo: {\n        execute: config.accountInfo?.execute || this.defaultAccountInfo().execute,\n        getNonce: config.accountInfo?.getNonce || this.defaultAccountInfo().getNonce,\n        abi: config.accountInfo?.abi\n      },\n      clientId: config.clientId,\n      secretKey: config.secretKey,\n      erc20PaymasterAddress: config.erc20PaymasterAddress,\n      erc20TokenAddress: config.erc20TokenAddress\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress(), ACCOUNT_CORE_ABI);\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"names":["async","hexlifyUserOp","op","userOp","utils","Object","keys","map","key","val","startsWith","reduce","set","_ref","k","v","randomNonce","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","toString","length","BigNumber","from","PaymasterAPI","HttpRpcClient","constructor","bundlerUrl","entryPointAddress","chainId","clientId","secretKey","this","headers","isTwUrl","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","concat","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","userOpJsonRpcProvider","providers","url","name","initializing","validateChainId","chain","send","bundlerChain","parseInt","Error","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","data","preVerificationGas","verificationGas","verificationGasLimit","callGasLimit","add","MANAGED_ACCOUNT_GAS_BUFFER","getUserOperationGasPrice","getUserOperationReceipt","userOpHash","method","VerifyingPaymasterAPI","paymasterUrl","entryPoint","super","getPaymasterAndData","response","fetch","body","JSON","stringify","jsonrpc","id","params","res","json","ok","error","statusText","code","status","result","paymasterAndData","_res$error","message","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","sender","nonce","timeout","_defineProperty","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","queryFilter","once","stop","off","_len","arguments","param","Array","_key","event","args","console","_this$nonce","log","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","revertReason","decode","substring","ERC4337EthersSigner","Signer","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","approving","sendTransaction","transaction","options","_tx$data","tx","createApproveTx","wait","ethers","verifyAllNecessaryFields","multidimensionalNonce","unsigned","createUnsignedUserOp","target","to","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","userOperation","signUserOp","transactionResponse","constructUserOpTransactionResponse","unwrapError","errorIn","errorMsg","_errorBody$error","_errorBody$error2","_failedOpMessage","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","checkAccountPhantom","Promise","all","getChainId","originalMsgHash","factorySupports712","signature","rpcUrl","chainIdToThirdwebRpc","walletContract","Contract","getMessageHash","signTypedDataInternal","version","verifyingContract","AccountMessage","type","encode","checkContractWalletSignature","signTransaction","_tx$data2","ERC4337EthersProvider","originalProvider","signer","getSigner","perform","getTransaction","transactionHash","getAccountAddress","waitForTransaction","confirmations","getUserOpHash","hash","callData","getUserOpReceipt","initCode","detectNetwork","BaseAccountAPI","accountAddress","paymasterAPI","gasless","erc20PaymasterAddress","erc20TokenAddress","entryPointView","EntryPoint__factory","isPhantom","getCode","getInitCode","getAccountInitCode","getVerificationGasLimit","getNetwork","then","net","hashedUserOp","initCodeHash","callDataHash","paymasterAndDataHash","encoded","components","enc","getUserOpHashV06","senderAddress","getCounterFactualAddress","estimateCreationGas","deployerAddress","deployerCallData","estimateGas","info","_parseNumber","bundlerFeeData","feeData","getDynamicFeeData","_feeData$maxPriorityF","_feeData$maxFeePerGas","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","getNonce","a","parseNumber","batchData","prepareExecute","partialOp","isAccountApproved","estimates","unwrapBundlerError","paymasterResult","paymasterResult2","signUserOpHash","interval","endtime","Date","now","userOpReceipt","_error$error","AccountAPI","sdk","ThirdwebSDK","fromPrivateKey","LOCAL_NODE_PKEY","supportedChains","n","getAccountContract","_this$params$accountI","accountContract","accountInfo","abi","getContract","ACCOUNT_CORE_ABI","factory","getFactoryContract","localSigner","factoryInfo","createAccount","_this$params$factoryI","factoryContract","factoryAddress","execute","prepareExecuteBatch","targets","values","datas","prepare","isAcountDeployed","swAddress","ERC20Abi","default","erc20Token","call","gte","pow","sub","amountToApprove","ethersSigner","erc20Contract","interface","encodeFunctionData","SmartWalletConnector","Connector","initialize","_config$factoryInfo","_config$factoryInfo2","_config$factoryInfo3","_config$accountInfo","_config$accountInfo2","_config$accountInfo3","getChainProvider","ENTRYPOINT_ADDRESS","personalWallet","providerConfig","defaultFactoryInfo","defaultAccountInfo","accountApi","aaProvider","create4337Provider","connectionArgs","getProvider","isConnected","e","disconnect","switchChain","setupListeners","updateChains","chains","hasPermissionToExecute","_await$accountContrac","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","getOverrides","estimateRaw","_tx$data3","constants","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","_this$personalWallet","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","_this$config$accountI","fromSigner","_this$config$factoryI","owner","deployGasLimit","estimateDeploymentGasLimit","gasPrice","getGasPrice","transactionGasLimit","transactionCost","mul","deployCost","totalCost","ether","wei","details","initGas","resolvedTxs"],"sourceRoot":""}