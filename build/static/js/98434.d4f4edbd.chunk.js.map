{"version":3,"file":"static/js/98434.d4f4edbd.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/storage/upload/helpers.ts","../node_modules/thirdweb/src/storage/upload.ts","../node_modules/thirdweb/src/utils/text-decoder.ts","../node_modules/thirdweb/src/utils/uint8-array.ts"],"sourcesContent":["import { isObjectWithKeys } from \"../../utils/type-guards.js\";\nimport { areUint8ArraysEqual, isUint8Array } from \"../../utils/uint8-array.js\";\nimport type {\n  BufferOrStringWithName,\n  BuildFormDataOptions,\n  FileOrBuffer,\n  FileOrBufferOrString,\n} from \"./types.js\";\n\n/**\n * @internal\n */\nfunction isFileInstance(data: unknown): data is File {\n  return globalThis.File && data instanceof File;\n}\n\n/**\n * @internal\n */\nfunction isBufferOrStringWithName(\n  data: unknown,\n): data is BufferOrStringWithName {\n  if (!data) {\n    return false;\n  }\n  if (!isObjectWithKeys(data, [\"data\", \"name\"])) {\n    return false;\n  }\n  return !!(\n    typeof data.name === \"string\" &&\n    (typeof data.data === \"string\" || isUint8Array(data.data))\n  );\n}\n\nexport function isFileBufferOrStringEqual(\n  input1: unknown,\n  input2: unknown,\n): boolean {\n  if (isFileInstance(input1) && isFileInstance(input2)) {\n    // if both are File types, compare the name, size, and last modified date (best guess that these are the same files)\n    if (\n      input1.name === input2.name &&\n      input1.lastModified === input2.lastModified &&\n      input1.size === input2.size\n    ) {\n      return true;\n    }\n  } else if (isUint8Array(input1) && isUint8Array(input2)) {\n    // buffer gives us an easy way to compare the contents!\n\n    return areUint8ArraysEqual(input1, input2);\n  } else if (\n    isBufferOrStringWithName(input1) &&\n    isBufferOrStringWithName(input2)\n  ) {\n    // first check the names\n    if (input1.name === input2.name) {\n      // if the data for both is a string, compare the strings\n      if (typeof input1.data === \"string\" && typeof input2.data === \"string\") {\n        return input1.data === input2.data;\n      }\n      if (isUint8Array(input1.data) && isUint8Array(input2.data)) {\n        // otherwise we know it's buffers, so compare the buffers\n        return areUint8ArraysEqual(input1.data, input2.data);\n      }\n    }\n  }\n  // otherwise if we have not found a match, return false\n  return false;\n}\n\nexport function buildFormData(\n  form: FormData,\n  files: FileOrBufferOrString[],\n  options?: BuildFormDataOptions,\n) {\n  const fileNameToFileMap = new Map<string, FileOrBufferOrString>();\n  const fileNames: string[] = [];\n  for (let i = 0; i < files.length; i++) {\n    // biome-ignore lint/style/noNonNullAssertion: we know that files[i] is not null or undefined because we are iterating over the array\n    const file = files[i]!;\n    let fileName = \"\";\n    let fileData = file;\n\n    if (isFileInstance(file)) {\n      if (options?.rewriteFileNames) {\n        let extensions = \"\";\n        if (file.name) {\n          const extensionStartIndex = file.name.lastIndexOf(\".\");\n          if (extensionStartIndex > -1) {\n            extensions = file.name.substring(extensionStartIndex);\n          }\n        }\n        fileName = `${\n          i + options.rewriteFileNames.fileStartNumber\n        }${extensions}`;\n      } else {\n        fileName = `${file.name}`;\n      }\n    } else if (isBufferOrStringWithName(file)) {\n      fileData = file.data;\n      if (options?.rewriteFileNames) {\n        fileName = `${i + options.rewriteFileNames.fileStartNumber}`;\n      } else {\n        fileName = `${file.name}`;\n      }\n    } else {\n      if (options?.rewriteFileNames) {\n        fileName = `${i + options.rewriteFileNames.fileStartNumber}`;\n      } else {\n        fileName = `${i}`;\n      }\n    }\n\n    // If we don't want to wrap with directory, adjust the filepath\n    const filepath = options?.uploadWithoutDirectory\n      ? \"files\"\n      : `files/${fileName}`;\n\n    if (fileNameToFileMap.has(fileName)) {\n      // if the file in the map is the same as the file we are already looking at then just skip and continue\n      if (isFileBufferOrStringEqual(fileNameToFileMap.get(fileName), file)) {\n        // we add it to the filenames array so that we can return the correct number of urls,\n        fileNames.push(fileName);\n        // but then we skip because we don't need to upload it multiple times\n        continue;\n      }\n      // otherwise if file names are the same but they are not the same file then we should throw an error (trying to upload to differnt files but with the same names)\n      throw new Error(\n        `[DUPLICATE_FILE_NAME_ERROR] File name ${fileName} was passed for more than one different file.`,\n      );\n    }\n\n    // add it to the map so that we can check for duplicates\n    fileNameToFileMap.set(fileName, file);\n    // add it to the filenames array so that we can return the correct number of urls\n    fileNames.push(fileName);\n    form.append(\"file\", new Blob([fileData as BlobPart]), filepath);\n  }\n\n  const metadata = {\n    name: \"Storage SDK\",\n    keyvalues: { ...options?.metadata },\n  };\n  form.append(\"pinataMetadata\", JSON.stringify(metadata));\n\n  if (options?.uploadWithoutDirectory) {\n    form.append(\n      \"pinataOptions\",\n      JSON.stringify({\n        wrapWithDirectory: false,\n      }),\n    );\n  }\n\n  return {\n    form,\n    // encode the file names on the way out (which is what the upload backend expects)\n    fileNames: fileNames.map((fName) => encodeURIComponent(fName)),\n  };\n}\n\nexport function isFileOrUint8Array(\n  data: unknown,\n): data is File | Uint8Array | BufferOrStringWithName {\n  return (\n    isFileInstance(data) || isUint8Array(data) || isBufferOrStringWithName(data)\n  );\n}\n\n/**\n * @internal\n */\nexport function extractObjectFiles(\n  data: unknown,\n  files: FileOrBuffer[] = [],\n): FileOrBuffer[] {\n  // If item is a FileOrBuffer add it to our list of files\n  if (isFileOrUint8Array(data)) {\n    files.push(data);\n    return files;\n  }\n\n  if (typeof data === \"object\") {\n    if (!data) {\n      return files;\n    }\n\n    if (Array.isArray(data)) {\n      for (const entry of data) {\n        extractObjectFiles(entry, files);\n      }\n    } else {\n      Object.keys(data).map((key) =>\n        extractObjectFiles(data[key as keyof typeof data], files),\n      );\n    }\n  }\n\n  return files;\n}\n\n/**\n * @internal\n */\nexport function replaceObjectFilesWithUris(\n  data: unknown,\n  uris: string[],\n): unknown {\n  if (isFileOrUint8Array(data)) {\n    if (uris.length) {\n      return uris.shift() as string;\n    }\n    console.warn(\"Not enough URIs to replace all files in object.\");\n  }\n\n  if (typeof data === \"object\") {\n    if (!data) {\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map((entry) => replaceObjectFilesWithUris(entry, uris));\n    }\n    return Object.fromEntries(\n      Object.entries(data).map(([key, value]) => [\n        key,\n        replaceObjectFilesWithUris(value, uris),\n      ]),\n    );\n  }\n\n  return data;\n}\n\n/**\n * @internal\n */\nexport function replaceGatewayUrlWithScheme(url: string): string {\n  if (url.includes(\"/ipfs/\")) {\n    const hash = url.split(\"/ipfs/\")[1];\n    return `ipfs://${hash}`;\n  }\n  return url;\n}\n\n/**\n * @internal\n */\nexport function replaceObjectGatewayUrlsWithSchemes<TData>(data: TData): TData {\n  if (typeof data === \"string\") {\n    return replaceGatewayUrlWithScheme(data) as TData;\n  }\n  if (typeof data === \"object\") {\n    if (!data) {\n      return data;\n    }\n\n    if (isFileOrUint8Array(data)) {\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map((entry) =>\n        replaceObjectGatewayUrlsWithSchemes(entry),\n      ) as TData;\n    }\n\n    return Object.fromEntries(\n      Object.entries(data).map(([key, value]) => [\n        key,\n        replaceObjectGatewayUrlsWithSchemes(value),\n      ]),\n    ) as TData;\n  }\n\n  return data;\n}\n","import type { ThirdwebClient } from \"../client/client.js\";\nimport { detectPlatform } from \"../utils/detect-platform.js\";\nimport { stringify } from \"../utils/json.js\";\nimport {\n  buildFormData,\n  extractObjectFiles,\n  isFileOrUint8Array,\n  replaceObjectFilesWithUris,\n  replaceObjectGatewayUrlsWithSchemes,\n} from \"./upload/helpers.js\";\nimport type {\n  FileOrBufferOrString,\n  UploadOptions as InternalUploadOptions,\n  UploadableFile,\n} from \"./upload/types.js\";\n\nexport type UploadOptions<TFiles extends UploadableFile[]> =\n  InternalUploadOptions<TFiles> & {\n    client: ThirdwebClient;\n  };\n\ntype UploadReturnType<TFiles extends UploadableFile[]> = TFiles extends {\n  length: 0;\n}\n  ? null\n  : TFiles extends { length: 1 }\n    ? string\n    : string[];\n\n/**\n * Uploads files based on the provided options.\n * @param options - The upload options.\n * @returns A promise that resolves to the uploaded file URI or URIs (when passing multiple files).\n * @throws An error if the upload fails.\n * @example\n * ```ts\n * import { upload } from \"thirdweb/storage\";\n * const uri = await upload({\n *  client,\n *  files: [\n *    new File([\"hello world\"], \"hello.txt\"),\n *  ],\n * });\n * ```\n * @storage\n */\nexport async function upload<const TFiles extends UploadableFile[]>(\n  options: UploadOptions<TFiles>,\n): Promise<UploadReturnType<TFiles>> {\n  // deal with the differnt file types\n\n  // if there are no files, return an empty array immediately\n  if (options.files.length === 0) {\n    return null as UploadReturnType<TFiles>;\n  }\n  // handle file arrays\n  const isFileArray = options.files\n    .map((item) => isFileOrUint8Array(item) || typeof item === \"string\")\n    .every((item) => !!item);\n\n  let uris: FileOrBufferOrString[];\n\n  if (isFileArray) {\n    // if we already have an array of files, we can just pass it through\n    uris = options.files as FileOrBufferOrString[];\n  } else {\n    // otherwise we have to process them first\n    let cleaned = options.files as unknown[];\n\n    // Replace any gateway URLs with their hashes\n    cleaned = replaceObjectGatewayUrlsWithSchemes(cleaned);\n\n    // Recurse through data and extract files to upload\n    const files = extractObjectFiles(cleaned);\n    if (files.length) {\n      // Upload all files that came from the object\n      const uris_ = await upload({ ...options, files });\n\n      // Recurse through data and replace files with hashes\n      cleaned = replaceObjectFilesWithUris(\n        cleaned,\n        // always pass an array even if the underlying upload returns a single uri\n        Array.isArray(uris_) ? uris_ : [uris_],\n      ) as unknown[];\n    }\n\n    uris = cleaned.map((item) => {\n      if (typeof item === \"string\") {\n        return item;\n      }\n      return stringify(item);\n    });\n  }\n\n  // end deal with the differnt file types\n  const form_ = new FormData();\n\n  const { fileNames, form } = buildFormData(form_, uris, options);\n\n  const platform = detectPlatform();\n  if (platform === \"browser\" || platform === \"node\") {\n    const { uploadBatch } = await import(\"./upload/web-node.js\");\n    const uris = await uploadBatch(options.client, form, fileNames, options);\n    // if we only passed a single file, return its URI directly\n    if (options.files.length === 1) {\n      return uris[0] as UploadReturnType<TFiles>;\n    }\n    return uris as UploadReturnType<TFiles>;\n  }\n  throw new Error(\n    \"Please, use the uploadMobile function in mobile environments.\",\n  );\n}\n","let textDecoder: TextDecoder;\n\n/**\n * Re-using the same textdecoder is faster.\n *\n * @returns\n * @internal\n */\nexport function cachedTextDecoder(): TextDecoder {\n  if (!textDecoder) {\n    textDecoder = new TextDecoder();\n  }\n  return textDecoder;\n}\n","import { cachedTextDecoder } from \"./text-decoder.js\";\n\nconst uint8ArrayStringified = \"[object Uint8Array]\";\n\n/**\n * Throw a `TypeError` if the given value is not an instance of `Uint8Array`.\n * @example\n * ```ts\n * import {assertUint8Array} from 'uint8array-extras';\n *\n * try {\n * assertUint8Array(new ArrayBuffer(10)); // Throws a TypeError\n * } catch (error) {\n * console.error(error.message);\n * }\n * ```\n */\nfunction assertUint8Array(value: unknown): asserts value is Uint8Array {\n  if (!isUint8Array(value)) {\n    throw new TypeError(`Expected \\`Uint8Array\\`, got \\`${typeof value}\\``);\n  }\n}\n\n/**\n * Check if the given value is an instance of `Uint8Array`.\n *\n * Replacement for [`Buffer.isBuffer()`](https://nodejs.org/api/buffer.html#static-method-bufferisbufferobj).\n * @example\n * ```ts\n * import {isUint8Array} from 'uint8array-extras';\n *\n * console.log(isUint8Array(new Uint8Array()));\n * //=> true\n *\n * console.log(isUint8Array(Buffer.from('x')));\n * //=> true\n *\n * console.log(isUint8Array(new ArrayBuffer(10)));\n * //=> false\n * ```\n */\nexport function isUint8Array(value: unknown): value is Uint8Array {\n  if (!value) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  return Object.prototype.toString.call(value) === uint8ArrayStringified;\n}\n\n/**\n * Check if two arrays are identical by verifying that they contain the same bytes in the same sequence.\n *\n * Replacement for [`Buffer#equals()`](https://nodejs.org/api/buffer.html#bufequalsotherbuffer).\n * @example\n * ```ts\n * import {areUint8ArraysEqual} from 'uint8array-extras';\n *\n * const a = new Uint8Array([1, 2, 3]);\n * const b = new Uint8Array([1, 2, 3]);\n * const c = new Uint8Array([4, 5, 6]);\n *\n * console.log(areUint8ArraysEqual(a, b));\n * //=> true\n *\n * console.log(areUint8ArraysEqual(a, c));\n * //=> false\n * ```\n */\nexport function areUint8ArraysEqual(a: Uint8Array, b: Uint8Array): boolean {\n  assertUint8Array(a);\n  assertUint8Array(b);\n\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let index = 0; index < a.length; index++) {\n    if (a[index] !== b[index]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Convert a `Uint8Array` (containing a UTF-8 string) to a string.\n *\n * Replacement for [`Buffer#toString()`](https://nodejs.org/api/buffer.html#buftostringencoding-start-end).\n * @example\n * ```ts\n * import {uint8ArrayToString} from 'uint8array-extras';\n *\n * const byteArray = new Uint8Array([72, 101, 108, 108, 111]);\n *\n * console.log(uint8ArrayToString(byteArray));\n * //=> 'Hello'\n * ```\n */\nexport function uint8ArrayToString(array: Uint8Array): string {\n  assertUint8Array(array);\n  return cachedTextDecoder().decode(array);\n}\n\nfunction assertString(value: unknown): asserts value is string {\n  if (typeof value !== \"string\") {\n    throw new TypeError(`Expected \\`string\\`, got \\`${typeof value}\\``);\n  }\n}\n\nfunction base64UrlToBase64(base64url: string) {\n  return base64url.replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\");\n}\n\n/**\n * Convert a Base64-encoded or [Base64URL](https://base64.guru/standards/base64url)-encoded string to a `Uint8Array`.\n *\n * Replacement for [`Buffer.from('SGVsbG8=', 'base64')`](https://nodejs.org/api/buffer.html#static-method-bufferfromstring-encoding).\n * @example\n * ```ts\n * import {base64ToUint8Array} from 'uint8array-extras';\n *\n * console.log(base64ToUint8Array('SGVsbG8='));\n * //=> Uint8Array [72, 101, 108, 108, 111]\n * ```\n */\nexport function base64ToUint8Array(base64String: string): Uint8Array {\n  assertString(base64String);\n  return Uint8Array.from(\n    globalThis.atob(base64UrlToBase64(base64String)),\n\n    // biome-ignore lint/style/noNonNullAssertion: we know that the code points exist\n    (x) => x.codePointAt(0)!,\n  );\n}\n\n/**\n * Decode a Base64-encoded or [Base64URL](https://base64.guru/standards/base64url)-encoded string to a string.\n *\n * Replacement for `Buffer.from('SGVsbG8=', 'base64').toString()` and [`atob()`](https://developer.mozilla.org/en-US/docs/Web/API/atob).\n * @example\n * ```ts\n * import {base64ToString} from 'uint8array-extras';\n *\n * console.log(base64ToString('SGVsbG8='));\n * //=> 'Hello'\n * ```\n */\nexport function base64ToString(base64String: string): string {\n  assertString(base64String);\n  return uint8ArrayToString(base64ToUint8Array(base64String));\n}\n\nfunction base64ToBase64Url(base64: string): string {\n  return base64.replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\").replace(/=+$/, \"\");\n}\n// Reference: https://phuoc.ng/collection/this-vs-that/concat-vs-push/\nconst MAX_BLOCK_SIZE = 65_535;\n\nexport function uint8ArrayToBase64(\n  array: Uint8Array,\n  { urlSafe = false } = {},\n): string {\n  assertUint8Array(array);\n\n  let base64: string;\n\n  if (array.length < MAX_BLOCK_SIZE) {\n    // Required as `btoa` and `atob` don't properly support Unicode: https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n    // @ts-expect-error - TS doesn't know about `String#fromCodePoint`\n    base64 = globalThis.btoa(String.fromCodePoint.apply(this, array));\n  } else {\n    base64 = \"\";\n    for (const value of array) {\n      base64 += String.fromCodePoint(value);\n    }\n\n    base64 = globalThis.btoa(base64);\n  }\n\n  return urlSafe ? base64ToBase64Url(base64) : base64;\n}\n\nexport function concatUint8Arrays(\n  arrays: Uint8Array[],\n  totalLength?: number,\n): Uint8Array {\n  if (arrays.length === 0) {\n    return new Uint8Array(0);\n  }\n\n  const calculatedTotalLength =\n    totalLength ??\n    arrays.reduce(\n      (accumulator, currentValue) => accumulator + currentValue.length,\n      0,\n    );\n\n  const returnValue = new Uint8Array(calculatedTotalLength);\n\n  let offset = 0;\n  for (const array of arrays) {\n    assertUint8Array(array);\n    returnValue.set(array, offset);\n    offset += array.length;\n  }\n\n  return returnValue;\n}\n\nexport function compareUint8Arrays(a: Uint8Array, b: Uint8Array): number {\n  assertUint8Array(a);\n  assertUint8Array(b);\n\n  const length = Math.min(a.length, b.length);\n\n  for (let index = 0; index < length; index++) {\n    // biome-ignore lint/style/noNonNullAssertion: we check the length above so the index is always in bounds\n    const diff = a[index]! - b[index]!;\n    if (diff !== 0) {\n      return Math.sign(diff);\n    }\n  }\n\n  // At this point, all the compared elements are equal.\n  // The shorter array should come first if the arrays are of different lengths.\n  return Math.sign(a.length - b.length);\n}\n"],"names":["isFileInstance","data","globalThis","File","isBufferOrStringWithName","isObjectWithKeys","name","isUint8Array","isFileBufferOrStringEqual","input1","input2","lastModified","size","areUint8ArraysEqual","isFileOrUint8Array","extractObjectFiles","files","arguments","length","undefined","push","Array","isArray","entry","Object","keys","map","key","replaceObjectFilesWithUris","uris","shift","console","warn","fromEntries","entries","_ref","value","replaceObjectGatewayUrlsWithSchemes","url","includes","hash","split","concat","replaceGatewayUrlWithScheme","_ref2","async","upload","options","item","every","cleaned","uris_","stringify","form_","FormData","fileNames","form","fileNameToFileMap","Map","i","file","fileName","fileData","rewriteFileNames","extensions","extensionStartIndex","lastIndexOf","substring","fileStartNumber","filepath","uploadWithoutDirectory","has","get","Error","set","append","Blob","metadata","keyvalues","JSON","wrapWithDirectory","fName","encodeURIComponent","buildFormData","platform","detectPlatform","uploadBatch","client","textDecoder","uint8ArrayStringified","assertUint8Array","TypeError","constructor","Uint8Array","prototype","toString","call","a","b","index","uint8ArrayToString","array","TextDecoder","decode","assertString","base64ToString","base64String","from","atob","replaceAll","x","codePointAt","base64ToUint8Array"],"sourceRoot":""}