{"version":3,"file":"static/js/13791.2bd32a3e.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/http-rpc-client-0a079e80.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/zk-connector-fada2157.browser.esm.js"],"sourcesContent":["import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-733a8199.browser.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-f58e7acc.browser.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\nimport { C as Connector } from './connector-05689d68.browser.esm.js';\nimport { H as HttpRpcClient } from './http-rpc-client-0a079e80.browser.esm.js';\nimport { e as isZkSyncChain, f as ENTRYPOINT_ADDRESS } from './utils-f58e7acc.browser.esm.js';\nimport { Signer, ethers, utils, BigNumber } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './url-a45219bd.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport './headers-733a8199.browser.esm.js';\nimport '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport '@thirdweb-dev/sdk';\nimport '@account-abstraction/contracts';\n\nconst DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\nconst EIP712_TX_TYPE = 0x71;\nconst EIP712_TYPES = {\n  Transaction: [{\n    name: \"txType\",\n    type: \"uint256\"\n  }, {\n    name: \"from\",\n    type: \"uint256\"\n  }, {\n    name: \"to\",\n    type: \"uint256\"\n  }, {\n    name: \"gasLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"gasPerPubdataByteLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"maxFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"maxPriorityFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"paymaster\",\n    type: \"uint256\"\n  }, {\n    name: \"nonce\",\n    type: \"uint256\"\n  }, {\n    name: \"value\",\n    type: \"uint256\"\n  }, {\n    name: \"data\",\n    type: \"bytes\"\n  }, {\n    name: \"factoryDeps\",\n    type: \"bytes32[]\"\n  }, {\n    name: \"paymasterInput\",\n    type: \"bytes\"\n  }]\n};\nclass ZkWrappedSigner extends Signer {\n  constructor(signer, httpRpcClient) {\n    super();\n    this.signer = signer;\n    defineReadOnly(this, \"provider\", signer.provider);\n    this.httpRpcClient = httpRpcClient;\n  }\n  async getAddress() {\n    return await this.signer.getAddress();\n  }\n  async signMessage(message) {\n    return await this.signer.signMessage(message);\n  }\n  async signTransaction(transaction) {\n    return await this.signer.signTransaction(transaction);\n  }\n  connect(provider) {\n    return new ZkWrappedSigner(this.signer.connect(provider), this.httpRpcClient);\n  }\n  _signTypedData(domain, types, value) {\n    return this.signer._signTypedData(domain, types, value);\n  }\n  async sendTransaction(transaction) {\n    return await this.sendZkSyncTransaction(transaction);\n  }\n  async sendZkSyncTransaction(_transaction) {\n    let transaction = await this.populateTransaction(_transaction);\n    if (!transaction.chainId) {\n      throw new Error(\"ChainId is required to send a ZkSync transaction\");\n    }\n    if (!this.provider) {\n      throw new Error(\"Provider is required to send a ZkSync transaction\");\n    }\n    const address = await this.getAddress();\n    const gasLimit = ethers.BigNumber.from(transaction.gasLimit || (await this.provider.estimateGas(transaction))).mul(3);\n    const gasPrice = ethers.BigNumber.from(transaction.gasPrice || (await this.provider.getGasPrice())).mul(2);\n    if (!transaction.maxFeePerGas) {\n      transaction.maxFeePerGas = gasPrice;\n    } else {\n      transaction.maxFeePerGas = transaction.maxFeePerGas.mul(2);\n    }\n    if (!transaction.maxPriorityFeePerGas) {\n      transaction.maxPriorityFeePerGas = gasPrice;\n    } else {\n      transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas.mul(2);\n    }\n    transaction = {\n      ...transaction,\n      from: address,\n      gasLimit,\n      gasPrice,\n      chainId: (await this.provider.getNetwork()).chainId,\n      nonce: await this.provider.getTransactionCount(address),\n      type: 113,\n      value: BigInt(0)\n    };\n    const pmDataResult = await this.httpRpcClient?.zkPaymasterData(transaction);\n    transaction.customData = {\n      gasPerPubdata: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      factoryDeps: [],\n      paymasterParams: {\n        paymaster: pmDataResult.paymaster,\n        paymasterInput: pmDataResult.paymasterInput\n      }\n    };\n    const eip712tx = {\n      txType: EIP712_TX_TYPE,\n      from: BigInt(transaction.from || (await this.getAddress())).toString(),\n      to: BigInt(transaction.to || \"0x0\").toString(),\n      gasLimit: transaction.gasLimit ? Number(transaction.gasLimit) : 0,\n      gasPerPubdataByteLimit: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      maxFeePerGas: ethers.BigNumber.from(transaction.maxFeePerGas).toNumber(),\n      maxPriorityFeePerGas: ethers.BigNumber.from(transaction.maxPriorityFeePerGas).toNumber(),\n      paymaster: BigInt(pmDataResult.paymaster).toString(),\n      nonce: ethers.BigNumber.from(transaction.nonce).toNumber(),\n      value: ethers.BigNumber.from(transaction.value).toNumber(),\n      data: transaction.data || \"0x\",\n      factoryDeps: [],\n      paymasterInput: ethers.utils.arrayify(pmDataResult.paymasterInput)\n    };\n    const signature = await this._signTypedData({\n      name: \"zkSync\",\n      version: \"2\",\n      chainId: transaction.chainId\n    }, EIP712_TYPES, eip712tx);\n    const serializedTx = this.serialize(transaction, signature);\n    const zkSignedTx = {\n      from: transaction.from?.toString() || (await this.getAddress()),\n      to: transaction.to?.toString() || \"\",\n      gas: transaction.gasLimit?.toString() || \"\",\n      maxFeePerGas: transaction.maxFeePerGas?.toString() || \"0\",\n      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas?.toString() || \"0\",\n      signedTransaction: serializedTx,\n      paymaster: pmDataResult.paymaster\n    };\n    const broadcastResult = await this.httpRpcClient?.zkBroadcastTransaction(zkSignedTx);\n    const hash = broadcastResult.transactionHash;\n    return await this.provider?.getTransaction(hash);\n  }\n  serialize(transaction, signature) {\n    if (!transaction.customData && transaction.type !== EIP712_TX_TYPE) {\n      return utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n      throw Error(\"Transaction chainId isn't set!\");\n    }\n    function formatNumber(value, name) {\n      const result = utils.stripZeros(BigNumber.from(value).toHexString());\n      if (result.length > 32) {\n        throw new Error(`Invalid length for ${name}!`);\n      }\n      return result;\n    }\n    if (!transaction.from) {\n      throw new Error(\"Explicitly providing `from` field is required for EIP712 transactions!\");\n    }\n    const from = transaction.from;\n    const meta = transaction.customData ?? {};\n    const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(maxPriorityFeePerGas, \"maxPriorityFeePerGas\"), formatNumber(maxFeePerGas, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to ? utils.getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\"];\n    if (signature) {\n      const sig = utils.splitSignature(signature);\n      fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n      fields.push(utils.stripZeros(sig.r));\n      fields.push(utils.stripZeros(sig.s));\n    } else {\n      fields.push(formatNumber(transaction.chainId, \"chainId\"));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    fields.push(formatNumber(transaction.chainId, \"chainId\"));\n    fields.push(utils.getAddress(from));\n\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || DEFAULT_GAS_PER_PUBDATA_LIMIT, \"gasPerPubdata\"));\n    fields.push((meta.factoryDeps ?? []).map(dep => utils.hexlify(dep)));\n    if (meta.customSignature && ethers.utils.arrayify(meta.customSignature).length === 0) {\n      throw new Error(\"Empty signatures are not supported!\");\n    }\n    fields.push(meta.customSignature || \"0x\");\n    if (meta.paymasterParams) {\n      fields.push([meta.paymasterParams.paymaster, ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);\n    } else {\n      fields.push([]);\n    }\n    return utils.hexConcat([[EIP712_TX_TYPE], utils.RLP.encode(fields)]);\n  }\n}\n\nclass ZkSyncConnector extends Connector {\n  constructor(config) {\n    super();\n    _defineProperty(this, \"chainId\", 1);\n    this.config = config;\n  }\n  async connect(args) {\n    this.personalWallet = args.personalWallet;\n    this.chainId = await (await this.personalWallet.getSigner()).getChainId();\n    if (!(await isZkSyncChain(this.chainId))) {\n      throw new Error(\"Invalid zksync chain id\");\n    }\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = this.config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    this.httpRpcClient = new HttpRpcClient(bundlerUrl, entryPointAddress, this.chainId, this.config.clientId, this.config.secretKey);\n    return this.getAddress();\n  }\n  disconnect() {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async getSigner() {\n    if (!this.personalWallet) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return new ZkWrappedSigner(await this.personalWallet.getSigner(), this.httpRpcClient);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  switchChain(chainId) {\n    throw new Error(\"Method not implemented.\");\n  }\n  isConnected() {\n    return Promise.resolve(!!this.personalWallet);\n  }\n  setupListeners() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getProvider() {\n    if (!this.getSigner()) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n}\n\nexport { ZkSyncConnector };\n"],"names":["async","hexlifyUserOp","op","userOp","utils","Object","keys","map","key","val","startsWith","reduce","set","_ref","k","v","getUserOpHashV06","entryPoint","chainId","hashedUserOp","sender","nonce","initCodeHash","initCode","callDataHash","callData","callGasLimit","verificationGasLimit","preVerificationGas","maxFeePerGas","maxPriorityFeePerGas","paymasterAndDataHash","paymasterAndData","encoded","encode","components","type","name","userOpHash","enc","randomNonce","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","toString","length","BigNumber","from","DEBUG","HttpRpcClient","constructor","bundlerUrl","entryPointAddress","clientId","secretKey","this","headers","isTwUrl","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","concat","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","userOpJsonRpcProvider","providers","url","initializing","validateChainId","isZkSyncChain","chain","send","bundlerChain","parseInt","Error","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","data","verificationGas","add","MANAGED_ACCOUNT_GAS_BUFFER","getUserOperationGasPrice","getUserOperationReceipt","zkPaymasterData","transactionInput","gas","gasLimit","zkBroadcastTransaction","method","DEFAULT_GAS_PER_PUBDATA_LIMIT","EIP712_TYPES","Transaction","ZkWrappedSigner","Signer","signer","httpRpcClient","super","defineReadOnly","provider","getAddress","signMessage","message","signTransaction","transaction","connect","_signTypedData","domain","types","value","sendTransaction","sendZkSyncTransaction","_transaction","_this$httpRpcClient","_transaction$from","_transaction$to","_transaction$gasLimit","_transaction$maxFeePe","_transaction$maxPrior","_this$httpRpcClient2","_this$provider","populateTransaction","address","ethers","estimateGas","mul","gasPrice","getGasPrice","getNetwork","getTransactionCount","pmDataResult","customData","gasPerPubdata","factoryDeps","paymasterParams","paymaster","paymasterInput","eip712tx","txType","to","Number","gasPerPubdataByteLimit","toNumber","signature","version","serializedTx","serialize","zkSignedTx","signedTransaction","hash","transactionHash","getTransaction","_transaction$customDa","_meta$factoryDeps","formatNumber","result","toHexString","meta","fields","sig","push","recoveryParam","r","s","dep","customSignature","ZkSyncConnector","Connector","config","_defineProperty","args","personalWallet","getSigner","getChainId","ENTRYPOINT_ADDRESS","disconnect","switchChain","isConnected","Promise","resolve","setupListeners","updateChains","chains","getProvider"],"sourceRoot":""}