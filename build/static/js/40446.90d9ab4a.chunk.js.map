{"version":3,"file":"static/js/40446.90d9ab4a.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await this._storage.setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await this._setRequestedChainsIds([]);\n      await this._storage.removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: this._provider\n      });\n    });\n    this._storage = config.options.storage;\n    this._createProvider();\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n    this.showWalletConnectModal = this.options.qrcode !== false;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await this._storage.getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      if (provider.session) {\n        await provider.disconnect();\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await this._setRequestedChainsIds(this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        this._removeListeners();\n        await this._setRequestedChainsIds([]);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      await this._createProvider();\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!this._provider) {\n      throw new Error(\"No provider found.\");\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await this._isChainsStale();\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = this._getNamespaceChainsIds();\n      const namespaceMethods = this._getNamespaceMethods();\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await this._getRequestedChainsIds();\n        requestedChains.push(chainId);\n        await this._setRequestedChainsIds(requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async _createProvider() {\n    if (!this._initProviderPromise && \"object\" !== \"undefined\") {\n      this._initProviderPromise = this.initProvider();\n    }\n    return this._initProviderPromise;\n  }\n  async initProvider() {\n    const {\n      default: EthereumProvider,\n      OPTIONAL_EVENTS,\n      OPTIONAL_METHODS\n    } = await import('@walletconnect/ethereum-provider');\n    const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      return chainId;\n    });\n    if (defaultChain) {\n      // EthereumProvider populates & deduplicates required methods and events internally\n      this._provider = await EthereumProvider.init({\n        showQrModal: this.showWalletConnectModal,\n        projectId: this.options.projectId,\n        optionalMethods: OPTIONAL_METHODS,\n        optionalEvents: OPTIONAL_EVENTS,\n        chains: [defaultChain],\n        optionalChains: optionalChains,\n        metadata: {\n          name: this.options.dappMetadata.name,\n          description: this.options.dappMetadata.description || \"\",\n          url: this.options.dappMetadata.url,\n          icons: [this.options.dappMetadata.logoUrl || \"\"]\n        },\n        rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n        ])),\n        qrModalOptions: this.options.qrModalOptions\n      });\n    }\n  }\n\n  /**\n   * Checks if the target chains match the chains that were\n   * initially requested by the connector for the WalletConnect session.\n   * If there is a mismatch, this means that the chains on the connector\n   * are considered stale, and need to be revalidated at a later point (via\n   * connection).\n   *\n   * There may be a scenario where a dapp adds a chain to the\n   * connector later on, however, this chain will not have been approved or rejected\n   * by the wallet. In this case, the chain is considered stale.\n   *\n   * There are exceptions however:\n   * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n   *    then the chain is not considered stale.\n   * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n   *    not considered stale.\n   *\n   * For the above cases, chain validation occurs dynamically when the user\n   * attempts to switch chain.\n   *\n   * Also check that dapp supports at least 1 chain from previously approved session.\n   */\n  async _isChainsStale() {\n    const namespaceMethods = this._getNamespaceMethods();\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      return false;\n    }\n    if (!this.options.isNewChainsStale) {\n      return false;\n    }\n    const requestedChains = await this._getRequestedChainsIds();\n    const connectorChains = this.filteredChains.map(_ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      return chainId;\n    });\n    const namespaceChains = this._getNamespaceChainsIds();\n    if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n      return false;\n    }\n    return !connectorChains.every(id => requestedChains.includes(id));\n  }\n  async setupListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._removeListeners();\n    this._provider.on(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.on(\"chainChanged\", this.onChainChanged);\n    this._provider.on(\"disconnect\", this.onDisconnect);\n    this._provider.on(\"session_delete\", this.onDisconnect);\n    this._provider.on(\"display_uri\", this.onDisplayUri);\n    this._provider.on(\"connect\", this.onConnect);\n  }\n  _removeListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.removeListener(\"chainChanged\", this.onChainChanged);\n    this._provider.removeListener(\"disconnect\", this.onDisconnect);\n    this._provider.removeListener(\"session_delete\", this.onDisconnect);\n    this._provider.removeListener(\"display_uri\", this.onDisplayUri);\n    this._provider.removeListener(\"connect\", this.onConnect);\n  }\n  async _setRequestedChainsIds(chains) {\n    await this._storage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n  }\n  async _getRequestedChainsIds() {\n    const data = await this._storage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  _getNamespaceChainsIds() {\n    if (!this._provider) {\n      return [];\n    }\n    const chainIds = this._provider.session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n  }\n  _getNamespaceMethods() {\n    if (!this._provider) {\n      return [];\n    }\n    const methods = this._provider.session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n  }\n}\n\nexport { WalletConnectConnector };\n"],"names":["WagmiConnector","EventEmitter","constructor","_ref","chains","defaultChains","options","super","this","getBlockExplorerUrls","chain","_chain$explorers$map","_chain$explorers","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","concat","JSON","stringify","ProviderRpcError","AddChainError","arguments","_defineProperty","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","chainsToRequest","Set","NAMESPACE","REQUESTED_CHAINS_KEY","ADD_ETH_CHAIN_METHOD","LAST_USED_CHAIN_ID","WalletConnectConnector","config","isNewChainsStale","walletIds","walletConnect","accounts","emit","account","utils","async","id","unsupported","_storage","setItem","String","_setRequestedChainsIds","removeItem","uri","type","provider","_provider","storage","_createProvider","filteredChains","filter","c","has","showWalletConnectModal","qrcode","connect","chainIdP","pairingTopic","targetChainId","lastUsedChainIdStr","getItem","lastUsedChainId","parseInt","_this$filteredChains$","getProvider","setupListeners","session","disconnect","optionalChains","optionalChain","enable","getChainId","providers","error","test","cleanup","localStorage","key","startsWith","_removeListeners","disconnectProvider","getAccount","switchChain","getSigner","Promise","all","isAuthorized","isChainsStale","_isChainsStale","find","chain_","namespaceChains","_getNamespaceChainsIds","namespaceMethods","_getNamespaceMethods","includes","firstExplorer","blockExplorerUrls","request","method","params","chainName","name","nativeCurrency","rpcUrls","getValidPublicRPCUrl","requestedChains","_getRequestedChainsIds","push","_initProviderPromise","initProvider","default","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","defaultChain","_ref2","init","showQrModal","projectId","optionalMethods","optionalEvents","metadata","dappMetadata","description","icons","logoUrl","rpcMap","Object","fromEntries","rpc","qrModalOptions","connectorChains","_ref3","every","on","onAccountsChanged","onChainChanged","onDisconnect","onDisplayUri","onConnect","removeListener","parse","_this$_provider$sessi","chainIds","namespaces","split","_this$_provider$sessi2","methods"],"sourceRoot":""}