{"version":3,"file":"static/js/11843.776a6ff9.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/QueryParams-32a56510.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/assertEnabled-d1700f0b.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-roles-71988d2e.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/marketplacev3-ef469d89.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7f76f677.browser.esm.js"],"sourcesContent":["import { a as CommonNFTOutput, C as CommonNFTInput } from './setErc20Allowance-7f76f677.browser.esm.js';\nimport { utils, BigNumber, Contract } from 'ethers';\nimport 'zod';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = /* @__PURE__ */(() => utils.arrayify(\"0x80ac58cd\"))();\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = /* @__PURE__ */(() => utils.arrayify(\"0xd9b67a26\"))();\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  // check for base64 encoded JSON\n  if (tokenUri.startsWith(\"data:application/json;base64\") && typeof Buffer !== \"undefined\") {\n    const base64 = tokenUri.split(\",\")[1];\n    const jsonMetadata = JSON.parse(Buffer.from(base64, \"base64\").toString(\"utf-8\"));\n    return CommonNFTOutput.parse({\n      ...jsonMetadata,\n      id: BigNumber.from(tokenId).toString(),\n      uri: tokenUri\n    });\n  }\n  // handle dynamic id URIs (2 possible formats)\n  const parsedUri = tokenUri.replace(\"{id}\", utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(`failed to get token metadata: ${JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      })} -- falling back to default metadata`);\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return CommonNFTOutput.parse({\n    ...jsonMetadata,\n    id: BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress - the contract address\n * @param provider - the provider to use\n * @param tokenId - the token id\n * @param storage - the storage to use\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const ERC165MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n  const erc165 = new Contract(contractAddress, ERC165MetadataAbi, provider);\n  const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n  if (isERC721) {\n    const ERC721MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json')).default;\n    const erc721 = new Contract(contractAddress, ERC721MetadataAbi, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const ERC1155MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json')).default;\n    const erc1155 = new Contract(contractAddress, ERC1155MetadataAbi, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    // no uri found, return fallback metadata\n    return CommonNFTOutput.parse({\n      ...FALLBACK_METADATA,\n      id: BigNumber.from(tokenId).toString(),\n      uri: \"\"\n    });\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata - the metadata to upload\n * @param storage - the storage to use\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas - the metadata to upload\n * @param storage - the storage to use\n * @param startNumber - the number to start the file names at\n * @param contractAddress - the contract address\n * @param signerAddress - the signer address\n * @param options - options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options?.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * @internal\n */\nconst DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * Pagination Parameters\n * @public\n */\n\nexport { DEFAULT_QUERY_ALL_COUNT as D, FALLBACK_METADATA as F, InterfaceId_IERC721 as I, InterfaceId_IERC1155 as a, uploadOrExtractURI as b, fetchTokenMetadataForContract as c, fetchTokenMetadata as f, getBaseUriFromBatch as g, uploadOrExtractURIs as u };\n","import { BigNumber } from 'ethers';\nimport { z } from 'zod';\nimport { x as ExtensionNotImplementedError } from './index-33cd3415.browser.esm.js';\n\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace - The namespace to check\n * @param feature - The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\nexport { EndDateSchema as E, RawDateSchema as R, StartDateSchema as S, assertEnabled as a };\n","/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import invariant from 'tiny-invariant';\nimport { d4 as FEATURE_PERMISSIONS, H as getRoleHash, aL as resolveAddress, o as MissingRoleError } from './index-33cd3415.browser.esm.js';\nimport { h as hasFunction } from './contract-appuri-5c40af52.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    const entries = Object.entries(this.roles);\n    (await Promise.all(entries.map(_ref => {\n      let [, role] = _ref;\n      return this.get(role);\n    }))).forEach((item, index) => roles[entries[index][1]] = item);\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async (rolesWithAddresses, actingAddress) => {\n    // if we are removing multiple roles, we need to allways remove the connected wallet address *last*\n    // this is so we don't renounce (i.e.)  admin role first and then try to revoke someone else's (i.e.) admin role after (which will revert the entire txn because we are no longer an admin)\n    // if it is explicitly passed in (i.e. for estimation) we use that value, otherwise we get it from the connected signer\n    const connectedWalletAddress = actingAddress || (await this.contractWrapper.getSignerAddress());\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || [])]);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n\n      // if we're removing more than one address we have to make sure we always remove the *connected* (acting) wallet address first\n      // otherwise we'll revoke the connected wallet address and then try to revoke someone else's address which will revert the entire txn\n      if (toRemove.length > 1) {\n        const index = toRemove.indexOf(connectedWalletAddress);\n        if (index > -1) {\n          toRemove.splice(index, 1);\n          toRemove.push(connectedWalletAddress);\n        }\n      }\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        const revokeFunctionNames = await Promise.all(toRemove.map(address => this.getRevokeRoleFunctionName(address)));\n        revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\nexport { ContractRoles as C };\n","import { a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents, d as detectContractFeature } from './contract-appuri-5c40af52.browser.esm.js';\nimport { dH as MARKETPLACE_CONTRACT_ROLES, dA as FEATURE_DIRECT_LISTINGS, dB as FEATURE_ENGLISH_AUCTIONS, dC as FEATURE_OFFERS, cs as ContractWrapper, bj as AbiSchema, b$ as MarketplaceContractSchema } from './index-33cd3415.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers } from './marketplacev3-offers-ce1f096b.browser.esm.js';\nimport { T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport 'ethers';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './cleanCurrencyAddress-ded19cfe.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport './marketplace-e3129e2f.browser.esm.js';\nimport './QueryParams-32a56510.browser.esm.js';\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @internal\n * @deprecated use contract.directListings / contract.auctions / contract.offers instead\n */\nclass MarketplaceV3 {\n  static contractRoles = MARKETPLACE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, MarketplaceContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, MarketplaceV3.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\nexport { MarketplaceV3 };\n","import { cx as BigNumberTransformSchema, cy as FileOrBufferOrStringSchema, cz as HexColor, cs as ContractWrapper } from './index-33cd3415.browser.esm.js';\nimport { z } from 'zod';\nimport { i as isNativeToken } from './fetchCurrencyValue-32d08b05.browser.esm.js';\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(z.array(PropertiesInput)).transform(i => i.flat()), z.array(PropertiesInput), PropertiesInput]).optional().nullable())();\n\n/**\n * @internal\n */\nconst BasicNFTInput = /* @__PURE__ */(() => z.object({\n  name: z.union([z.string(), z.number()]).optional().nullable(),\n  description: z.string().nullable().optional().nullable(),\n  image: FileOrBufferOrStringSchema.nullable().optional(),\n  animation_url: FileOrBufferOrStringSchema.optional().nullable()\n}))();\n\n/**\n * @internal\n */\nconst CommonNFTInput = /* @__PURE__ */(() => BasicNFTInput.extend({\n  external_url: FileOrBufferOrStringSchema.nullable().optional(),\n  background_color: HexColor.optional().nullable(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput\n}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst NFTInputOrUriSchema = /* @__PURE__ */(() => z.union([CommonNFTInput, z.string()]))();\n\n/**\n * @internal\n */\nconst CommonNFTOutput = /* @__PURE__ */(() => CommonNFTInput.extend({\n  id: z.string(),\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n  animation_url: z.string().nullable().optional()\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport { BasicNFTInput as B, CommonNFTInput as C, NFTInputOrUriSchema as N, CommonNFTOutput as a, setErc20Allowance as s };\n"],"names":["InterfaceId_IERC721","utils","InterfaceId_IERC1155","FALLBACK_METADATA","name","async","fetchTokenMetadata","tokenId","tokenUri","storage","startsWith","Buffer","base64","split","jsonMetadata","JSON","parse","from","toString","CommonNFTOutput","id","BigNumber","uri","parsedUri","replace","toHexString","slice","downloadJSON","err","unparsedTokenIdUri","e","console","warn","concat","stringify","fetchTokenMetadataForContract","contractAddress","provider","ERC165MetadataAbi","default","erc165","Contract","isERC721","isERC1155","Promise","all","supportsInterface","ERC721MetadataAbi","erc721","tokenURI","Error","ERC1155MetadataAbi","erc1155","uploadOrExtractURI","metadata","upload","CommonNFTInput","uploadOrExtractURIs","metadatas","startNumber","options","undefined","find","m","isUriList","isMetadataList","uploadBatch","map","rewriteFileNames","fileStartNumber","onProgress","getBaseUriFromBatch","uris","baseUri","substring","lastIndexOf","i","length","DEFAULT_QUERY_ALL_COUNT","RawDateSchema","z","union","date","transform","Math","floor","getTime","number","StartDateSchema","Date","EndDateSchema","now","assertEnabled","namespace","feature","ExtensionNotImplementedError","ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","ContractRoles","roles","_defineProperty","FEATURE_PERMISSIONS","buildTransactionFunction","rolesWithAddresses","actingAddress","connectedWalletAddress","getSignerAddress","contractEncoder","ContractEncoder","Object","keys","invariant","every","role","includes","currentRoles","getAll","encoded","sortedRoles","sort","_rolesWithAddresses$r","_currentRoles$role","addresses","currentAddresses","addressOrEns","resolveAddress","toAdd","filter","address","toRemove","index","indexOf","splice","push","forEach","encode","getRoleHash","getRevokeRoleFunctionName","revokeFunctionName","Transaction","fromContractWrapper","method","args","resolvedAddress","entries","_ref","get","item","wrapper","hasFunction","roleHash","count","read","toNumber","Array","verify","members","a","toLowerCase","MissingRoleError","signerAddress","MarketplaceV3","directListings","detectDirectListings","FEATURE_DIRECT_LISTINGS","englishAuctions","detectEnglishAuctions","FEATURE_ENGLISH_AUCTIONS","offers","detectOffers","FEATURE_OFFERS","chainId","_chainId","network","arguments","abi","ContractWrapper","AbiSchema","ContractMetadata","MarketplaceContractSchema","app","ContractAppURI","contractRoles","encoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","prepare","overrides","call","functionName","detectContractFeature","MarketplaceV3DirectListings","MarketplaceV3EnglishAuctions","MarketplaceV3Offers","MARKETPLACE_CONTRACT_ROLES","PropertiesInput","object","catchall","BigNumberTransformSchema","unknown","OptionalPropertiesInput","array","flat","optional","nullable","BasicNFTInput","string","description","image","FileOrBufferOrStringSchema","animation_url","extend","external_url","background_color","HexColor","properties","attributes","NFTInputOrUriSchema","setErc20Allowance","contractToApprove","value","currencyAddress","isNativeToken","ERC20Abi","signer","getSigner","getProvider","erc20","owner","spender","lt","sendTransaction"],"sourceRoot":""}