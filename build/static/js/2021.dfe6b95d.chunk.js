"use strict";(self.webpackChunkbru_finance=self.webpackChunkbru_finance||[]).push([[2021],{2021:(t,a,r)=>{r.d(a,{E:()=>C,a:()=>b});var e=r(54705),i=r(73594),n=r(2776),s=r(76328),c=r(63112),o=r(78344),p=r(53053),h=r(81274),l=r(14633),m=r(3404),u=r(49013),d=r(26252),W=r(17086);class g{constructor(t,a){(0,e.A)(this,"featureName",c.cD.name),(0,e.A)(this,"tokens",(0,h.f)((async t=>h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await this.erc20.normalizeAmount(t)]})))),(0,e.A)(this,"from",(0,h.f)((async(t,a)=>h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnFrom",args:await Promise.all([(0,c.aM)(t),this.erc20.normalizeAmount(a)])})))),this.erc20=t,this.contractWrapper=a}}class f{constructor(t,a,r){(0,e.A)(this,"featureName",c.cE.name),(0,e.A)(this,"to",(0,h.f)((async(t,a,r)=>{const e=await this.erc20.normalizeAmount(a);return await this.conditions.getClaimTransaction(t,e,r)}))),this.erc20=t,this.contractWrapper=a,this.storage=r;const i=new p.C(this.contractWrapper,c.bh,this.storage);this.conditions=new l.D(this.contractWrapper,i,this.storage)}}class w{constructor(t,a,r){this.erc20=t,this.contractWrapper=a,this.storage=r,this.claim=new f(this.erc20,this.contractWrapper,this.storage)}}class y{constructor(t,a){(0,e.A)(this,"featureName",c.cF.name),(0,e.A)(this,"to",(0,h.f)((async t=>{const a=new s.C(this.contractWrapper),r=(await Promise.all(t.map((t=>Promise.all([(0,c.aM)(t.toAddress),this.erc20.normalizeAmount(t.amount)]))))).map((t=>{let[r,e]=t;return a.encode("mintTo",[r,e])}));return h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})}))),this.erc20=t,this.contractWrapper=a}}class A{constructor(t,a){(0,e.A)(this,"featureName",c.cG.name),(0,e.A)(this,"to",(0,h.f)((async(t,a)=>await this.getMintTransaction(t,a)))),this.erc20=t,this.contractWrapper=a,this.batch=this.detectErc20BatchMintable()}async getMintTransaction(t,a){return h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:await Promise.all([(0,c.aM)(t),this.erc20.normalizeAmount(a)])})}detectErc20BatchMintable(){if((0,p.d)(this.contractWrapper,"ERC20BatchMintable"))return new y(this.erc20,this.contractWrapper)}}class b{constructor(t,a){(0,e.A)(this,"featureName",c.cH.name),(0,e.A)(this,"mint",(0,h.f)((async t=>{const a=t.payload,r=t.signature,[e,i]=await Promise.all([this.mapPayloadToContractStruct(a),this.contractWrapper.getCallOverrides()]);return await(0,d.s)(this.contractWrapper,n.gH.from(e.price),a.currencyAddress,i),h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,r],overrides:i})}))),(0,e.A)(this,"mintBatch",(0,h.f)((async t=>{const a=await Promise.all(t.map((t=>this.mapPayloadToContractStruct(t.payload)))),r=t.map(((t,r)=>{const e=a[r],i=t.signature,s=t.payload.price;if(n.gH.from(s).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:e,signature:i}})),e=new s.C(this.contractWrapper),i=r.map((t=>e.encode("mintWithSignature",[t.message,t.signature])));return h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[i]})}))),this.contractWrapper=t,this.roles=a}async verify(t){const a=t.payload,r=t.signature,e=await this.mapPayloadToContractStruct(a);return(await this.contractWrapper.read("verify",[e,r]))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){var a;await(null===(a=this.roles)||void 0===a?void 0:a.verify(["minter"],await this.contractWrapper.getSignerAddress()));const[r,e,i]=await Promise.all([this.contractWrapper.getChainID(),this.contractWrapper.read("name",[]),Promise.all(t.map((t=>W.S.parseAsync(t))))]),n=this.contractWrapper.getSigner();(0,m.A)(n,"No signer available");const s=await Promise.all(i.map((t=>W.n.parseAsync(t)))),c=await Promise.all(s.map((t=>this.mapPayloadToContractStruct(t)))),o=await Promise.all(c.map((t=>this.contractWrapper.signTypedData(n,{name:e,version:"1",chainId:r,verifyingContract:this.contractWrapper.address},{MintRequest:W.M},t))));return i.map(((t,a)=>({payload:s[a],signature:o[a].toString()})))}async mapPayloadToContractStruct(t){const[a,r]=await Promise.all([(0,u.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress),this.contractWrapper.read("decimals",[])]),e=i.parseUnits(t.quantity,r);return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:e,price:a,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid}}}class C{get chainId(){return this._chainId}constructor(t,a,r){(0,e.A)(this,"featureName",c.cI.name),(0,e.A)(this,"transfer",(0,h.f)((async(t,a)=>h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transfer",args:await Promise.all([(0,c.aM)(t),this.normalizeAmount(a)])})))),(0,e.A)(this,"transferFrom",(0,h.f)((async(t,a,r)=>h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom",args:await Promise.all([(0,c.aM)(t),(0,c.aM)(a),this.normalizeAmount(r)])})))),(0,e.A)(this,"setAllowance",(0,h.f)((async(t,a)=>h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:await Promise.all([(0,c.aM)(t),this.normalizeAmount(a)])})))),(0,e.A)(this,"transferBatch",(0,h.f)((async t=>{const a=new s.C(this.contractWrapper),r=(await Promise.all(t.map((t=>Promise.all([this.normalizeAmount(t.amount),(0,c.aM)(t.toAddress)]))))).map((t=>{let[r,e]=t;return a.encode("transfer",[e,r])}));return h.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})}))),(0,e.A)(this,"mint",(0,h.f)((async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)))),(0,e.A)(this,"mintTo",(0,h.f)((async(t,a)=>(0,o.a)(this.mintable,c.cG).to.prepare(t,a)))),(0,e.A)(this,"mintBatchTo",(0,h.f)((async t=>{var a;return(0,o.a)(null===(a=this.mintable)||void 0===a?void 0:a.batch,c.cF).to.prepare(t)}))),(0,e.A)(this,"burn",(0,h.f)((async t=>(0,o.a)(this.burnable,c.cD).tokens.prepare(t)))),(0,e.A)(this,"burnFrom",(0,h.f)((async(t,a)=>(0,o.a)(this.burnable,c.cD).from.prepare(t,a)))),(0,e.A)(this,"claim",(0,h.f)((async(t,a)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,a)))),(0,e.A)(this,"claimTo",(0,h.f)((async(t,a,r)=>{var e;return(0,o.a)(null===(e=this.droppable)||void 0===e?void 0:e.claim,c.cE).to.prepare(t,a,r)}))),this.contractWrapper=t,this.storage=a,this.mintable=this.detectErc20Mintable(),this.burnable=this.detectErc20Burnable(),this.droppable=this.detectErc20Droppable(),this.signatureMintable=this.detectErc20SignatureMintable(),this._chainId=r}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return await(0,s.f)(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.read("balanceOf",[await(0,c.aM)(t)]))}async totalSupply(){return await this.getValue(await this.contractWrapper.read("totalSupply",[]))}async allowance(t){const[a,r]=await Promise.all([this.contractWrapper.getSignerAddress(),(0,c.aM)(t)]);return await this.allowanceOf(a,r)}async allowanceOf(t,a){const r=await Promise.all([(0,c.aM)(t),(0,c.aM)(a)]);return await this.getValue(await this.contractWrapper.read("allowance",r))}async getMintTransaction(t,a){return(0,o.a)(this.mintable,c.cG).getMintTransaction(t,a)}get claimConditions(){var t;return(0,o.a)(null===(t=this.droppable)||void 0===t?void 0:t.claim,c.cE).conditions}get signature(){return(0,o.a)(this.signatureMintable,c.cH)}async normalizeAmount(t){return async function(t,a){const r=await t.read("decimals",[]);return i.parseUnits(c.cw.parse(a),r)}(this.contractWrapper,t)}async getValue(t){return await(0,s.a)(this.contractWrapper.getProvider(),this.getAddress(),n.gH.from(t))}detectErc20Mintable(){if((0,p.d)(this.contractWrapper,"ERC20"))return new A(this,this.contractWrapper)}detectErc20Burnable(){if((0,p.d)(this.contractWrapper,"ERC20Burnable"))return new g(this,this.contractWrapper)}detectErc20Droppable(){if((0,p.d)(this.contractWrapper,"ERC20ClaimConditionsV1")||(0,p.d)(this.contractWrapper,"ERC20ClaimConditionsV2")||(0,p.d)(this.contractWrapper,"ERC20ClaimPhasesV1")||(0,p.d)(this.contractWrapper,"ERC20ClaimPhasesV2"))return new w(this,this.contractWrapper,this.storage)}detectErc20SignatureMintable(){if((0,p.d)(this.contractWrapper,"ERC20SignatureMintable"))return new b(this.contractWrapper)}}}}]);
//# sourceMappingURL=2021.dfe6b95d.chunk.js.map