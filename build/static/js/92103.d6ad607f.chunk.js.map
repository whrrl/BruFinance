{"version":3,"file":"static/js/92103.d6ad607f.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-roles-f2374202.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/split-8225b30b.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import invariant from 'tiny-invariant';\nimport { d1 as FEATURE_PERMISSIONS, H as getRoleHash, aM as resolveAddress, o as MissingRoleError } from './index-b1c63c76.browser.esm.js';\nimport { h as hasFunction } from './contract-appuri-a972e875.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-3e336264.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-18b9c15d.browser.esm.js';\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    const entries = Object.entries(this.roles);\n    (await Promise.all(entries.map(_ref => {\n      let [, role] = _ref;\n      return this.get(role);\n    }))).forEach((item, index) => roles[entries[index][1]] = item);\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async (rolesWithAddresses, actingAddress) => {\n    // if we are removing multiple roles, we need to allways remove the connected wallet address *last*\n    // this is so we don't renounce (i.e.)  admin role first and then try to revoke someone else's (i.e.) admin role after (which will revert the entire txn because we are no longer an admin)\n    // if it is explicitly passed in (i.e. for estimation) we use that value, otherwise we get it from the connected signer\n    const connectedWalletAddress = actingAddress || (await this.contractWrapper.getSignerAddress());\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || [])]);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n\n      // if we're removing more than one address we have to make sure we always remove the *connected* (acting) wallet address first\n      // otherwise we'll revoke the connected wallet address and then try to revoke someone else's address which will revert the entire txn\n      if (toRemove.length > 1) {\n        const index = toRemove.indexOf(connectedWalletAddress);\n        if (index > -1) {\n          toRemove.splice(index, 1);\n          toRemove.push(connectedWalletAddress);\n        }\n      }\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        const revokeFunctionNames = await Promise.all(toRemove.map(address => this.getRevokeRoleFunctionName(address)));\n        revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\nexport { ContractRoles as C };\n","import { BigNumber, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue } from './fetchCurrencyValue-18b9c15d.browser.esm.js';\nimport { dJ as ADMIN_ROLE, cs as ContractWrapper, bk as AbiSchema, c7 as SplitsContractSchema, aM as resolveAddress } from './index-b1c63c76.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-3e336264.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-a972e875.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-f2374202.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"names":["ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","ContractRoles","roles","_defineProperty","FEATURE_PERMISSIONS","name","buildTransactionFunction","async","rolesWithAddresses","actingAddress","connectedWalletAddress","getSignerAddress","contractEncoder","ContractEncoder","Object","keys","invariant","length","every","role","includes","currentRoles","getAll","encoded","sortedRoles","sort","i","_rolesWithAddresses$r","_currentRoles$role","addresses","currentAddresses","Promise","all","map","addressOrEns","resolveAddress","toAdd","filter","address","toRemove","index","indexOf","splice","push","forEach","encode","getRoleHash","getRevokeRoleFunctionName","revokeFunctionName","Transaction","fromContractWrapper","method","args","concat","resolvedAddress","entries","_ref","get","item","wrapper","hasFunction","roleHash","count","read","toNumber","Array","from","Error","verify","members","a","toLowerCase","MissingRoleError","signerAddress","Split","chainId","_chainId","network","storage","walletAddress","tokenAddress","options","arguments","undefined","abi","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","SplitsContractSchema","app","ContractAppURI","contractRoles","encoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","getAllRecipients","recipients","BigNumber","totalRecipients","lt","recipientAddress","getRecipientSplitPercentage","add","err","balanceOfAllRecipients","balances","recipient","balanceOf","balanceOfTokenAllRecipients","resolvedToken","balanceOfToken","walletBalance","totalReleased","getProvider","getBalance","totalReceived","_pendingPayment","resolvedWallet","ERC20Abi","default","erc20","Contract","alreadyReleased","value","fetchCurrencyValue","totalShares","walletsShares","splitPercentage","mul","div","sub","prepare","overrides","call","functionName","ADMIN_ROLE"],"sourceRoot":""}