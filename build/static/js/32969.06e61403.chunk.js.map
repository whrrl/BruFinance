{"version":3,"file":"static/js/32969.06e61403.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/utils/signatures/helpers/parseTypedData.ts","../node_modules/thirdweb/src/wallets/utils/chains.ts","../node_modules/thirdweb/src/wallets/utils/defaultDappMetadata.ts","../node_modules/thirdweb/src/wallets/utils/normalizeChainId.ts","../node_modules/thirdweb/node_modules/viem/utils/stringify.ts","../node_modules/thirdweb/node_modules/viem/errors/request.ts","../node_modules/thirdweb/node_modules/viem/errors/rpc.ts","../node_modules/thirdweb/src/wallets/wallet-connect/constants.ts","../node_modules/thirdweb/src/wallets/wallet-connect/controller.ts","../node_modules/thirdweb/node_modules/viem/utils/regex.ts","../node_modules/thirdweb/node_modules/viem/utils/typedData.ts"],"sourcesContent":["import type { TypedData } from \"abitype\";\nimport type { TypedDataDefinition } from \"viem\";\nimport { type Hex, hexToNumber, isHex } from \"../../encoding/hex.js\";\n\ntype UnknownDomain = unknown & { chainId?: unknown }; // TODO: create our own typed data types so this is cleaner\ntype HexDomain = unknown & { chainId: Hex }; // TODO: create our own typed data types so this is cleaner\n\n/**\n * @internal\n */\nexport function parseTypedData<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData,\n>(\n  typedData: TypedDataDefinition<typedData, primaryType>,\n): TypedDataDefinition<typedData, primaryType> {\n  const domain = typedData.domain as UnknownDomain;\n  if (domain?.chainId !== undefined && isHex(domain.chainId)) {\n    typedData.domain = {\n      ...(typedData.domain as HexDomain),\n      chainId: hexToNumber((typedData.domain as unknown as HexDomain).chainId),\n    } as unknown as TypedDataDefinition<typedData, primaryType>[\"domain\"];\n  }\n  return typedData;\n}\n","import type { ChainMetadata } from \"../../chains/types.js\";\n\n// TODO - move this to chains subfolder\n\n/**\n * Remove client id from RPC url for given chain\n * @internal\n */\nexport function getValidPublicRPCUrl(chain: ChainMetadata) {\n  return getValidChainRPCs(chain).map((rpc) => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\n// TODO - move this to chains/\n/**\n * Get valid RPCs for given chain\n * @internal\n */\nfunction getValidChainRPCs(\n  chain: Pick<ChainMetadata, \"rpc\" | \"chainId\">,\n  clientId?: string,\n  mode: \"http\" | \"ws\" = \"http\",\n): string[] {\n  const processedRPCs: string[] = [];\n\n  for (const rpc of chain.rpc) {\n    // exclude RPC if mode mismatch\n    if (mode === \"http\" && !rpc.startsWith(\"http\")) {\n      continue;\n    }\n\n    if (mode === \"ws\" && !rpc.startsWith(\"ws\")) {\n      continue;\n    }\n\n    // Replace API_KEY placeholder with value\n    if (rpc.includes(\"${THIRDWEB_API_KEY}\")) {\n      if (clientId) {\n        processedRPCs.push(\n          rpc.replace(\"${THIRDWEB_API_KEY}\", clientId) +\n            (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis\n              ? // @ts-expect-error\n                `/?bundleId=${globalThis.APP_BUNDLE_ID}`\n              : \"\"),\n        );\n      } else {\n        // if no client id, let it through with empty string\n        // if secretKey is present, it will be used in header\n        // if none are passed, will have reduced access\n        processedRPCs.push(rpc.replace(\"${THIRDWEB_API_KEY}\", \"\"));\n      }\n    }\n\n    // exclude RPCs with unknown placeholder\n    else if (rpc.includes(\"${\")) {\n      // do nothing (just don't add it to the list)\n    }\n\n    // add as is\n    else {\n      processedRPCs.push(rpc);\n    }\n  }\n\n  if (processedRPCs.length === 0) {\n    throw new Error(\n      `No RPC available for chainId \"${chain.chainId}\" with mode ${mode}`,\n    );\n  }\n\n  return processedRPCs;\n}\n","import { isBrowser } from \"../../utils/platform.js\";\nimport type { AppMetadata } from \"../types.js\";\n\n/**\n * @internal\n */\nexport function getDefaultAppMetadata(): Required<AppMetadata> {\n  if (!isBrowser()) {\n    return {\n      name: \"thirdweb powered dApp\",\n      url: \"https://thirdweb.com\",\n      description: \"thirdweb powered dApp\",\n      logoUrl: \"https://thirdweb.com/favicon.ico\",\n    };\n  }\n\n  const { protocol, hostname, port } = window.location;\n  let baseUrl = `${protocol}//${hostname}`;\n\n  // Add the port if it's not the default HTTP or HTTPS port\n  if (port && port !== \"80\" && port !== \"443\") {\n    baseUrl += `:${port}`;\n  }\n\n  const logoUrl = `${baseUrl}/favicon.ico`;\n\n  return {\n    name: window.document.title || \"thirdweb powered dApp\",\n    url: baseUrl,\n    description: window.document.title || \"thirdweb powered dApp\",\n    logoUrl,\n  };\n}\n","import { hexToNumber, isHex } from \"../../utils/encoding/hex.js\";\n\n/**\n * @internal\n */\nexport function normalizeChainId(chainId: string | number | bigint): number {\n  if (typeof chainId === \"number\") {\n    return chainId;\n  }\n  if (isHex(chainId)) {\n    return hexToNumber(chainId);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return Number.parseInt(chainId, 10);\n}\n","import type { ErrorType } from '../errors/utils.js'\n\nexport type StringifyErrorType = ErrorType\n\nexport const stringify: typeof JSON.stringify = (value, replacer, space) =>\n  JSON.stringify(\n    value,\n    (key, value_) => {\n      const value = typeof value_ === 'bigint' ? value_.toString() : value_\n      return typeof replacer === 'function' ? replacer(key, value) : value\n    },\n    space,\n  )\n","import { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type HttpRequestErrorType = HttpRequestError & {\n  name: 'HttpRequestError'\n}\nexport class HttpRequestError extends BaseError {\n  override name = 'HttpRequestError'\n\n  body?: { [x: string]: unknown } | { [y: string]: unknown }[] | undefined\n  headers?: Headers | undefined\n  status?: number | undefined\n  url: string\n\n  constructor({\n    body,\n    details,\n    headers,\n    status,\n    url,\n  }: {\n    body?: { [x: string]: unknown } | { [y: string]: unknown }[] | undefined\n    details?: string | undefined\n    headers?: Headers | undefined\n    status?: number | undefined\n    url: string\n  }) {\n    super('HTTP request failed.', {\n      details,\n      metaMessages: [\n        status && `Status: ${status}`,\n        `URL: ${getUrl(url)}`,\n        body && `Request body: ${stringify(body)}`,\n      ].filter(Boolean) as string[],\n    })\n    this.body = body\n    this.headers = headers\n    this.status = status\n    this.url = url\n  }\n}\n\nexport type WebSocketRequestErrorType = WebSocketRequestError & {\n  name: 'WebSocketRequestError'\n}\nexport class WebSocketRequestError extends BaseError {\n  override name = 'WebSocketRequestError'\n\n  constructor({\n    body,\n    details,\n    url,\n  }: {\n    body: { [key: string]: unknown }\n    details: string\n    url: string\n  }) {\n    super('WebSocket request failed.', {\n      details,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n  }\n}\n\nexport type RpcRequestErrorType = RpcRequestError & {\n  name: 'RpcRequestError'\n}\nexport class RpcRequestError extends BaseError {\n  override name = 'RpcRequestError'\n\n  code: number\n\n  constructor({\n    body,\n    error,\n    url,\n  }: {\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\n    error: { code: number; message: string }\n    url: string\n  }) {\n    super('RPC Request failed.', {\n      cause: error as any,\n      details: error.message,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n    this.code = error.code\n  }\n}\n\nexport type TimeoutErrorType = TimeoutError & {\n  name: 'TimeoutError'\n}\nexport class TimeoutError extends BaseError {\n  override name = 'TimeoutError'\n\n  constructor({\n    body,\n    url,\n  }: {\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\n    url: string\n  }) {\n    super('The request took too long to respond.', {\n      details: 'The request timed out.',\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n  }\n}\n","import type { Prettify } from '../types/utils.js'\nimport { BaseError } from './base.js'\nimport { RpcRequestError } from './request.js'\n\nconst unknownErrorCode = -1\n\nexport type RpcErrorCode =\n  | -1\n  | -32700 // Parse error\n  | -32600 // Invalid request\n  | -32601 // Method not found\n  | -32602 // Invalid params\n  | -32603 // Internal error\n  | -32000 // Invalid input\n  | -32001 // Resource not found\n  | -32002 // Resource unavailable\n  | -32003 // Transaction rejected\n  | -32004 // Method not supported\n  | -32005 // Limit exceeded\n  | -32006 // JSON-RPC version not supported\n  | -32042 // Method not found\n\ntype RpcErrorOptions<TCode extends number = RpcErrorCode> = {\n  code?: TCode | (number & {}) | undefined\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n}\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n *\n * - EIP https://eips.ethereum.org/EIPS/eip-1474\n */\nexport type RpcErrorType = RpcError & { name: 'RpcError' }\nexport class RpcError<TCode extends number = RpcErrorCode> extends BaseError {\n  override name = 'RpcError'\n\n  code: TCode | (number & {})\n\n  constructor(\n    cause: Error,\n    { code, docsPath, metaMessages, shortMessage }: RpcErrorOptions<TCode>,\n  ) {\n    super(shortMessage, {\n      cause,\n      docsPath,\n      metaMessages:\n        metaMessages || (cause as { metaMessages?: string[] })?.metaMessages,\n    })\n    this.name = cause.name\n    this.code = (\n      cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode\n    ) as TCode\n  }\n}\n\nexport type ProviderRpcErrorCode =\n  | 4001 // User Rejected Request\n  | 4100 // Unauthorized\n  | 4200 // Unsupported Method\n  | 4900 // Disconnected\n  | 4901 // Chain Disconnected\n  | 4902 // Chain Not Recognized\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n *\n * - EIP https://eips.ethereum.org/EIPS/eip-1193\n */\nexport type ProviderRpcErrorType = ProviderRpcError & {\n  name: 'ProviderRpcError'\n}\nexport class ProviderRpcError<\n  T = undefined,\n> extends RpcError<ProviderRpcErrorCode> {\n  override name = 'ProviderRpcError'\n\n  data?: T | undefined\n\n  constructor(\n    cause: Error,\n    options: Prettify<\n      RpcErrorOptions<ProviderRpcErrorCode> & {\n        data?: T | undefined\n      }\n    >,\n  ) {\n    super(cause, options)\n\n    this.data = options.data\n  }\n}\n\n/**\n * Subclass for a \"Parse error\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ParseRpcErrorType = ParseRpcError & {\n  code: -32700\n  name: 'ParseRpcError'\n}\nexport class ParseRpcError extends RpcError {\n  override name = 'ParseRpcError'\n  static code = -32700 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ParseRpcError.code,\n      shortMessage:\n        'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Invalid request\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidRequestRpcErrorType = InvalidRequestRpcError & {\n  code: -32600\n  name: 'InvalidRequestRpcError'\n}\nexport class InvalidRequestRpcError extends RpcError {\n  override name = 'InvalidRequestRpcError'\n  static code = -32600 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidRequestRpcError.code,\n      shortMessage: 'JSON is not a valid request object.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Method not found\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type MethodNotFoundRpcErrorType = MethodNotFoundRpcError & {\n  code: -32601\n  name: 'MethodNotFoundRpcError'\n}\nexport class MethodNotFoundRpcError extends RpcError {\n  override name = 'MethodNotFoundRpcError'\n  static code = -32601 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: MethodNotFoundRpcError.code,\n      shortMessage: 'The method does not exist / is not available.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Invalid params\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidParamsRpcErrorType = InvalidParamsRpcError & {\n  code: -32602\n  name: 'InvalidParamsRpcError'\n}\nexport class InvalidParamsRpcError extends RpcError {\n  override name = 'InvalidParamsRpcError'\n  static code = -32602 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidParamsRpcError.code,\n      shortMessage: [\n        'Invalid parameters were provided to the RPC method.',\n        'Double check you have provided the correct parameters.',\n      ].join('\\n'),\n    })\n  }\n}\n\n/**\n * Subclass for an \"Internal error\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InternalRpcErrorType = InternalRpcError & {\n  code: -32603\n  name: 'InternalRpcError'\n}\nexport class InternalRpcError extends RpcError {\n  override name = 'InternalRpcError'\n  static code = -32603 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InternalRpcError.code,\n      shortMessage: 'An internal error was received.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Invalid input\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidInputRpcErrorType = InvalidInputRpcError & {\n  code: -32000\n  name: 'InvalidInputRpcError'\n}\nexport class InvalidInputRpcError extends RpcError {\n  override name = 'InvalidInputRpcError'\n  static code = -32000 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidInputRpcError.code,\n      shortMessage: [\n        'Missing or invalid parameters.',\n        'Double check you have provided the correct parameters.',\n      ].join('\\n'),\n    })\n  }\n}\n\n/**\n * Subclass for a \"Resource not found\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ResourceNotFoundRpcErrorType = ResourceNotFoundRpcError & {\n  code: -32001\n  name: 'ResourceNotFoundRpcError'\n}\nexport class ResourceNotFoundRpcError extends RpcError {\n  override name = 'ResourceNotFoundRpcError'\n  static code = -32001 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ResourceNotFoundRpcError.code,\n      shortMessage: 'Requested resource not found.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Resource unavailable\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ResourceUnavailableRpcErrorType = ResourceUnavailableRpcError & {\n  code: -32002\n  name: 'ResourceUnavailableRpcError'\n}\nexport class ResourceUnavailableRpcError extends RpcError {\n  override name = 'ResourceUnavailableRpcError'\n  static code = -32002 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ResourceUnavailableRpcError.code,\n      shortMessage: 'Requested resource not available.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Transaction rejected\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type TransactionRejectedRpcErrorType = TransactionRejectedRpcError & {\n  code: -32003\n  name: 'TransactionRejectedRpcError'\n}\nexport class TransactionRejectedRpcError extends RpcError {\n  override name = 'TransactionRejectedRpcError'\n  static code = -32003 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: TransactionRejectedRpcError.code,\n      shortMessage: 'Transaction creation failed.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Method not supported\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type MethodNotSupportedRpcErrorType = MethodNotSupportedRpcError & {\n  code: -32004\n  name: 'MethodNotSupportedRpcError'\n}\nexport class MethodNotSupportedRpcError extends RpcError {\n  override name = 'MethodNotSupportedRpcError'\n  static code = -32004 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: MethodNotSupportedRpcError.code,\n      shortMessage: 'Method is not implemented.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Limit exceeded\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type LimitExceededRpcErrorType = LimitExceededRpcError & {\n  code: -32005\n  name: 'LimitExceededRpcError'\n}\nexport class LimitExceededRpcError extends RpcError {\n  override name = 'LimitExceededRpcError'\n  static code = -32005 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: LimitExceededRpcError.code,\n      shortMessage: 'Request exceeds defined limit.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"JSON-RPC version not supported\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type JsonRpcVersionUnsupportedErrorType =\n  JsonRpcVersionUnsupportedError & {\n    code: -32006\n    name: 'JsonRpcVersionUnsupportedError'\n  }\nexport class JsonRpcVersionUnsupportedError extends RpcError {\n  override name = 'JsonRpcVersionUnsupportedError'\n  static code = -32006 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: JsonRpcVersionUnsupportedError.code,\n      shortMessage: 'Version of JSON-RPC protocol is not supported.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"User Rejected Request\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UserRejectedRequestErrorType = UserRejectedRequestError & {\n  code: 4001\n  name: 'UserRejectedRequestError'\n}\nexport class UserRejectedRequestError extends ProviderRpcError {\n  override name = 'UserRejectedRequestError'\n  static code = 4001 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UserRejectedRequestError.code,\n      shortMessage: 'User rejected the request.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Unauthorized\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UnauthorizedProviderErrorType = UnauthorizedProviderError & {\n  code: 4100\n  name: 'UnauthorizedProviderError'\n}\nexport class UnauthorizedProviderError extends ProviderRpcError {\n  override name = 'UnauthorizedProviderError'\n  static code = 4100 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UnauthorizedProviderError.code,\n      shortMessage:\n        'The requested method and/or account has not been authorized by the user.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Unsupported Method\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UnsupportedProviderMethodErrorType =\n  UnsupportedProviderMethodError & {\n    code: 4200\n    name: 'UnsupportedProviderMethodError'\n  }\nexport class UnsupportedProviderMethodError extends ProviderRpcError {\n  override name = 'UnsupportedProviderMethodError'\n  static code = 4200 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UnsupportedProviderMethodError.code,\n      shortMessage: 'The Provider does not support the requested method.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Disconnected\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type ProviderDisconnectedErrorType = ProviderDisconnectedError & {\n  code: 4900\n  name: 'ProviderDisconnectedError'\n}\nexport class ProviderDisconnectedError extends ProviderRpcError {\n  override name = 'ProviderDisconnectedError'\n  static code = 4900 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ProviderDisconnectedError.code,\n      shortMessage: 'The Provider is disconnected from all chains.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Chain Disconnected\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type ChainDisconnectedErrorType = ChainDisconnectedError & {\n  code: 4901\n  name: 'ChainDisconnectedError'\n}\nexport class ChainDisconnectedError extends ProviderRpcError {\n  override name = 'ChainDisconnectedError'\n  static code = 4901 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ChainDisconnectedError.code,\n      shortMessage: 'The Provider is not connected to the requested chain.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Switch Chain\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type SwitchChainErrorType = SwitchChainError & {\n  code: 4902\n  name: 'SwitchChainError'\n}\nexport class SwitchChainError extends ProviderRpcError {\n  override name = 'SwitchChainError'\n  static code = 4902 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: SwitchChainError.code,\n      shortMessage: 'An error occurred when attempting to switch chain.',\n    })\n  }\n}\n\n/**\n * Subclass for an unknown RPC error.\n */\nexport type UnknownRpcErrorType = UnknownRpcError & {\n  name: 'UnknownRpcError'\n}\nexport class UnknownRpcError extends RpcError {\n  override name = 'UnknownRpcError'\n\n  constructor(cause: Error) {\n    super(cause, {\n      shortMessage: 'An unknown RPC error occurred.',\n    })\n  }\n}\n","export const DEFAULT_PROJECT_ID = \"08c4b07e3ad25f1a27c14a4e8cecb6f0\";\n\nexport const NAMESPACE = \"eip155\";\n","import type { EthereumProvider } from \"@walletconnect/ethereum-provider\";\nimport type { Address } from \"abitype\";\nimport {\n  type ProviderRpcError,\n  type SignTypedDataParameters,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from \"viem\";\nimport type { Chain } from \"../../chains/types.js\";\nimport {\n  getCachedChain,\n  getChainMetadata,\n  getRpcUrlForChain,\n} from \"../../chains/utils.js\";\nimport {\n  type Hex,\n  isHex,\n  numberToHex,\n  stringToHex,\n  uint8ArrayToHex,\n} from \"../../utils/encoding/hex.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport { isAndroid, isIOS, isMobile } from \"../../utils/web/isMobile.js\";\nimport { openWindow } from \"../../utils/web/openWindow.js\";\nimport { getWalletInfo } from \"../__generated__/getWalletInfo.js\";\nimport type { WCSupportedWalletIds } from \"../__generated__/wallet-ids.js\";\nimport type {\n  Account,\n  SendTransactionOption,\n  Wallet,\n} from \"../interfaces/wallet.js\";\nimport type { DisconnectFn, SwitchChainFn } from \"../types.js\";\nimport { getValidPublicRPCUrl } from \"../utils/chains.js\";\nimport { getDefaultAppMetadata } from \"../utils/defaultDappMetadata.js\";\nimport { normalizeChainId } from \"../utils/normalizeChainId.js\";\nimport type { WalletEmitter } from \"../wallet-emitter.js\";\nimport type { WCAutoConnectOptions, WCConnectOptions } from \"./types.js\";\n\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getStorage } from \"../../react/core/storage.js\";\nimport { getAddress } from \"../../utils/address.js\";\nimport { isReactNative } from \"../../utils/platform.js\";\nimport { parseTypedData } from \"../../utils/signatures/helpers/parseTypedData.js\";\nimport { formatWalletConnectUrl } from \"../../utils/url.js\";\nimport {\n  getSavedConnectParamsFromStorage,\n  saveConnectParamsToStorage,\n} from \"../storage/walletStorage.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport { DEFAULT_PROJECT_ID, NAMESPACE } from \"./constants.js\";\n\nconst asyncLocalStorage = getStorage();\n\ntype WCProvider = InstanceType<typeof EthereumProvider>;\n\ntype SavedConnectParams = {\n  optionalChains?: Chain[];\n  chain?: Chain;\n  pairingTopic?: string;\n};\n\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\n\nconst defaultShowQrModal = true;\n\nconst storageKeys = {\n  requestedChains: \"tw.wc.requestedChains\",\n  lastUsedChainId: \"tw.wc.lastUsedChainId\",\n};\n\n/**\n * Checks if the provided wallet is a Wallet Connect wallet.\n *\n * @param wallet - The wallet to check.\n * @returns True if the wallet is a Wallet Connect wallet, false otherwise.\n */\nexport function isWalletConnect(\n  wallet: Wallet<WalletId>,\n): wallet is Wallet<\"walletConnect\"> {\n  return wallet.id === \"walletConnect\";\n}\n\n/**\n * @internal\n */\nexport async function connectWC(\n  options: WCConnectOptions,\n  emitter: WalletEmitter<WCSupportedWalletIds>,\n  walletId: WCSupportedWalletIds | \"walletConnect\",\n): Promise<ReturnType<typeof onConnect>> {\n  const provider = await initProvider(options, walletId);\n  const wcOptions = options.walletConnect;\n\n  let { onDisplayUri } = wcOptions || {};\n\n  if (isReactNative() && !onDisplayUri) {\n    const walletInfo = await getWalletInfo(walletId);\n    const nativeCallaback = (uri: string) => {\n      const { Linking } = require(\"react-native\");\n      const appUrl = walletInfo.mobile.native || walletInfo.mobile.universal;\n      if (!appUrl) {\n        throw new Error(\"No app url found for wallet connect to redirect to.\");\n      }\n      const fullUrl = formatWalletConnectUrl(appUrl, uri).redirect;\n      Linking.openURL(fullUrl);\n    };\n    onDisplayUri = nativeCallaback;\n  }\n\n  if (onDisplayUri) {\n    provider.events.addListener(\"display_uri\", onDisplayUri);\n  }\n\n  const { rpcMap, chainsToRequest } = getChainsToRequest({\n    client: options.client,\n    chain: options.chain,\n    optionalChains: options.walletConnect?.optionalChains,\n  });\n\n  if (provider.session) {\n    await provider.connect({\n      ...(wcOptions?.pairingTopic\n        ? { pairingTopic: wcOptions?.pairingTopic }\n        : {}),\n      optionalChains: chainsToRequest,\n      chains: options.chain\n        ? [options.chain.id]\n        : chainsToRequest.length > 0\n          ? [chainsToRequest[0]]\n          : [1],\n      rpcMap: rpcMap,\n    });\n  }\n\n  setRequestedChainsIds(chainsToRequest);\n  // If session exists and chains are authorized, enable provider for required chain\n  const addresses = await provider.enable();\n  const address = addresses[0];\n  if (!address) {\n    throw new Error(\"No accounts found on provider.\");\n  }\n\n  const providerChainId = normalizeChainId(provider.chainId);\n\n  const chain =\n    options.chain && options.chain.id === providerChainId\n      ? options.chain\n      : getCachedChain(providerChainId);\n\n  if (options) {\n    const savedParams: SavedConnectParams = {\n      optionalChains: options.walletConnect?.optionalChains,\n      chain: options.chain,\n      pairingTopic: options.walletConnect?.pairingTopic,\n    };\n\n    if (asyncLocalStorage) {\n      saveConnectParamsToStorage(asyncLocalStorage, walletId, savedParams);\n    }\n  }\n\n  if (wcOptions?.onDisplayUri) {\n    provider.events.removeListener(\"display_uri\", wcOptions.onDisplayUri);\n  }\n\n  return onConnect(address, chain, provider, emitter);\n}\n\n/**\n * Auto connect to already connected wallet connect session.\n * @internal\n */\nexport async function autoConnectWC(\n  options: WCAutoConnectOptions,\n  emitter: WalletEmitter<WCSupportedWalletIds>,\n  walletId: WCSupportedWalletIds | \"walletConnect\",\n): Promise<ReturnType<typeof onConnect>> {\n  const savedConnectParams: SavedConnectParams | null = asyncLocalStorage\n    ? await getSavedConnectParamsFromStorage(asyncLocalStorage, walletId)\n    : null;\n\n  const provider = await initProvider(\n    savedConnectParams\n      ? {\n          chain: savedConnectParams.chain,\n          client: options.client,\n          walletConnect: {\n            pairingTopic: savedConnectParams.pairingTopic,\n            optionalChains: savedConnectParams.optionalChains,\n          },\n        }\n      : {\n          client: options.client,\n          walletConnect: {},\n        },\n    walletId,\n    true, // is auto connect\n  );\n\n  const address = provider.accounts[0];\n\n  if (!address) {\n    throw new Error(\"No accounts found on provider.\");\n  }\n\n  const providerChainId = normalizeChainId(provider.chainId);\n\n  const chain =\n    options.chain && options.chain.id === providerChainId\n      ? options.chain\n      : getCachedChain(providerChainId);\n\n  return onConnect(address, chain, provider, emitter);\n}\n\n// Connection utils -----------------------------------------------------------------------------------------------\n\nasync function initProvider(\n  options: WCConnectOptions,\n  walletId: WCSupportedWalletIds | \"walletConnect\",\n  isAutoConnect = false,\n) {\n  const walletInfo = await getWalletInfo(walletId);\n  const wcOptions = options.walletConnect;\n  const { EthereumProvider, OPTIONAL_EVENTS, OPTIONAL_METHODS } = await import(\n    \"@walletconnect/ethereum-provider\"\n  );\n\n  const { rpcMap, chainsToRequest } = getChainsToRequest({\n    client: options.client,\n    chain: options.chain,\n    optionalChains: options.walletConnect?.optionalChains,\n  });\n\n  const provider = await EthereumProvider.init({\n    showQrModal: isReactNative()\n      ? false\n      : wcOptions?.showQrModal === undefined\n        ? defaultShowQrModal\n        : wcOptions.showQrModal,\n    projectId: wcOptions?.projectId || DEFAULT_PROJECT_ID,\n    optionalMethods: OPTIONAL_METHODS,\n    optionalEvents: OPTIONAL_EVENTS,\n    optionalChains: chainsToRequest,\n    chains: options.chain\n      ? [options.chain.id]\n      : chainsToRequest.length > 0\n        ? [chainsToRequest[0]]\n        : [1],\n    metadata: {\n      name: wcOptions?.appMetadata?.name || getDefaultAppMetadata().name,\n      description:\n        wcOptions?.appMetadata?.description ||\n        getDefaultAppMetadata().description,\n      url: wcOptions?.appMetadata?.url || getDefaultAppMetadata().url,\n      icons: [\n        wcOptions?.appMetadata?.logoUrl || getDefaultAppMetadata().logoUrl,\n      ],\n    },\n    rpcMap: rpcMap,\n    qrModalOptions: wcOptions?.qrModalOptions,\n    disableProviderPing: true,\n  });\n\n  provider.events.setMaxListeners(Number.POSITIVE_INFINITY);\n\n  // disconnect the provider if chains are stale when (if not auto connecting)\n  if (!isAutoConnect) {\n    // const isStale = await isChainsStale(provider, chainsToRequest);\n\n    if (provider.session) {\n      await provider.disconnect();\n    }\n  }\n\n  if (walletId !== \"walletConnect\") {\n    function handleSessionRequest() {\n      const preferNative =\n        provider.session?.peer?.metadata?.redirect?.native ||\n        walletInfo.mobile.native ||\n        walletInfo.mobile.universal;\n\n      if (isReactNative()) {\n        const { Linking } = require(\"react-native\");\n        if (!preferNative) {\n          throw new Error(\n            \"No app url found for wallet connect to redirect to.\",\n          );\n        }\n        Linking.openURL(preferNative);\n        return;\n      }\n\n      if (!isMobile()) {\n        return;\n      }\n\n      if (isAndroid()) {\n        if (preferNative) {\n          openWindow(preferNative);\n        }\n      } else if (isIOS()) {\n        if (preferNative) {\n          openWindow(preferNative);\n        }\n      } else {\n        const preferUniversal =\n          walletInfo.mobile.universal || walletInfo.mobile.native;\n\n        if (preferUniversal) {\n          openWindow(preferUniversal);\n        }\n      }\n    }\n\n    provider.signer.client.on(\"session_request_sent\", handleSessionRequest);\n    provider.events.addListener(\"disconnect\", () => {\n      provider.signer.client.off(\"session_request_sent\", handleSessionRequest);\n    });\n  }\n\n  return provider;\n}\n\nfunction createAccount(provider: WCProvider, address: string) {\n  const account: Account = {\n    address,\n    async sendTransaction(tx: SendTransactionOption) {\n      const transactionHash = (await provider.request({\n        method: \"eth_sendTransaction\",\n        params: [\n          {\n            gas: tx.gas ? numberToHex(tx.gas) : undefined,\n            value: tx.value ? numberToHex(tx.value) : undefined,\n            from: this.address,\n            to: tx.to as Address,\n            data: tx.data,\n          },\n        ],\n      })) as Hex;\n\n      return {\n        transactionHash,\n      };\n    },\n    async signMessage({ message }) {\n      const messageToSign = (() => {\n        if (typeof message === \"string\") {\n          return stringToHex(message);\n        }\n        if (message.raw instanceof Uint8Array) {\n          return uint8ArrayToHex(message.raw);\n        }\n        return message.raw;\n      })();\n      return provider.request({\n        method: \"personal_sign\",\n        params: [messageToSign, this.address],\n      });\n    },\n    async signTypedData(_data) {\n      const data = parseTypedData(_data);\n      const { domain, message, primaryType } =\n        data as unknown as SignTypedDataParameters;\n\n      const types = {\n        EIP712Domain: getTypesForEIP712Domain({ domain }),\n        ...data.types,\n      };\n\n      // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n      // as we can't statically check this with TypeScript.\n      validateTypedData({ domain, message, primaryType, types });\n\n      const typedData = stringify(\n        { domain: domain ?? {}, message, primaryType, types },\n        (_, value) => (isHex(value) ? value.toLowerCase() : value),\n      );\n\n      return await provider.request({\n        method: \"eth_signTypedData_v4\",\n        params: [this.address, typedData],\n      });\n    },\n  };\n\n  return account;\n}\n\nfunction onConnect(\n  address: string,\n  chain: Chain,\n  provider: WCProvider,\n  emitter: WalletEmitter<WCSupportedWalletIds>,\n): [Account, Chain, DisconnectFn, SwitchChainFn] {\n  const account = createAccount(provider, address);\n\n  async function disconnect() {\n    provider.removeListener(\"accountsChanged\", onAccountsChanged);\n    provider.removeListener(\"chainChanged\", onChainChanged);\n    provider.removeListener(\"disconnect\", onDisconnect);\n    await provider.disconnect();\n  }\n\n  function onDisconnect() {\n    setRequestedChainsIds([]);\n    asyncLocalStorage?.removeItem(storageKeys.lastUsedChainId);\n    disconnect();\n    emitter.emit(\"disconnect\", undefined);\n  }\n\n  function onAccountsChanged(accounts: string[]) {\n    if (accounts[0]) {\n      const newAccount = createAccount(provider, getAddress(accounts[0]));\n      emitter.emit(\"accountChanged\", newAccount);\n      emitter.emit(\"accountsChanged\", accounts);\n    } else {\n      onDisconnect();\n    }\n  }\n\n  function onChainChanged(newChainId: string) {\n    const newChain = getCachedChain(normalizeChainId(newChainId));\n    emitter.emit(\"chainChanged\", newChain);\n    asyncLocalStorage?.setItem(storageKeys.lastUsedChainId, String(newChainId));\n  }\n\n  provider.on(\"accountsChanged\", onAccountsChanged);\n  provider.on(\"chainChanged\", onChainChanged);\n  provider.on(\"disconnect\", onDisconnect);\n  provider.on(\"session_delete\", onDisconnect);\n\n  return [\n    account,\n    chain,\n    disconnect,\n    (newChain) => switchChainWC(provider, newChain),\n  ];\n}\n\n// Storage utils  -----------------------------------------------------------------------------------------------\n\nfunction getNamespaceMethods(provider: WCProvider) {\n  return provider.session?.namespaces[NAMESPACE]?.methods || [];\n}\n\nfunction getNamespaceChainsIds(provider: WCProvider): number[] {\n  const chainIds = provider.session?.namespaces[NAMESPACE]?.chains?.map(\n    (chain) => Number.parseInt(chain.split(\":\")[1] || \"\"),\n  );\n\n  return chainIds ?? [];\n}\n\nasync function switchChainWC(provider: WCProvider, chain: Chain) {\n  const chainId = chain.id;\n  try {\n    const namespaceChains = getNamespaceChainsIds(provider);\n    const namespaceMethods = getNamespaceMethods(provider);\n    const isChainApproved = namespaceChains.includes(chainId);\n\n    if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      const apiChain = await getChainMetadata(chain);\n\n      await provider.request({\n        method: ADD_ETH_CHAIN_METHOD,\n        params: [\n          {\n            chainId: numberToHex(apiChain.chainId),\n            chainName: apiChain.name,\n            nativeCurrency: apiChain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(apiChain), // no clientId on purpose\n            blockExplorerUrls:\n              chain.blockExplorers?.slice(0, 1) ||\n              apiChain.explorers?.slice(0, 1) ||\n              [],\n          },\n        ],\n      });\n      const requestedChains = await getRequestedChainsIds();\n      requestedChains.push(chainId);\n      setRequestedChainsIds(requestedChains);\n    }\n    await provider.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: numberToHex(chainId) }],\n    });\n  } catch (error) {\n    const message =\n      typeof error === \"string\" ? error : (error as ProviderRpcError)?.message;\n    if (/user rejected request/i.test(message)) {\n      throw new UserRejectedRequestError(error as Error);\n    }\n\n    throw new SwitchChainError(error as Error);\n  }\n}\n\n/**\n * Set the requested chains to the storage.\n * @internal\n */\nfunction setRequestedChainsIds(chains: number[]) {\n  asyncLocalStorage?.setItem(\n    storageKeys.requestedChains,\n    JSON.stringify(chains),\n  );\n}\n\n/**\n * Get the last requested chains from the storage.\n * @internal\n */\nasync function getRequestedChainsIds(): Promise<number[]> {\n  const data = await asyncLocalStorage?.getItem(storageKeys.requestedChains);\n  return data ? JSON.parse(data) : [];\n}\n\ntype ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\nfunction getChainsToRequest(options: {\n  chain?: Chain;\n  optionalChains?: Chain[];\n  client: ThirdwebClient;\n}) {\n  const rpcMap: Record<number, string> = {};\n\n  if (options.chain) {\n    rpcMap[options.chain.id] = getRpcUrlForChain({\n      chain: options.chain,\n      client: options.client,\n    });\n  }\n\n  // limit optional chains to 10\n  const optionalChains = (options?.optionalChains || []).slice(0, 10);\n\n  for (const chain of optionalChains) {\n    rpcMap[chain.id] = getRpcUrlForChain({\n      chain: chain,\n      client: options.client,\n    });\n  }\n\n  const optionalChainIds = optionalChains.map((c) => c.id) || [];\n\n  const chainsToRequest: ArrayOneOrMore<number> = options.chain\n    ? [options.chain.id, ...optionalChainIds]\n    : optionalChainIds.length > 0\n      ? (optionalChainIds as ArrayOneOrMore<number>)\n      : [1];\n\n  if (!options.chain && optionalChains.length === 0) {\n    rpcMap[1] = getCachedChain(1).rpc;\n  }\n\n  return {\n    rpcMap,\n    chainsToRequest,\n  };\n}\n","export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n","import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) validateData(struct, value as Record<string, unknown>)\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) validateData(types.EIP712Domain, domain)\n\n  if (primaryType !== 'EIP712Domain') {\n    // Validate message types.\n    const type = types[primaryType]\n    validateData(type, message)\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    typeof domain?.chainId === 'number' && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n"],"names":["parseTypedData","typedData","domain","undefined","chainId","isHex","hexToNumber","getValidPublicRPCUrl","chain","clientId","mode","arguments","length","processedRPCs","rpc","startsWith","includes","push","replace","globalThis","concat","APP_BUNDLE_ID","Error","getValidChainRPCs","map","url","URL","hostname","endsWith","pathname","search","toString","e","getDefaultAppMetadata","isBrowser","name","description","logoUrl","protocol","port","window","location","baseUrl","document","title","normalizeChainId","Number","parseInt","stringify","value","replacer","space","JSON","key","value_","BaseError","RpcRequestError","constructor","_ref3","body","error","super","cause","details","message","metaMessages","getUrl","Object","defineProperty","this","code","RpcError","_ref","docsPath","shortMessage","ProviderRpcError","options","data","ParseRpcError","InvalidRequestRpcError","MethodNotFoundRpcError","InvalidParamsRpcError","join","InternalRpcError","InvalidInputRpcError","ResourceNotFoundRpcError","ResourceUnavailableRpcError","TransactionRejectedRpcError","MethodNotSupportedRpcError","LimitExceededRpcError","JsonRpcVersionUnsupportedError","UserRejectedRequestError","UnauthorizedProviderError","UnsupportedProviderMethodError","ProviderDisconnectedError","ChainDisconnectedError","SwitchChainError","DEFAULT_PROJECT_ID","NAMESPACE","asyncLocalStorage","getStorage","ADD_ETH_CHAIN_METHOD","defaultShowQrModal","storageKeys","requestedChains","lastUsedChainId","async","connectWC","emitter","walletId","_options$walletConnec","provider","initProvider","wcOptions","walletConnect","onDisplayUri","isReactNative","walletInfo","getWalletInfo","uri","Linking","require","appUrl","mobile","native","universal","fullUrl","formatWalletConnectUrl","redirect","openURL","events","addListener","rpcMap","chainsToRequest","getChainsToRequest","client","optionalChains","session","connect","pairingTopic","chains","id","setRequestedChainsIds","address","enable","providerChainId","getCachedChain","_options$walletConnec2","_options$walletConnec3","savedParams","saveConnectParamsToStorage","removeListener","onConnect","autoConnectWC","savedConnectParams","getSavedConnectParamsFromStorage","accounts","_options$walletConnec4","_wcOptions$appMetadat","_wcOptions$appMetadat2","_wcOptions$appMetadat3","_wcOptions$appMetadat4","isAutoConnect","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","init","showQrModal","projectId","optionalMethods","optionalEvents","metadata","appMetadata","icons","qrModalOptions","disableProviderPing","setMaxListeners","POSITIVE_INFINITY","disconnect","handleSessionRequest","_provider$session","preferNative","peer","isMobile","isAndroid","openWindow","isIOS","preferUniversal","signer","on","off","createAccount","sendTransaction","tx","transactionHash","request","method","params","gas","numberToHex","from","to","signMessage","messageToSign","stringToHex","raw","Uint8Array","uint8ArrayToHex","signTypedData","_data","primaryType","types","EIP712Domain","getTypesForEIP712Domain","validateTypedData","_","toLowerCase","account","onAccountsChanged","onChainChanged","onDisconnect","removeItem","emit","newAccount","getAddress","newChainId","newChain","setItem","String","namespaceChains","_provider$session3","chainIds","namespaces","split","getNamespaceChainsIds","namespaceMethods","_provider$session2","methods","getNamespaceMethods","_chain$blockExplorers","_apiChain$explorers","apiChain","getChainMetadata","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","blockExplorers","slice","explorers","getItem","parse","getRequestedChainsIds","test","switchChainWC","getRpcUrlForChain","optionalChainIds","c","bytesRegex","integerRegex","parameters","validateData","struct","param","type","integerMatch","match","_type","base","size_","signed","size","isAddress","InvalidAddressError","bytesMatch","BytesSizeMismatchError","expectedSize","givenSize","version","verifyingContract","salt","filter","Boolean"],"sourceRoot":""}